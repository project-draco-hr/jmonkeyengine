{
  assetManager.registerLoader(KTXLoader.class,"ktx");
  viewPort.setBackgroundColor(ColorRGBA.White);
  modelNode=(Node)new Node("modelNode");
  model=(Geometry)assetManager.loadModel("Models/Tank/tank.j3o");
  modelNode.attachChild(model);
  dl=new DirectionalLight();
  dl.setDirection(new Vector3f(-1,-1,-1).normalizeLocal());
  rootNode.addLight(dl);
  dl.setColor(ColorRGBA.White);
  rootNode.attachChild(modelNode);
  final EnvironmentCamera envCam=new EnvironmentCamera(128,new Vector3f(0,3f,0));
  stateManager.attach(envCam);
  FilterPostProcessor fpp=new FilterPostProcessor(assetManager);
  fpp.addFilter(new FXAAFilter());
  fpp.addFilter(new ToneMapFilter(Vector3f.UNIT_XYZ.mult(2.0f)));
  viewPort.addProcessor(fpp);
  Spatial sky=SkyFactory.createSky(assetManager,"Textures/Sky/Path.hdr",SkyFactory.EnvMapType.EquirectMap);
  rootNode.attachChild(sky);
  pbrMat=assetManager.loadMaterial("Models/Tank/tank.j3m");
  model.setMaterial(pbrMat);
  ChaseCamera chaser=new ChaseCamera(cam,modelNode,inputManager);
  chaser.setDragToRotate(true);
  chaser.setMinVerticalRotation(-FastMath.HALF_PI);
  chaser.setMaxDistance(1000);
  chaser.setSmoothMotion(true);
  chaser.setRotationSensitivity(10);
  chaser.setZoomSensitivity(5);
  flyCam.setEnabled(false);
  inputManager.addListener(new ActionListener(){
    @Override public void onAction(    String name,    boolean isPressed,    float tpf){
      if (name.equals("toggle") && isPressed) {
        if (!indirectLighting) {
          toggleIBL();
        }
 else {
          pbrMat.clearParam("IntegrateBRDF");
          indirectLighting=false;
        }
      }
      if (name.equals("switchMats") && isPressed) {
        if (model.getMaterial() == pbrMat) {
          model.setMaterial(adHocMat);
        }
 else {
          model.setMaterial(pbrMat);
        }
      }
      if (name.equals("debug") && isPressed) {
        envCam.toggleDebug();
      }
      if (name.equals("up") && isPressed) {
        model.move(0,tpf * 100f,0);
      }
      if (name.equals("down") && isPressed) {
        model.move(0,-tpf * 100f,0);
      }
      if (name.equals("left") && isPressed) {
        model.move(0,0,tpf * 100f);
      }
      if (name.equals("right") && isPressed) {
        model.move(0,0,-tpf * 100f);
      }
      if (name.equals("light") && isPressed) {
        dl.setDirection(cam.getDirection().normalize());
      }
    }
  }
,"toggle","light","up","down","left","right","debug");
  inputManager.addMapping("toggle",new KeyTrigger(KeyInput.KEY_RETURN));
  inputManager.addMapping("light",new KeyTrigger(KeyInput.KEY_F));
  inputManager.addMapping("up",new KeyTrigger(KeyInput.KEY_UP));
  inputManager.addMapping("down",new KeyTrigger(KeyInput.KEY_DOWN));
  inputManager.addMapping("left",new KeyTrigger(KeyInput.KEY_LEFT));
  inputManager.addMapping("right",new KeyTrigger(KeyInput.KEY_RIGHT));
  inputManager.addMapping("debug",new KeyTrigger(KeyInput.KEY_D));
}
