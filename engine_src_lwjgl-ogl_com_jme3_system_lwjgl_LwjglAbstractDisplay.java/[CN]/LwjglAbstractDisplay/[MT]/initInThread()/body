{
  try {
    if (!JmeSystem.isLowPermissions()) {
      Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
        public void uncaughtException(        Thread thread,        Throwable thrown){
          listener.handleError("Uncaught exception thrown in " + thread.toString(),thrown);
        }
      }
);
    }
    createContext(settings);
    logger.info("Display created.");
    logger.log(Level.FINE,"Running on thread: {0}",Thread.currentThread().getName());
    logger.log(Level.INFO,"Adapter: {0}",Display.getAdapter());
    logger.log(Level.INFO,"Driver Version: {0}",Display.getVersion());
    String vendor=GL11.glGetString(GL11.GL_VENDOR);
    logger.log(Level.INFO,"Vendor: {0}",vendor);
    String version=GL11.glGetString(GL11.GL_VERSION);
    logger.log(Level.INFO,"OpenGL Version: {0}",version);
    String renderer=GL11.glGetString(GL11.GL_RENDERER);
    logger.log(Level.INFO,"Renderer: {0}",renderer);
    if (GLContext.getCapabilities().OpenGL20) {
      String shadingLang=GL11.glGetString(GL20.GL_SHADING_LANGUAGE_VERSION);
      logger.log(Level.INFO,"GLSL Ver: {0}",shadingLang);
    }
    created.set(true);
  }
 catch (  Exception ex) {
    listener.handleError("Failed to create display",ex);
  }
 finally {
    if (!created.get()) {
      if (Display.isCreated())       Display.destroy();
      return;
    }
  }
  super.internalCreate();
  listener.initialize();
}
