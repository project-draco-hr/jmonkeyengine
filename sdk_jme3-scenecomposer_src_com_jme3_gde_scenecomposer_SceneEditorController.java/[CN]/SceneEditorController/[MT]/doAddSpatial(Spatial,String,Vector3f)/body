{
  Node undoParent=null;
  Light undoLight=null;
  Spatial undoSpatial=null;
  if (selected instanceof Node) {
    if ("Node".equals(name)) {
      Node node=new Node("Node");
      ((Node)selected).attachChild(node);
      refreshSelected();
      undoSpatial=node;
      undoParent=((Node)selected);
    }
 else     if ("Particle Emitter".equals(name)) {
      ParticleEmitter emit=new ParticleEmitter("Emitter",ParticleMesh.Type.Triangle,200);
      emit.setShape(new EmitterSphereShape(Vector3f.ZERO,1f));
      emit.setGravity(0);
      emit.setLowLife(5);
      emit.setHighLife(10);
      emit.setInitialVelocity(new Vector3f(0,0,0));
      emit.setImagesX(15);
      Material mat=new Material(SceneApplication.getApplication().getAssetManager(),"Common/MatDefs/Misc/Particle.j3md");
      emit.setMaterial(mat);
      if (point != null) {
        Vector3f localVec=new Vector3f();
        selected.worldToLocal(point,localVec);
        emit.setLocalTranslation(localVec);
      }
      ((Node)selected).attachChild(emit);
      refreshSelected();
      undoSpatial=emit;
      undoParent=((Node)selected);
    }
 else     if ("Audio Node".equals(name)) {
      AudioNode node=new AudioNode();
      node.setName("Audio Node");
      if (point != null) {
        Vector3f localVec=new Vector3f();
        selected.worldToLocal(point,localVec);
        node.setLocalTranslation(localVec);
      }
      ((Node)selected).attachChild(node);
      refreshSelected();
      undoSpatial=node;
      undoParent=((Node)selected);
    }
 else     if ("Picture".equals(name)) {
      Picture pic=new Picture("Picture");
      Material mat=new Material(SceneApplication.getApplication().getAssetManager(),"Common/MatDefs/Misc/Particle.j3md");
      pic.setMaterial(mat);
      if (point != null) {
        Vector3f localVec=new Vector3f();
        selected.worldToLocal(point,localVec);
        pic.setLocalTranslation(localVec);
      }
      ((Node)selected).attachChild(pic);
      refreshSelected();
      undoSpatial=pic;
      undoParent=((Node)selected);
    }
 else     if ("Point Light".equals(name)) {
      PointLight light=new PointLight();
      if (point != null) {
        Vector3f localVec=new Vector3f();
        selected.worldToLocal(point,localVec);
        light.setPosition(localVec);
      }
      light.setColor(ColorRGBA.White);
      ((Node)selected).addLight(light);
      refreshSelected();
      undoLight=light;
      undoParent=((Node)selected);
    }
 else     if ("Directional Light".equals(name)) {
      DirectionalLight dl=new DirectionalLight();
      dl.setDirection(new Vector3f(-1,-1,-1).normalizeLocal());
      dl.setColor(ColorRGBA.White);
      ((Node)selected).addLight(dl);
      refreshSelected();
      undoLight=dl;
      undoParent=((Node)selected);
    }
 else     if ("Node".equals(name)) {
      Node node=new Node("Node");
      ((Node)selected).attachChild(node);
      refreshSelected();
      undoSpatial=node;
      undoParent=((Node)selected);
    }
  }
 else   if (selected instanceof Geometry) {
    if ("Point Light".equals(name)) {
      PointLight light=new PointLight();
      if (point != null) {
        Vector3f localVec=new Vector3f();
        selected.worldToLocal(point,localVec);
        light.setPosition(localVec);
      }
      light.setColor(ColorRGBA.White);
      selected.addLight(light);
      refreshSelected();
      undoLight=light;
      undoParent=((Node)selected);
    }
 else     if ("Directional Light".equals(name)) {
      DirectionalLight dl=new DirectionalLight();
      dl.setDirection(new Vector3f(-1,-1,-1).normalizeLocal());
      dl.setColor(ColorRGBA.White);
      selected.addLight(dl);
      refreshSelected();
      undoLight=dl;
      undoParent=((Node)selected);
    }
 else     if ("Ambient Light".equals(name)) {
      AmbientLight dl=new AmbientLight();
      dl.setColor(ColorRGBA.White);
      selected.addLight(dl);
      refreshSelected();
      undoLight=dl;
      undoParent=((Node)selected);
    }
  }
  AbstractSceneExplorerNode selectedSpat=this.selectedSpat;
  addSpatialUndo(undoParent,undoSpatial,undoLight,selectedSpat);
}
