{
  float oneMinusFactor=1.0f - fac;
  MaterialHelper materialHelper=blenderContext.getHelper(MaterialHelper.class);
switch (type) {
case MTEX_BLEND_HUE:
{
      float[] colorTransformResult=new float[3];
      materialHelper.rgbToHsv(pixelColor[0],pixelColor[1],pixelColor[2],colorTransformResult);
      if (colorTransformResult[0] != 0.0f) {
        float colH=colorTransformResult[0];
        materialHelper.rgbToHsv(materialRGB[0],materialRGB[1],materialRGB[2],colorTransformResult);
        materialHelper.hsvToRgb(colH,colorTransformResult[1],colorTransformResult[2],colorTransformResult);
        materialRGB[0]=oneMinusFactor * materialRGB[0] + fac * colorTransformResult[0];
        materialRGB[1]=oneMinusFactor * materialRGB[1] + fac * colorTransformResult[1];
        materialRGB[2]=oneMinusFactor * materialRGB[2] + fac * colorTransformResult[2];
      }
      break;
    }
case MTEX_BLEND_SAT:
{
    float[] colorTransformResult=new float[3];
    materialHelper.rgbToHsv(materialRGB[0],materialRGB[1],materialRGB[2],colorTransformResult);
    float h=colorTransformResult[0];
    float s=colorTransformResult[1];
    float v=colorTransformResult[2];
    if (s != 0.0f) {
      materialHelper.rgbToHsv(pixelColor[0],pixelColor[1],pixelColor[2],colorTransformResult);
      materialHelper.hsvToRgb(h,(oneMinusFactor * s + fac * colorTransformResult[1]),v,materialRGB);
    }
    break;
  }
case MTEX_BLEND_VAL:
{
  float[] rgbToHsv=new float[3];
  float[] colToHsv=new float[3];
  materialHelper.rgbToHsv(materialRGB[0],materialRGB[1],materialRGB[2],rgbToHsv);
  materialHelper.rgbToHsv(pixelColor[0],pixelColor[1],pixelColor[2],colToHsv);
  materialHelper.hsvToRgb(rgbToHsv[0],rgbToHsv[1],(oneMinusFactor * rgbToHsv[2] + fac * colToHsv[2]),materialRGB);
  break;
}
case MTEX_BLEND_COLOR:
{
float[] rgbToHsv=new float[3];
float[] colToHsv=new float[3];
materialHelper.rgbToHsv(pixelColor[0],pixelColor[1],pixelColor[2],colToHsv);
if (colToHsv[2] != 0) {
  materialHelper.rgbToHsv(materialRGB[0],materialRGB[1],materialRGB[2],rgbToHsv);
  materialHelper.hsvToRgb(colToHsv[0],colToHsv[1],rgbToHsv[2],rgbToHsv);
  materialRGB[0]=oneMinusFactor * materialRGB[0] + fac * rgbToHsv[0];
  materialRGB[1]=oneMinusFactor * materialRGB[1] + fac * rgbToHsv[1];
  materialRGB[2]=oneMinusFactor * materialRGB[2] + fac * rgbToHsv[2];
}
break;
}
default :
throw new IllegalStateException("Unknown ramp type: " + type);
}
}
