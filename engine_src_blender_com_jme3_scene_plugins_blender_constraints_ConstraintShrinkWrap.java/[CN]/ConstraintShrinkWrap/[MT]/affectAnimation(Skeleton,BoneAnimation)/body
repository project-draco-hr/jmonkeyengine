{
  List<Vector3f> pts=new ArrayList<Vector3f>();
  try {
    Node node=(Node)this.getTarget(LoadedFeatureDataType.LOADED_FEATURE);
    for (    Spatial spatial : node.getChildren()) {
      if (spatial instanceof Geometry) {
        Mesh mesh=((Geometry)spatial).getMesh();
        FloatBuffer floatBuffer=mesh.getFloatBuffer(Type.Position);
        for (int i=0; i < floatBuffer.limit(); i+=3) {
          pts.add(new Vector3f(floatBuffer.get(i),floatBuffer.get(i + 1),floatBuffer.get(i + 2)));
        }
      }
    }
    BoneTrack boneTrack=this.getBoneTrack(skeleton,boneAnimation);
    if (boneTrack != null) {
      Vector3f[] translations=boneTrack.getTranslations();
      Quaternion[] rotations=boneTrack.getRotations();
      int maxFrames=translations.length;
      for (int frame=0; frame < maxFrames; ++frame) {
        Vector3f currentTranslation=translations[frame];
        Vector3f minDistancePoint=null;
        float distance=Float.MAX_VALUE;
        for (        Vector3f p : pts) {
          float temp=currentTranslation.distance(p);
          if (temp < distance) {
            distance=temp;
            minDistancePoint=p;
          }
        }
        translations[frame]=minDistancePoint.clone();
      }
      boneTrack.setKeyframes(boneTrack.getTimes(),translations,rotations,boneTrack.getScales());
    }
  }
 catch (  BlenderFileException e) {
    LOGGER.severe(e.getLocalizedMessage());
  }
}
