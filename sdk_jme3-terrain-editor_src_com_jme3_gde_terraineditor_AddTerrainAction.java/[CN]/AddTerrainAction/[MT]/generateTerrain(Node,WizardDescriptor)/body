{
  org.openide.nodes.Node selectedNode=(org.openide.nodes.Node)wizardDescriptor.getProperty("main_node");
  final Spatial spatial=selectedNode.getLookup().lookup(Spatial.class);
  final ProjectAssetManager manager=selectedNode.getLookup().lookup(ProjectAssetManager.class);
  String sceneName=selectedNode.getLookup().lookup(DataObject.class).getName();
  int totalSize=(Integer)wizardDescriptor.getProperty("totalSize");
  int patchSize=(Integer)wizardDescriptor.getProperty("patchSize");
  int alphaTextureSize=(Integer)wizardDescriptor.getProperty("alphaTextureSize");
  float[] heightmapData=null;
  AbstractHeightMap heightmap=(AbstractHeightMap)wizardDescriptor.getProperty("abstractHeightMap");
  if (heightmap != null) {
    heightmap.load();
    heightmapData=heightmap.getHeightMap();
  }
  TerrainQuad terrain=null;
  terrain=new TerrainQuad("terrain-" + sceneName,patchSize,totalSize,heightmapData);
  com.jme3.material.Material mat=new com.jme3.material.Material(manager,"Common/MatDefs/Terrain/TerrainLighting.j3md");
  String assetFolder="";
  if (manager != null && manager instanceof ProjectAssetManager) {
    assetFolder=((ProjectAssetManager)manager).getAssetFolderName();
  }
  for (int i=0; i < TerrainEditorController.NUM_ALPHA_TEXTURES; i++) {
    BufferedImage alphaBlend=new BufferedImage(alphaTextureSize,alphaTextureSize,BufferedImage.TYPE_INT_ARGB);
    if (i == 0) {
      for (int h=0; h < alphaTextureSize; h++) {
        for (int w=0; w < alphaTextureSize; w++) {
          alphaBlend.setRGB(w,h,0x00FF0000);
        }
      }
    }
    File alphaFolder=new File(assetFolder + "/Textures/terrain-alpha/");
    if (!alphaFolder.exists()) {
      alphaFolder.mkdir();
    }
    String alphaBlendFileName="/Textures/terrain-alpha/" + sceneName + "-"+ terrain.getName()+ "-alphablend"+ i+ ".png";
    File alphaImageFile=new File(assetFolder + alphaBlendFileName);
    ImageIO.write(alphaBlend,"png",alphaImageFile);
    Texture tex=manager.loadAsset(new TextureKey(alphaBlendFileName,false));
    if (i == 0) {
      mat.setTexture("AlphaMap",tex);
    }
  }
  Texture defaultTexture=manager.loadTexture(TerrainEditorController.DEFAULT_TERRAIN_TEXTURE);
  defaultTexture.setWrap(WrapMode.Repeat);
  mat.setTexture("DiffuseMap",defaultTexture);
  mat.setFloat("DiffuseMap_0_scale",TerrainEditorController.DEFAULT_TEXTURE_SCALE);
  mat.setBoolean("WardIso",true);
  terrain.setMaterial(mat);
  terrain.setModelBound(new BoundingBox());
  terrain.updateModelBound();
  terrain.setLocalTranslation(0,0,0);
  terrain.setLocalScale(1f,1f,1f);
  List<Camera> cameras=new ArrayList<Camera>();
  cameras.add(SceneApplication.getApplication().getCamera());
  TerrainLodControl control=new TerrainLodControl(terrain,cameras);
  return terrain;
}
