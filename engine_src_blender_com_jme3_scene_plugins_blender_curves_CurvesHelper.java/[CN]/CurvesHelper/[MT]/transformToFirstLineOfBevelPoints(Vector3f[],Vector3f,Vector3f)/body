{
  Vector3f planeNormal=secondCurvePoint.subtract(firstCurvePoint).normalizeLocal();
  float angle=FastMath.acos(planeNormal.dot(Vector3f.UNIT_Y));
  planeNormal.crossLocal(Vector3f.UNIT_Y).normalizeLocal();
  Quaternion pointRotation=new Quaternion();
  pointRotation.fromAngleAxis(angle,planeNormal);
  Matrix4f m=new Matrix4f();
  m.setRotationQuaternion(pointRotation);
  m.setTranslation(firstCurvePoint);
  float[] temp=new float[]{0,0,0,1};
  Vector3f[] verts=new Vector3f[startingLinePoints.length];
  for (int j=0; j < verts.length; ++j) {
    temp[0]=startingLinePoints[j].x;
    temp[1]=startingLinePoints[j].y;
    temp[2]=startingLinePoints[j].z;
    temp=m.mult(temp);
    if (fixUpAxis) {
      verts[j]=new Vector3f(temp[0],-temp[2],temp[1]);
    }
 else {
      verts[j]=new Vector3f(temp[0],temp[1],temp[2]);
    }
  }
  return verts;
}
