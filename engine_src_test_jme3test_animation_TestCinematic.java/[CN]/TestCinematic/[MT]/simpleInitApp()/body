{
  guiFont=assetManager.loadFont("Interface/Fonts/Default.fnt");
  final BitmapText text=new BitmapText(guiFont,false);
  text.setSize(guiFont.getCharSet().getRenderedSize());
  text.setText("Press enter to play/pause cinematic");
  text.setLocalTranslation((cam.getWidth() - text.getLineWidth()) / 2,cam.getHeight(),0);
  guiNode.attachChild(text);
  createScene();
  cinematic=new Cinematic(rootNode,20);
  cinematic.bindUi("Interface/Nifty/CinematicTest.xml");
  stateManager.attach(cinematic);
  createCameraMotion();
  cinematic.addCinematicEvent(0,new AbstractCinematicEvent(){
    @Override public void onPlay(){
      fade.setDuration(1f / cinematic.getSpeed());
      fade.setValue(0);
      fade.fadeIn();
    }
    @Override public void onUpdate(    float tpf){
    }
    @Override public void onStop(){
    }
    @Override public void onPause(){
    }
  }
);
  cinematic.addCinematicEvent(0,new PositionTrack(teapot,new Vector3f(10,0,10),0));
  cinematic.addCinematicEvent(0,new ScaleTrack(teapot,new Vector3f(1,1,1),0));
  Quaternion q=new Quaternion();
  q.loadIdentity();
  cinematic.addCinematicEvent(0,new RotationTrack(teapot,q,0));
  cinematic.addCinematicEvent(0,new PositionTrack(teapot,new Vector3f(10,0,-10),20));
  cinematic.addCinematicEvent(0,new ScaleTrack(teapot,new Vector3f(4,4,4),10));
  cinematic.addCinematicEvent(10,new ScaleTrack(teapot,new Vector3f(1,1,1),10));
  Quaternion rotation2=new Quaternion().fromAngleAxis(FastMath.PI,Vector3f.UNIT_Y);
  cinematic.addCinematicEvent(0,new RotationTrack(teapot,rotation2,20));
  cinematic.activateCamera(0,"aroundCam");
  cinematic.addCinematicEvent(0,cameraMotionTrack);
  cinematic.addCinematicEvent(0,new SoundTrack("Sound/Environment/Nature.ogg",LoopMode.Loop));
  cinematic.addCinematicEvent(3,new SoundTrack("Sound/Effects/kick.wav"));
  cinematic.addCinematicEvent(3,new SubtitleTrack("start",3,"jMonkey engine really kicks A..."));
  cinematic.addCinematicEvent(5.0f,new SoundTrack("Sound/Effects/Beep.ogg",1));
  cinematic.addCinematicEvent(6,new AnimationTrack(model,"Walk",LoopMode.Loop));
  cinematic.activateCamera(6,"topView");
  cinematic.activateCamera(10,"aroundCam");
  cinematic.addCinematicEvent(19,new AbstractCinematicEvent(){
    @Override public void onPlay(){
      fade.setDuration(1f / cinematic.getSpeed());
      fade.fadeOut();
    }
    @Override public void onUpdate(    float tpf){
    }
    @Override public void onStop(){
    }
    @Override public void onPause(){
    }
  }
);
  final NanoTimer myTimer=new NanoTimer();
  cinematic.addListener(new CinematicEventListener(){
    public void onPlay(    CinematicEvent cinematic){
      chaseCam.setEnabled(false);
      myTimer.reset();
      System.out.println("play");
    }
    public void onPause(    CinematicEvent cinematic){
      chaseCam.setEnabled(true);
      System.out.println("pause");
    }
    public void onStop(    CinematicEvent cinematic){
      chaseCam.setEnabled(true);
      fade.setValue(1);
      System.out.println("stop");
      System.out.println((float)myTimer.getTime() / (float)myTimer.getResolution());
    }
  }
);
  cinematic.setSpeed(2);
  flyCam.setEnabled(false);
  chaseCam=new ChaseCamera(cam,model,inputManager);
  initInputs();
}
