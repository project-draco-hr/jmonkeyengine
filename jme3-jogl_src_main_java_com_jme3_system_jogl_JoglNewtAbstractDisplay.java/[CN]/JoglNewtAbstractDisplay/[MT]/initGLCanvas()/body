{
  loadNatives();
  GLCapabilities caps=new GLCapabilities(GLProfile.getDefault());
  caps.setHardwareAccelerated(true);
  caps.setDoubleBuffered(true);
  caps.setStencilBits(settings.getStencilBits());
  caps.setDepthBits(settings.getDepthBits());
  if (settings.getSamples() > 1) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(settings.getSamples());
  }
  canvas=GLWindow.create(caps);
  canvas.invoke(false,new GLRunnable(){
    public boolean run(    GLAutoDrawable glad){
      canvas.getGL().setSwapInterval(settings.isVSync() ? 1 : 0);
      return true;
    }
  }
);
  canvas.requestFocus();
  canvas.setSize(settings.getWidth(),settings.getHeight());
  canvas.addGLEventListener(this);
  if (settings.getBoolean("GraphicsDebug")) {
    canvas.invoke(false,new GLRunnable(){
      public boolean run(      GLAutoDrawable glad){
        GL gl=glad.getGL();
        if (gl.isGLES()) {
          if (gl.isGLES1()) {
            glad.setGL(new DebugGLES1(gl.getGLES1()));
          }
 else {
            if (gl.isGLES2()) {
              glad.setGL(new DebugGLES2(gl.getGLES2()));
            }
 else {
              if (gl.isGLES3()) {
                glad.setGL(new DebugGLES3(gl.getGLES3()));
              }
            }
          }
        }
 else {
          if (gl.isGL4bc()) {
            glad.setGL(new DebugGL4bc(gl.getGL4bc()));
          }
 else {
            if (gl.isGL4()) {
              glad.setGL(new DebugGL4(gl.getGL4()));
            }
 else {
              if (gl.isGL3bc()) {
                glad.setGL(new DebugGL3bc(gl.getGL3bc()));
              }
 else {
                if (gl.isGL3()) {
                  glad.setGL(new DebugGL3(gl.getGL3()));
                }
 else {
                  if (gl.isGL2()) {
                    glad.setGL(new DebugGL2(gl.getGL2()));
                  }
                }
              }
            }
          }
        }
        return true;
      }
    }
);
  }
  renderer=new JoglRenderer();
  canvas.invoke(false,new GLRunnable(){
    public boolean run(    GLAutoDrawable glad){
      renderer.setMainFrameBufferSrgb(settings.getGammaCorrection());
      return true;
    }
  }
);
}
