{
  Savable[][] ret=defVal;
  try {
    Element tmpEl=findChildElement(currentElem,name);
    if (tmpEl == null) {
      return defVal;
    }
    int size_outer=Integer.parseInt(tmpEl.getAttribute("size_outer"));
    int size_inner=Integer.parseInt(tmpEl.getAttribute("size_outer"));
    Savable[][] tmp=new Savable[size_outer][size_inner];
    currentElem=findFirstChildElement(tmpEl);
    for (int i=0; i < size_outer; i++) {
      for (int j=0; j < size_inner; j++) {
        tmp[i][j]=(readSavableFromCurrentElem(null));
        if (i == size_outer - 1 && j == size_inner - 1) {
          break;
        }
        currentElem=findNextSiblingElement(currentElem);
      }
    }
    ret=tmp;
    currentElem=(Element)tmpEl.getParentNode();
    return ret;
  }
 catch (  IOException ioe) {
    throw ioe;
  }
catch (  Exception e) {
    IOException io=new IOException(e.toString());
    io.initCause(e);
    throw io;
  }
}
