{
  float xd, yd, zd, d, p[];
  DistanceFunc distanceFunc=distanceFunctions.get(Integer.valueOf(dtype));
  if (distanceFunc == null) {
    distanceFunc=distanceFunctions.get(Integer.valueOf(0));
  }
  int xi=(int)FastMath.floor(x);
  int yi=(int)FastMath.floor(y);
  int zi=(int)FastMath.floor(z);
  da[0]=da[1]=da[2]=da[3]=1e10f;
  for (int xx=xi - 1; xx <= xi + 1; ++xx) {
    for (int yy=yi - 1; yy <= yi + 1; ++yy) {
      for (int zz=zi - 1; zz <= zi + 1; ++zz) {
        p=AbstractNoiseFunc.hashPoint(xx,yy,zz);
        xd=x - (p[0] + xx);
        yd=y - (p[1] + yy);
        zd=z - (p[2] + zz);
        d=distanceFunc.execute(xd,yd,zd,me);
        if (d < da[0]) {
          da[3]=da[2];
          da[2]=da[1];
          da[1]=da[0];
          da[0]=d;
          pa[9]=pa[6];
          pa[10]=pa[7];
          pa[11]=pa[8];
          pa[6]=pa[3];
          pa[7]=pa[4];
          pa[8]=pa[5];
          pa[3]=pa[0];
          pa[4]=pa[1];
          pa[5]=pa[2];
          pa[0]=p[0] + xx;
          pa[1]=p[1] + yy;
          pa[2]=p[2] + zz;
        }
 else         if (d < da[1]) {
          da[3]=da[2];
          da[2]=da[1];
          da[1]=d;
          pa[9]=pa[6];
          pa[10]=pa[7];
          pa[11]=pa[8];
          pa[6]=pa[3];
          pa[7]=pa[4];
          pa[8]=pa[5];
          pa[3]=p[0] + xx;
          pa[4]=p[1] + yy;
          pa[5]=p[2] + zz;
        }
 else         if (d < da[2]) {
          da[3]=da[2];
          da[2]=d;
          pa[9]=pa[6];
          pa[10]=pa[7];
          pa[11]=pa[8];
          pa[6]=p[0] + xx;
          pa[7]=p[1] + yy;
          pa[8]=p[2] + zz;
        }
 else         if (d < da[3]) {
          da[3]=d;
          pa[9]=p[0] + xx;
          pa[10]=p[1] + yy;
          pa[11]=p[2] + zz;
        }
      }
    }
  }
}
