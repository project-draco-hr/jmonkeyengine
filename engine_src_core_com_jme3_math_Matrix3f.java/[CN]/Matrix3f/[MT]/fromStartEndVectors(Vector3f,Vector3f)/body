{
  Vector3f v=new Vector3f();
  float e, h, f;
  start.cross(end,v);
  e=start.dot(end);
  f=(e < 0) ? -e : e;
  if (f > 1.0f - FastMath.ZERO_TOLERANCE) {
    Vector3f u=new Vector3f();
    Vector3f x=new Vector3f();
    float c1, c2, c3;
    int i, j;
    x.x=(start.x > 0.0) ? start.x : -start.x;
    x.y=(start.y > 0.0) ? start.y : -start.y;
    x.z=(start.z > 0.0) ? start.z : -start.z;
    if (x.x < x.y) {
      if (x.x < x.z) {
        x.x=1.0f;
        x.y=x.z=0.0f;
      }
 else {
        x.z=1.0f;
        x.x=x.y=0.0f;
      }
    }
 else {
      if (x.y < x.z) {
        x.y=1.0f;
        x.x=x.z=0.0f;
      }
 else {
        x.z=1.0f;
        x.x=x.y=0.0f;
      }
    }
    u.x=x.x - start.x;
    u.y=x.y - start.y;
    u.z=x.z - start.z;
    v.x=x.x - end.x;
    v.y=x.y - end.y;
    v.z=x.z - end.z;
    c1=2.0f / u.dot(u);
    c2=2.0f / v.dot(v);
    c3=c1 * c2 * u.dot(v);
    for (i=0; i < 3; i++) {
      for (j=0; j < 3; j++) {
        float val=-c1 * u.get(i) * u.get(j) - c2 * v.get(i) * v.get(j) + c3 * v.get(i) * u.get(j);
        set(i,j,val);
      }
      float val=get(i,i);
      set(i,i,val + 1.0f);
    }
  }
 else {
    float hvx, hvz, hvxy, hvxz, hvyz;
    h=1.0f / (1.0f + e);
    hvx=h * v.x;
    hvz=h * v.z;
    hvxy=hvx * v.y;
    hvxz=hvx * v.z;
    hvyz=hvz * v.y;
    set(0,0,e + hvx * v.x);
    set(0,1,hvxy - v.z);
    set(0,2,hvxz + v.y);
    set(1,0,hvxy + v.z);
    set(1,1,e + h * v.y * v.y);
    set(1,2,hvyz - v.x);
    set(2,0,hvxz - v.y);
    set(2,1,hvyz + v.x);
    set(2,2,e + hvz * v.z);
  }
}
