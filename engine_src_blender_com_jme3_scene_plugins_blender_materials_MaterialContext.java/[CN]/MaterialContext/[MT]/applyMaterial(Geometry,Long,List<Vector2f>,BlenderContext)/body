{
  Material material=null;
  if (shadeless) {
    material=new Material(blenderContext.getAssetManager(),"Common/MatDefs/Misc/Unshaded.j3md");
    if (!transparent) {
      diffuseColor.a=1;
    }
    material.setColor("Color",diffuseColor);
  }
 else {
    material=new Material(blenderContext.getAssetManager(),"Common/MatDefs/Light/Lighting.j3md");
    material.setBoolean("UseMaterialColors",Boolean.TRUE);
    material.setBoolean("Minnaert",diffuseShader == DiffuseShader.MINNAERT);
    if (!transparent) {
      diffuseColor.a=1;
    }
    material.setColor("Diffuse",diffuseColor);
    material.setBoolean("WardIso",specularShader == SpecularShader.WARDISO);
    material.setColor("Specular",specularColor);
    material.setColor("Ambient",ambientColor);
    material.setFloat("Shininess",shininess);
  }
  for (  Entry<Number,CombinedTexture> entry : loadedTextures.entrySet()) {
    CombinedTexture combinedTexture=entry.getValue();
    combinedTexture.flatten(geometry,geometriesOMA,userDefinedUVCoordinates,blenderContext);
    VertexBuffer.Type uvCoordinatesType=null;
switch (entry.getKey().intValue()) {
case MTEX_COL:
      uvCoordinatesType=VertexBuffer.Type.TexCoord;
    material.setTexture(shadeless ? MaterialHelper.TEXTURE_TYPE_COLOR : MaterialHelper.TEXTURE_TYPE_DIFFUSE,combinedTexture.getResultTexture());
  break;
case MTEX_NOR:
uvCoordinatesType=VertexBuffer.Type.TexCoord2;
material.setTexture(MaterialHelper.TEXTURE_TYPE_NORMAL,combinedTexture.getResultTexture());
break;
case MTEX_SPEC:
uvCoordinatesType=VertexBuffer.Type.TexCoord3;
material.setTexture(MaterialHelper.TEXTURE_TYPE_SPECULAR,combinedTexture.getResultTexture());
break;
case MTEX_EMIT:
uvCoordinatesType=VertexBuffer.Type.TexCoord4;
material.setTexture(MaterialHelper.TEXTURE_TYPE_GLOW,combinedTexture.getResultTexture());
break;
case MTEX_ALPHA:
uvCoordinatesType=VertexBuffer.Type.TexCoord5;
material.setTexture(MaterialHelper.TEXTURE_TYPE_ALPHA,combinedTexture.getResultTexture());
break;
default :
LOGGER.severe("Unknown mapping type: " + entry.getKey().intValue());
}
if (uvCoordinatesType != null) {
VertexBuffer uvCoordsBuffer=new VertexBuffer(uvCoordinatesType);
uvCoordsBuffer.setupData(Usage.Static,2,Format.Float,BufferUtils.createFloatBuffer(combinedTexture.getResultUVS().toArray(new Vector2f[combinedTexture.getResultUVS().size()])));
geometry.getMesh().setBuffer(uvCoordsBuffer);
}
}
material.setName(name);
if (vertexColor) {
material.setBoolean(shadeless ? "VertexColor" : "UseVertexColor",true);
}
if (this.faceCullMode != null) {
material.getAdditionalRenderState().setFaceCullMode(faceCullMode);
}
 else {
material.getAdditionalRenderState().setFaceCullMode(blenderContext.getBlenderKey().getFaceCullMode());
}
if (transparent) {
material.setTransparent(true);
material.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);
geometry.setQueueBucket(Bucket.Transparent);
}
geometry.setMaterial(material);
}
