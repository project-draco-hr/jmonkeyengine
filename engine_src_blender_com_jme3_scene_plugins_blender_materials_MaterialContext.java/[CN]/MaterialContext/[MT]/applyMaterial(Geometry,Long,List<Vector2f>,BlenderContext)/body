{
  Material material=null;
  if (shadeless) {
    material=new Material(blenderContext.getAssetManager(),"Common/MatDefs/Misc/Unshaded.j3md");
    if (!transparent) {
      diffuseColor.a=1;
    }
    material.setColor("Color",diffuseColor);
  }
 else {
    material=new Material(blenderContext.getAssetManager(),"Common/MatDefs/Light/Lighting.j3md");
    material.setBoolean("UseMaterialColors",Boolean.TRUE);
    material.setBoolean("Minnaert",diffuseShader == DiffuseShader.MINNAERT);
    if (!transparent) {
      diffuseColor.a=1;
    }
    material.setColor("Diffuse",diffuseColor);
    material.setBoolean("WardIso",specularShader == SpecularShader.WARDISO);
    material.setColor("Specular",specularColor);
    material.setColor("Ambient",ambientColor);
    material.setFloat("Shininess",shininess);
  }
  if (loadedTextures != null && loadedTextures.size() > 0) {
    Entry<Number,CombinedTexture> basicUVSOwner=null;
    for (    Entry<Number,CombinedTexture> entry : loadedTextures.entrySet()) {
      CombinedTexture combinedTexture=entry.getValue();
      combinedTexture.flatten(geometry,geometriesOMA,userDefinedUVCoordinates,blenderContext);
      if (basicUVSOwner == null) {
        basicUVSOwner=entry;
      }
 else {
        combinedTexture.castToUVS(basicUVSOwner.getValue(),blenderContext);
        this.setTexture(material,entry.getKey().intValue(),combinedTexture.getResultTexture());
      }
    }
    if (basicUVSOwner != null) {
      this.setTexture(material,basicUVSOwner.getKey().intValue(),basicUVSOwner.getValue().getResultTexture());
      List<Vector2f> basicUVS=basicUVSOwner.getValue().getResultUVS();
      VertexBuffer uvCoordsBuffer=new VertexBuffer(VertexBuffer.Type.TexCoord);
      uvCoordsBuffer.setupData(Usage.Static,2,Format.Float,BufferUtils.createFloatBuffer(basicUVS.toArray(new Vector2f[basicUVS.size()])));
      geometry.getMesh().setBuffer(uvCoordsBuffer);
    }
  }
 else   if (userDefinedUVCoordinates != null && userDefinedUVCoordinates.size() > 0) {
    VertexBuffer uvCoordsBuffer=new VertexBuffer(VertexBuffer.Type.TexCoord);
    uvCoordsBuffer.setupData(Usage.Static,2,Format.Float,BufferUtils.createFloatBuffer(userDefinedUVCoordinates.toArray(new Vector2f[userDefinedUVCoordinates.size()])));
    geometry.getMesh().setBuffer(uvCoordsBuffer);
  }
  material.setName(name);
  if (vertexColor) {
    material.setBoolean(shadeless ? "VertexColor" : "UseVertexColor",true);
  }
  if (this.faceCullMode != null) {
    material.getAdditionalRenderState().setFaceCullMode(faceCullMode);
  }
 else {
    material.getAdditionalRenderState().setFaceCullMode(blenderContext.getBlenderKey().getFaceCullMode());
  }
  if (transparent) {
    material.setTransparent(true);
    material.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);
    geometry.setQueueBucket(Bucket.Transparent);
  }
  geometry.setMaterial(material);
}
