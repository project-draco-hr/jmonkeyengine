{
  name=structure.getName();
  int mode=((Number)structure.getFieldValue("mode")).intValue();
  shadeless=(mode & 0x4) != 0;
  vertexColor=(mode & 0x80) != 0;
  vTangent=(mode & 0x4000000) != 0;
  int diff_shader=((Number)structure.getFieldValue("diff_shader")).intValue();
  diffuseShader=DiffuseShader.values()[diff_shader];
  if (this.shadeless) {
    float r=((Number)structure.getFieldValue("r")).floatValue();
    float g=((Number)structure.getFieldValue("g")).floatValue();
    float b=((Number)structure.getFieldValue("b")).floatValue();
    float alpha=((Number)structure.getFieldValue("alpha")).floatValue();
    diffuseColor=new ColorRGBA(r,g,b,alpha);
    specularShader=null;
    specularColor=ambientColor=null;
    shininess=0.0f;
  }
 else {
    diffuseColor=this.readDiffuseColor(structure,diffuseShader);
    int spec_shader=((Number)structure.getFieldValue("spec_shader")).intValue();
    specularShader=SpecularShader.values()[spec_shader];
    specularColor=this.readSpecularColor(structure);
    float shininess=((Number)structure.getFieldValue("har")).floatValue();
    this.shininess=shininess > 0.0f ? shininess : MaterialHelper.DEFAULT_SHININESS;
    float r=((Number)structure.getFieldValue("ambr")).floatValue();
    float g=((Number)structure.getFieldValue("ambg")).floatValue();
    float b=((Number)structure.getFieldValue("ambb")).floatValue();
    float alpha=((Number)structure.getFieldValue("alpha")).floatValue();
    ambientColor=new ColorRGBA(r,g,b,alpha);
  }
  DynamicArray<Pointer> mtexsArray=(DynamicArray<Pointer>)structure.getFieldValue("mtex");
  int separatedTextures=((Number)structure.getFieldValue("septex")).intValue();
  List<TextureData> texturesList=new ArrayList<TextureData>();
  for (int i=0; i < mtexsArray.getTotalSize(); ++i) {
    Pointer p=mtexsArray.get(i);
    if (p.isNotNull() && (separatedTextures & 1 << i) == 0) {
      TextureData textureData=new TextureData();
      textureData.mtex=p.fetchData(blenderContext.getInputStream()).get(0);
      textureData.uvCoordinatesType=((Number)textureData.mtex.getFieldValue("texco")).intValue();
      textureData.projectionType=((Number)textureData.mtex.getFieldValue("mapping")).intValue();
      textureData.uvCoordinatesName=textureData.mtex.getFieldValue("uvName").toString();
      if (textureData.uvCoordinatesName != null && textureData.uvCoordinatesName.trim().length() == 0) {
        textureData.uvCoordinatesName=null;
      }
      Pointer pTex=(Pointer)textureData.mtex.getFieldValue("tex");
      if (pTex.isNotNull()) {
        Structure tex=pTex.fetchData(blenderContext.getInputStream()).get(0);
        textureData.textureStructure=tex;
        texturesList.add(textureData);
      }
    }
  }
  Map<Number,List<TextureData>> textureDataMap=this.sortAndFilterTextures(texturesList);
  loadedTextures=new HashMap<Number,CombinedTexture>();
  float[] diffuseColorArray=new float[]{diffuseColor.r,diffuseColor.g,diffuseColor.b,diffuseColor.a};
  TextureHelper textureHelper=blenderContext.getHelper(TextureHelper.class);
  for (  Entry<Number,List<TextureData>> entry : textureDataMap.entrySet()) {
    if (entry.getValue().size() > 0) {
      CombinedTexture combinedTexture=new CombinedTexture(entry.getKey().intValue());
      for (      TextureData textureData : entry.getValue()) {
        int texflag=((Number)textureData.mtex.getFieldValue("texflag")).intValue();
        boolean negateTexture=(texflag & 0x04) != 0;
        Texture texture=textureHelper.getTexture(textureData.textureStructure,textureData.mtex,blenderContext);
        if (texture != null) {
          int blendType=((Number)textureData.mtex.getFieldValue("blendtype")).intValue();
          float[] color=new float[]{((Number)textureData.mtex.getFieldValue("r")).floatValue(),((Number)textureData.mtex.getFieldValue("g")).floatValue(),((Number)textureData.mtex.getFieldValue("b")).floatValue()};
          float colfac=((Number)textureData.mtex.getFieldValue("colfac")).floatValue();
          TextureBlender textureBlender=TextureBlenderFactory.createTextureBlender(texture.getImage().getFormat(),texflag,negateTexture,blendType,diffuseColorArray,color,colfac);
          combinedTexture.add(texture,textureBlender,textureData.uvCoordinatesType,textureData.projectionType,textureData.textureStructure,textureData.uvCoordinatesName,blenderContext);
        }
      }
      if (combinedTexture.getTexturesCount() > 0) {
        loadedTextures.put(entry.getKey(),combinedTexture);
      }
    }
  }
  boolean transparent=false;
  if (diffuseColor != null) {
    transparent=diffuseColor.a < 1.0f;
    if (textureDataMap.size() > 0) {
      diffuseColor.set(1,1,1,1);
    }
  }
  if (specularColor != null) {
    transparent=transparent || specularColor.a < 1.0f;
  }
  if (ambientColor != null) {
    transparent=transparent || ambientColor.a < 1.0f;
  }
  this.transparent=transparent;
}
