{
  NativeLibrary library=nativeLibraryMap.get(new NativeLibrary.Key(name,platform));
  if (library == null) {
    return;
  }
  String pathInJar=library.getPathInNativesJar();
  if (pathInJar == null) {
    return;
  }
  String fileNameInJar;
  if (pathInJar.contains("/")) {
    fileNameInJar=pathInJar.substring(pathInJar.lastIndexOf("/") + 1);
  }
 else {
    fileNameInJar=pathInJar;
  }
  URL url=Thread.currentThread().getContextClassLoader().getResource(pathInJar);
  if (url == null) {
    url=Thread.currentThread().getContextClassLoader().getResource(fileNameInJar);
  }
  if (url == null) {
    return;
  }
  String loadedAsFileName;
  if (library.isJNI()) {
    String fileNameInJarWithoutExtension=fileNameInJar.substring(0,fileNameInJar.lastIndexOf("."));
    String systemJniExtension;
    String dummyLib=mapLibraryName_emulated("",platform);
    if (dummyLib.contains(".")) {
      systemJniExtension=dummyLib.substring(dummyLib.lastIndexOf("."));
    }
 else {
      systemJniExtension="";
    }
    loadedAsFileName=fileNameInJarWithoutExtension + systemJniExtension;
  }
 else {
    loadedAsFileName=fileNameInJar;
  }
  URLConnection conn=url.openConnection();
  InputStream in=conn.getInputStream();
  File targetFile=new File(targetDir,loadedAsFileName);
  OutputStream out=null;
  try {
    out=new FileOutputStream(targetFile);
    int len;
    while ((len=in.read(buf)) > 0) {
      out.write(buf,0,len);
    }
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ex) {
      }
    }
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}
