{
  if (!pressed) {
    setDefaultAxisMarkerColors();
    pickedPlane=null;
    offset=null;
    if (wasDragging) {
      actionPerformed(new MoveUndo(toolController.getSelectedSpatial(),startLoc,lastLoc));
      wasDragging=false;
    }
    return;
  }
  if (toolController.getSelectedSpatial() == null)   return;
  TempVars vars=TempVars.get();
  if (pickedPlane == null) {
    pickedPlane=pickAxisMarker(camera,screenCoord,axisPickType);
    if (pickedPlane == null)     return;
    startLoc=toolController.getSelectedSpatial().getLocalTranslation().clone();
    Quaternion rot=vars.quat1.set(toolController.getSelectedSpatial().getWorldRotation());
    if (pickedPlane.equals(new Vector3f(1,1,0)))     plane.setLocalRotation(rot.multLocal(XY));
 else     if (pickedPlane.equals(new Vector3f(1,0,1)))     plane.setLocalRotation(rot.multLocal(XZ));
 else     if (pickedPlane.equals(new Vector3f(0,1,1)))     plane.setLocalRotation(rot.multLocal(YZ));
    plane.setLocalTranslation(startLoc);
  }
  Vector3f planeHit=pickWorldLocation(camera,screenCoord,plane,null);
  if (planeHit == null) {
    vars.release();
    return;
  }
  Spatial selected=toolController.getSelectedSpatial();
  Spatial parent=selected.getParent();
  Vector3f newPos=vars.vect1;
  if (parent == null) {
    if (offset == null) {
      offset=planeHit.subtract(startLoc);
    }
    newPos.set(planeHit).subtractLocal(offset);
    lastLoc.set(newPos);
    selected.setLocalTranslation(newPos);
  }
 else {
    if (offset == null) {
      offset=planeHit.subtract(selected.getWorldTranslation());
    }
    newPos=planeHit.subtract(offset);
    newPos.subtractLocal(selected.getParent().getWorldTranslation());
    newPos=selected.getParent().getWorldRotation().inverse().normalizeLocal().multLocal(newPos);
    newPos.divideLocal(selected.getWorldScale());
    selected.setLocalTranslation(newPos);
    lastLoc.set(newPos);
  }
  vars.release();
  RigidBodyControl control=toolController.getSelectedSpatial().getControl(RigidBodyControl.class);
  if (control != null) {
    control.setPhysicsLocation(toolController.getSelectedSpatial().getWorldTranslation());
  }
  CharacterControl character=toolController.getSelectedSpatial().getControl(CharacterControl.class);
  if (character != null) {
    character.setPhysicsLocation(toolController.getSelectedSpatial().getWorldTranslation());
  }
  updateToolsTransformation();
  wasDragging=true;
}
