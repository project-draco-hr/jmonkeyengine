{
  initCrossHairs();
  initMaterial();
  bullet=new Sphere(32,32,1.0f,true,false);
  bullet.setTextureMode(TextureMode.Projected);
  bulletCollisionShape=new SphereCollisionShape(1.0f);
  cam.setLocation(new Vector3f(0.26924422f,6.646658f,22.265987f));
  cam.setRotation(new Quaternion(-2.302544E-4f,0.99302495f,-0.117888905f,-0.0019395084f));
  bulletAppState=new BulletAppState();
  bulletAppState.setEnabled(true);
  stateManager.attach(bulletAppState);
  bulletAppState.getPhysicsSpace().enableDebug(assetManager);
  PhysicsTestHelper.createPhysicsTestWorld(rootNode,assetManager,bulletAppState.getPhysicsSpace());
  setupLight();
  model=(Node)assetManager.loadModel("Models/Sinbad/Sinbad.mesh.xml");
  AnimControl control=model.getControl(AnimControl.class);
  SkeletonDebugger skeletonDebug=new SkeletonDebugger("skeleton",control.getSkeleton());
  Material mat2=new Material(assetManager,"Common/MatDefs/Misc/WireColor.j3md");
  mat2.setColor("Color",ColorRGBA.Green);
  mat2.getAdditionalRenderState().setDepthTest(false);
  skeletonDebug.setMaterial(mat2);
  skeletonDebug.setLocalTranslation(model.getLocalTranslation());
  ragdoll=new RagdollControl(0.5f);
  setupSinbad(ragdoll);
  ragdoll.addCollisionListener(this);
  model.addControl(ragdoll);
  float eighth_pi=FastMath.PI * 0.125f;
  ragdoll.setJointLimit("Waist",eighth_pi,eighth_pi,eighth_pi,eighth_pi,eighth_pi,eighth_pi);
  ragdoll.setJointLimit("Chest",eighth_pi,eighth_pi,0,0,eighth_pi,eighth_pi);
  getPhysicsSpace().add(ragdoll);
  speed=1.3f;
  rootNode.attachChild(model);
  flyCam.setMoveSpeed(50);
  animChannel=control.createChannel();
  animChannel.setAnim("Dance");
  control.addListener(this);
  inputManager.addListener(new ActionListener(){
    public void onAction(    String name,    boolean isPressed,    float tpf){
      if (name.equals("toggle") && isPressed) {
        Vector3f v=new Vector3f();
        v.set(model.getLocalTranslation());
        v.y=0;
        model.setLocalTranslation(v);
        Quaternion q=new Quaternion();
        float[] angles=new float[3];
        model.getLocalRotation().toAngles(angles);
        q.fromAngleAxis(angles[1],Vector3f.UNIT_Y);
        model.setLocalRotation(q);
        if (angles[0] < 0) {
          ragdoll.blendControlToAnim("StandUpBack",animChannel);
        }
 else {
          ragdoll.blendControlToAnim("StandUpFront",animChannel);
        }
      }
      if (name.equals("bullet+") && isPressed) {
        bulletSize+=0.1f;
      }
      if (name.equals("bullet-") && isPressed) {
        bulletSize-=0.1f;
      }
      if (name.equals("shoot") && isPressed) {
      }
      if (name.equals("stop") && isPressed) {
        bulletAppState.setEnabled(!bulletAppState.isEnabled());
      }
      if (name.equals("shoot") && !isPressed) {
        Geometry bulletg=new Geometry("bullet",bullet);
        bulletg.setMaterial(matBullet);
        bulletg.setLocalTranslation(cam.getLocation());
        bulletg.setLocalScale(bulletSize);
        bulletCollisionShape=new SphereCollisionShape(bulletSize);
        RigidBodyControl bulletNode=new RigidBodyControl(bulletCollisionShape,bulletSize * 10);
        bulletNode.setCcdMotionThreshold(0.001f);
        bulletNode.setLinearVelocity(cam.getDirection().mult(80));
        bulletg.addControl(bulletNode);
        rootNode.attachChild(bulletg);
        getPhysicsSpace().add(bulletNode);
      }
      if (name.equals("boom") && !isPressed) {
        Geometry bulletg=new Geometry("bullet",bullet);
        bulletg.setMaterial(matBullet);
        bulletg.setLocalTranslation(cam.getLocation());
        bulletg.setLocalScale(bulletSize);
        bulletCollisionShape=new SphereCollisionShape(bulletSize);
        BombControl bulletNode=new BombControl(assetManager,bulletCollisionShape,1);
        bulletNode.setForceFactor(10);
        bulletNode.setExplosionRadius(30);
        bulletNode.setCcdMotionThreshold(0.001f);
        bulletNode.setLinearVelocity(cam.getDirection().mult(180));
        bulletg.addControl(bulletNode);
        rootNode.attachChild(bulletg);
        getPhysicsSpace().add(bulletNode);
      }
    }
  }
,"toggle","shoot","stop","bullet+","bullet-","boom");
  inputManager.addMapping("toggle",new KeyTrigger(KeyInput.KEY_SPACE));
  inputManager.addMapping("shoot",new MouseButtonTrigger(MouseInput.BUTTON_LEFT));
  inputManager.addMapping("boom",new MouseButtonTrigger(MouseInput.BUTTON_RIGHT));
  inputManager.addMapping("stop",new KeyTrigger(KeyInput.KEY_H));
  inputManager.addMapping("bullet-",new KeyTrigger(KeyInput.KEY_COMMA));
  inputManager.addMapping("bullet+",new KeyTrigger(KeyInput.KEY_PERIOD));
}
