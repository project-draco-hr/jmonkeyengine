{
  Mesh m=new Mesh();
  m.setMode(Mode.Triangles);
  boolean hasTexCoord=false;
  boolean hasNormals=false;
  ArrayList<Face> newFaces=new ArrayList<Face>(faceList.size());
  for (int i=0; i < faceList.size(); i++) {
    Face f=faceList.get(i);
    for (    Vertex v : f.verticies) {
      findVertexIndex(v);
      if (!hasTexCoord && v.vt != null)       hasTexCoord=true;
      if (!hasNormals && v.vn != null)       hasNormals=true;
    }
    if (f.verticies.length == 4) {
      Face[] t=quadToTriangle(f);
      newFaces.add(t[0]);
      newFaces.add(t[1]);
    }
 else {
      newFaces.add(f);
    }
  }
  FloatBuffer posBuf=BufferUtils.createFloatBuffer(vertIndexMap.size() * 3);
  FloatBuffer normBuf=null;
  FloatBuffer tcBuf=null;
  if (hasNormals) {
    normBuf=BufferUtils.createFloatBuffer(vertIndexMap.size() * 3);
  }
  if (hasTexCoord) {
    tcBuf=BufferUtils.createFloatBuffer(vertIndexMap.size() * 2);
  }
  IndexBuffer indexBuf=null;
  if (vertIndexMap.size() >= 65536) {
    IntBuffer ib=BufferUtils.createIntBuffer(newFaces.size() * 3);
    m.setBuffer(VertexBuffer.Type.Index,3,ib);
    indexBuf=new IndexIntBuffer(ib);
  }
 else {
    ShortBuffer sb=BufferUtils.createShortBuffer(newFaces.size() * 3);
    m.setBuffer(VertexBuffer.Type.Index,3,sb);
    indexBuf=new IndexShortBuffer(sb);
  }
  int numFaces=newFaces.size();
  for (int i=0; i < numFaces; i++) {
    Face f=newFaces.get(i);
    if (f.verticies.length != 3)     continue;
    Vertex v0=f.verticies[0];
    Vertex v1=f.verticies[1];
    Vertex v2=f.verticies[2];
    posBuf.position(v0.index * 3);
    posBuf.put(v0.v.x).put(v0.v.y).put(v0.v.z);
    posBuf.position(v1.index * 3);
    posBuf.put(v1.v.x).put(v1.v.y).put(v1.v.z);
    posBuf.position(v2.index * 3);
    posBuf.put(v2.v.x).put(v2.v.y).put(v2.v.z);
    if (normBuf != null) {
      if (v0.vn != null) {
        normBuf.position(v0.index * 3);
        normBuf.put(v0.vn.x).put(v0.vn.y).put(v0.vn.z);
        normBuf.position(v1.index * 3);
        normBuf.put(v1.vn.x).put(v1.vn.y).put(v1.vn.z);
        normBuf.position(v2.index * 3);
        normBuf.put(v2.vn.x).put(v2.vn.y).put(v2.vn.z);
      }
    }
    if (tcBuf != null) {
      if (v0.vt != null) {
        tcBuf.position(v0.index * 2);
        tcBuf.put(v0.vt.x).put(v0.vt.y);
        tcBuf.position(v1.index * 2);
        tcBuf.put(v1.vt.x).put(v1.vt.y);
        tcBuf.position(v2.index * 2);
        tcBuf.put(v2.vt.x).put(v2.vt.y);
      }
    }
    int index=i * 3;
    indexBuf.put(index,v0.index);
    indexBuf.put(index + 1,v1.index);
    indexBuf.put(index + 2,v2.index);
  }
  m.setBuffer(VertexBuffer.Type.Position,3,posBuf);
  m.setBuffer(VertexBuffer.Type.Normal,3,normBuf);
  m.setBuffer(VertexBuffer.Type.TexCoord,2,tcBuf);
  m.setStatic();
  m.updateBound();
  m.updateCounts();
  vertIndexMap.clear();
  indexVertMap.clear();
  curIndex=0;
  return m;
}
