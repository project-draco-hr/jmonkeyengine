{
  if (!initFailed) {
    try {
      super.initialize();
      thread=Thread.currentThread();
      fakeApp.setAudioRenderer(audioRenderer);
      fakeApp.startFakeApp();
{
        overlayView=getRenderManager().createMainView("Overlay",cam);
        overlayView.setClearFlags(false,true,false);
        guiViewPort.setClearFlags(false,false,false);
      }
      ColorRGBA color=new ColorRGBA();
      color.setAsSrgb(0.25f,0.25f,0.25f,1.0f);
      viewPort.setBackgroundColor(color);
      camController=new SceneCameraController(cam,inputManager);
      previewProcessor=new ScenePreviewProcessor();
      previewProcessor.setupPreviewView();
      camLight=new PointLight();
      camLight.setColor(ColorRGBA.White);
      guiNode.setQueueBucket(Bucket.Gui);
      guiNode.setCullHint(CullHint.Never);
      loadFPSText();
      loadStatsView();
      viewPort.attachScene(rootNode);
      viewPort.attachScene(toolsNode);
      guiViewPort.attachScene(guiNode);
      cam.setLocation(new Vector3f(0,0,10));
      wireProcessor=new WireProcessor(assetManager);
      inputManager.addMapping("MouseAxisX",new MouseAxisTrigger(MouseInput.AXIS_X,false));
      inputManager.addMapping("MouseAxisY",new MouseAxisTrigger(MouseInput.AXIS_Y,false));
      inputManager.addMapping("MouseAxisX-",new MouseAxisTrigger(MouseInput.AXIS_X,true));
      inputManager.addMapping("MouseAxisY-",new MouseAxisTrigger(MouseInput.AXIS_Y,true));
      inputManager.addMapping("MouseWheel",new MouseAxisTrigger(MouseInput.AXIS_WHEEL,false));
      inputManager.addMapping("MouseWheel-",new MouseAxisTrigger(MouseInput.AXIS_WHEEL,true));
      inputManager.addMapping("MouseButtonLeft",new MouseButtonTrigger(0));
      inputManager.addMapping("MouseButtonMiddle",new MouseButtonTrigger(2));
      inputManager.addMapping("MouseButtonRight",new MouseButtonTrigger(1));
      started=true;
    }
 catch (    Throwable e) {
      showStartupErrorMessage(e);
      initFailed=true;
      if (fakeApp != null) {
        fakeApp.stopFakeApp();
      }
    }
 finally {
    }
  }
}
