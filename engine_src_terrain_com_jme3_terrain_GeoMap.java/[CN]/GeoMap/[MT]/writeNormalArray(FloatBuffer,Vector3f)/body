{
  if (store != null) {
    if (store.remaining() < getWidth() * getHeight() * 3)     throw new BufferUnderflowException();
  }
 else {
    store=BufferUtils.createFloatBuffer(getWidth() * getHeight() * 3);
  }
  store.rewind();
  Vector3f oppositePoint=new Vector3f();
  Vector3f adjacentPoint=new Vector3f();
  Vector3f rootPoint=new Vector3f();
  Vector3f tempNorm=new Vector3f();
  int normalIndex=0;
  for (int y=0; y < getHeight(); y++) {
    for (int x=0; x < getWidth(); x++) {
      rootPoint.set(x,getValue(x,y),y);
      if (y == getHeight() - 1) {
        if (x == getWidth() - 1) {
          adjacentPoint.set(x,getValue(x,y - 1),y - 1);
          oppositePoint.set(x - 1,getValue(x - 1,y),y);
        }
 else {
          adjacentPoint.set(x + 1,getValue(x + 1,y),y);
          oppositePoint.set(x,getValue(x,y - 1),y - 1);
        }
      }
 else {
        if (x == getWidth() - 1) {
          adjacentPoint.set(x - 1,getValue(x - 1,y),y);
          oppositePoint.set(x,getValue(x,y + 1),y + 1);
        }
 else {
          adjacentPoint.set(x,getValue(x,y + 1),y + 1);
          oppositePoint.set(x + 1,getValue(x + 1,y),y);
        }
      }
      tempNorm.set(adjacentPoint).subtractLocal(rootPoint).crossLocal(oppositePoint.subtractLocal(rootPoint));
      tempNorm.multLocal(scale).normalizeLocal();
      BufferUtils.setInBuffer(tempNorm,store,normalIndex);
      normalIndex++;
    }
  }
  return store;
}
