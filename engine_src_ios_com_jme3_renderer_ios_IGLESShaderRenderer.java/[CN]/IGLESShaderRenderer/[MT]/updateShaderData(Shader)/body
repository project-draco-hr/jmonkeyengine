{
  int id=shader.getId();
  boolean needRegister=false;
  if (id == -1) {
    id=JmeIosGLES.glCreateProgram();
    JmeIosGLES.checkGLError();
    if (id <= 0) {
      throw new RendererException("Invalid ID received when trying to create shader program.");
    }
    shader.setId(id);
    needRegister=true;
  }
  for (  ShaderSource source : shader.getSources()) {
    if (source.isUpdateNeeded()) {
      updateShaderSourceData(source);
    }
    JmeIosGLES.glAttachShader(id,source.getId());
    JmeIosGLES.checkGLError();
  }
  JmeIosGLES.glLinkProgram(id);
  JmeIosGLES.checkGLError();
  JmeIosGLES.glGetProgramiv(id,JmeIosGLES.GL_LINK_STATUS,intBuf1,0);
  JmeIosGLES.checkGLError();
  boolean linkOK=intBuf1[0] == JmeIosGLES.GL_TRUE;
  String infoLog=null;
  if (VALIDATE_SHADER || !linkOK) {
    JmeIosGLES.glGetProgramiv(id,JmeIosGLES.GL_INFO_LOG_LENGTH,intBuf1,0);
    JmeIosGLES.checkGLError();
    int length=intBuf1[0];
    if (length > 3) {
      infoLog=JmeIosGLES.glGetProgramInfoLog(id);
      JmeIosGLES.checkGLError();
    }
  }
  if (linkOK) {
    if (infoLog != null) {
      logger.log(Level.FINE,"shader link success. \n{0}",infoLog);
    }
 else {
      logger.fine("shader link success");
    }
    shader.clearUpdateNeeded();
    if (needRegister) {
      objManager.registerObject(shader);
      statistics.onNewShader();
    }
 else {
      resetUniformLocations(shader);
    }
  }
 else {
    if (infoLog != null) {
      throw new RendererException("Shader link failure, shader:" + shader + " info:"+ infoLog);
    }
 else {
      throw new RendererException("Shader link failure, shader:" + shader + " info: <not provided>");
    }
  }
}
