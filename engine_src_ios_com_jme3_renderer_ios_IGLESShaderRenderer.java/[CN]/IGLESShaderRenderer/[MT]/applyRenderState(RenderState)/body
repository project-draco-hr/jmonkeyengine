{
  logger.log(Level.FINE,"IGLESShaderRenderer applyRenderState");
  if (state.isDepthTest() && !context.depthTestEnabled) {
    JmeIosGLES.glEnable(JmeIosGLES.GL_DEPTH_TEST);
    JmeIosGLES.glDepthFunc(convertTestFunction(context.depthFunc));
    JmeIosGLES.checkGLError();
    context.depthTestEnabled=true;
  }
 else   if (!state.isDepthTest() && context.depthTestEnabled) {
    JmeIosGLES.glDisable(JmeIosGLES.GL_DEPTH_TEST);
    JmeIosGLES.checkGLError();
    context.depthTestEnabled=false;
  }
  if (state.getDepthFunc() != context.depthFunc) {
    JmeIosGLES.glDepthFunc(convertTestFunction(state.getDepthFunc()));
    context.depthFunc=state.getDepthFunc();
  }
  if (state.isDepthWrite() && !context.depthWriteEnabled) {
    JmeIosGLES.glDepthMask(true);
    JmeIosGLES.checkGLError();
    context.depthWriteEnabled=true;
  }
 else   if (!state.isDepthWrite() && context.depthWriteEnabled) {
    JmeIosGLES.glDepthMask(false);
    JmeIosGLES.checkGLError();
    context.depthWriteEnabled=false;
  }
  if (state.isColorWrite() && !context.colorWriteEnabled) {
    JmeIosGLES.glColorMask(true,true,true,true);
    JmeIosGLES.checkGLError();
    context.colorWriteEnabled=true;
  }
 else   if (!state.isColorWrite() && context.colorWriteEnabled) {
    JmeIosGLES.glColorMask(false,false,false,false);
    JmeIosGLES.checkGLError();
    context.colorWriteEnabled=false;
  }
  if (state.isPolyOffset()) {
    if (!context.polyOffsetEnabled) {
      JmeIosGLES.glEnable(JmeIosGLES.GL_POLYGON_OFFSET_FILL);
      JmeIosGLES.glPolygonOffset(state.getPolyOffsetFactor(),state.getPolyOffsetUnits());
      JmeIosGLES.checkGLError();
      context.polyOffsetEnabled=true;
      context.polyOffsetFactor=state.getPolyOffsetFactor();
      context.polyOffsetUnits=state.getPolyOffsetUnits();
    }
 else {
      if (state.getPolyOffsetFactor() != context.polyOffsetFactor || state.getPolyOffsetUnits() != context.polyOffsetUnits) {
        JmeIosGLES.glPolygonOffset(state.getPolyOffsetFactor(),state.getPolyOffsetUnits());
        JmeIosGLES.checkGLError();
        context.polyOffsetFactor=state.getPolyOffsetFactor();
        context.polyOffsetUnits=state.getPolyOffsetUnits();
      }
    }
  }
 else {
    if (context.polyOffsetEnabled) {
      JmeIosGLES.glDisable(JmeIosGLES.GL_POLYGON_OFFSET_FILL);
      JmeIosGLES.checkGLError();
      context.polyOffsetEnabled=false;
      context.polyOffsetFactor=0;
      context.polyOffsetUnits=0;
    }
  }
  if (state.getFaceCullMode() != context.cullMode) {
    if (state.getFaceCullMode() == RenderState.FaceCullMode.Off) {
      JmeIosGLES.glDisable(JmeIosGLES.GL_CULL_FACE);
      JmeIosGLES.checkGLError();
    }
 else {
      JmeIosGLES.glEnable(JmeIosGLES.GL_CULL_FACE);
      JmeIosGLES.checkGLError();
    }
switch (state.getFaceCullMode()) {
case Off:
      break;
case Back:
    JmeIosGLES.glCullFace(JmeIosGLES.GL_BACK);
  JmeIosGLES.checkGLError();
break;
case Front:
JmeIosGLES.glCullFace(JmeIosGLES.GL_FRONT);
JmeIosGLES.checkGLError();
break;
case FrontAndBack:
JmeIosGLES.glCullFace(JmeIosGLES.GL_FRONT_AND_BACK);
JmeIosGLES.checkGLError();
break;
default :
throw new UnsupportedOperationException("Unrecognized face cull mode: " + state.getFaceCullMode());
}
context.cullMode=state.getFaceCullMode();
}
if (state.getBlendMode() != context.blendMode) {
if (state.getBlendMode() == RenderState.BlendMode.Off) {
JmeIosGLES.glDisable(JmeIosGLES.GL_BLEND);
JmeIosGLES.checkGLError();
}
 else {
JmeIosGLES.glEnable(JmeIosGLES.GL_BLEND);
switch (state.getBlendMode()) {
case Off:
break;
case Additive:
JmeIosGLES.glBlendFunc(JmeIosGLES.GL_ONE,JmeIosGLES.GL_ONE);
break;
case AlphaAdditive:
JmeIosGLES.glBlendFunc(JmeIosGLES.GL_SRC_ALPHA,JmeIosGLES.GL_ONE);
break;
case Color:
JmeIosGLES.glBlendFunc(JmeIosGLES.GL_ONE,JmeIosGLES.GL_ONE_MINUS_SRC_COLOR);
break;
case Alpha:
JmeIosGLES.glBlendFunc(JmeIosGLES.GL_SRC_ALPHA,JmeIosGLES.GL_ONE_MINUS_SRC_ALPHA);
break;
case PremultAlpha:
JmeIosGLES.glBlendFunc(JmeIosGLES.GL_ONE,JmeIosGLES.GL_ONE_MINUS_SRC_ALPHA);
break;
case Modulate:
JmeIosGLES.glBlendFunc(JmeIosGLES.GL_DST_COLOR,JmeIosGLES.GL_ZERO);
break;
case ModulateX2:
JmeIosGLES.glBlendFunc(JmeIosGLES.GL_DST_COLOR,JmeIosGLES.GL_SRC_COLOR);
break;
default :
throw new UnsupportedOperationException("Unrecognized blend mode: " + state.getBlendMode());
}
JmeIosGLES.checkGLError();
}
context.blendMode=state.getBlendMode();
}
}
