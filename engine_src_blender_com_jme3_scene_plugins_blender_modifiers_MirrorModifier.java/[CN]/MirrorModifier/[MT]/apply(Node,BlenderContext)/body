{
  if (invalid) {
    LOGGER.log(Level.WARNING,"Mirror modifier is invalid! Cannot be applied to: {0}",node.getName());
  }
 else {
    Vector3f mirrorPlaneCenter=new Vector3f();
    if (pMirrorObject.isNotNull()) {
      Structure objectStructure;
      try {
        objectStructure=pMirrorObject.fetchData(blenderContext.getInputStream()).get(0);
        ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
        Node object=(Node)objectHelper.toObject(objectStructure,blenderContext);
        if (object != null) {
          mirrorPlaneCenter=this.getWorldMatrix(node).invertLocal().mult(object.getWorldTranslation());
        }
      }
 catch (      BlenderFileException e) {
        LOGGER.log(Level.SEVERE,"Cannot load mirror''s reference object. Cause: {0}",e.getLocalizedMessage());
        LOGGER.log(Level.SEVERE,"Mirror modifier will not be applied to node named: {0}",node.getName());
        return;
      }
    }
    LOGGER.finest("Allocating temporal variables.");
    float d;
    Vector3f mirrorPlaneNormal=new Vector3f();
    Vector3f shiftVector=new Vector3f();
    Vector3f point=new Vector3f();
    Vector3f normal=new Vector3f();
    Set<Integer> modifiedIndexes=new HashSet<Integer>();
    List<Geometry> geometriesToAdd=new ArrayList<Geometry>();
    final char[] mirrorNames=new char[]{'X','Y','Z'};
    LOGGER.fine("Mirroring mesh.");
    for (int mirrorIndex=0; mirrorIndex < 3; ++mirrorIndex) {
      if (isMirrored[mirrorIndex]) {
        boolean mirrorAtPoint0=mirrorPlaneCenter.get(mirrorIndex) == 0;
        if (!mirrorAtPoint0) {
          mirrorPlaneNormal.set(0,0,0).set(mirrorIndex,Math.signum(mirrorPlaneCenter.get(mirrorIndex)));
        }
        for (        Spatial spatial : node.getChildren()) {
          if (spatial instanceof Geometry) {
            Mesh mesh=((Geometry)spatial).getMesh();
            Mesh clone=mesh.deepClone();
            LOGGER.log(Level.FINEST,"Fetching buffers of cloned spatial: {0}",spatial.getName());
            FloatBuffer position=mesh.getFloatBuffer(Type.Position);
            FloatBuffer bindPosePosition=mesh.getFloatBuffer(Type.BindPosePosition);
            FloatBuffer clonePosition=clone.getFloatBuffer(Type.Position);
            FloatBuffer cloneBindPosePosition=clone.getFloatBuffer(Type.BindPosePosition);
            FloatBuffer cloneNormals=clone.getFloatBuffer(Type.Normal);
            FloatBuffer cloneBindPoseNormals=clone.getFloatBuffer(Type.BindPoseNormal);
            Buffer cloneIndexes=clone.getBuffer(Type.Index).getData();
            for (int i=0; i < cloneIndexes.limit(); ++i) {
              int index=cloneIndexes instanceof ShortBuffer ? ((ShortBuffer)cloneIndexes).get(i) : ((IntBuffer)cloneIndexes).get(i);
              if (!modifiedIndexes.contains(index)) {
                modifiedIndexes.add(index);
                this.get(clonePosition,index,point);
                if (mirrorAtPoint0) {
                  d=Math.abs(point.get(mirrorIndex));
                  shiftVector.set(0,0,0).set(mirrorIndex,-point.get(mirrorIndex));
                }
 else {
                  d=this.computeDistanceFromPlane(point,mirrorPlaneCenter,mirrorPlaneNormal);
                  mirrorPlaneNormal.mult(d,shiftVector);
                }
                if (merge && d <= tolerance) {
                  point.addLocal(shiftVector);
                  this.set(index,point,clonePosition,cloneBindPosePosition,position,bindPosePosition);
                  if (cloneNormals != null) {
                    this.get(cloneNormals,index,normal);
                    normal.set(mirrorIndex,0);
                    this.set(index,normal,cloneNormals,cloneBindPoseNormals);
                  }
                }
 else {
                  point.addLocal(shiftVector.multLocal(2));
                  this.set(index,point,clonePosition,cloneBindPosePosition);
                  if (cloneNormals != null) {
                    this.get(cloneNormals,index,normal);
                    normal.set(mirrorIndex,-normal.get(mirrorIndex));
                    this.set(index,normal,cloneNormals,cloneBindPoseNormals);
                  }
                }
              }
            }
            modifiedIndexes.clear();
            LOGGER.finer("Flipping index order.");
switch (mesh.getMode()) {
case Points:
              cloneIndexes.flip();
            break;
case Lines:
          for (int i=0; i < cloneIndexes.limit(); i+=2) {
            if (cloneIndexes instanceof ShortBuffer) {
              short index=((ShortBuffer)cloneIndexes).get(i + 1);
              ((ShortBuffer)cloneIndexes).put(i + 1,((ShortBuffer)cloneIndexes).get(i));
              ((ShortBuffer)cloneIndexes).put(i,index);
            }
 else {
              int index=((IntBuffer)cloneIndexes).get(i + 1);
              ((IntBuffer)cloneIndexes).put(i + 1,((IntBuffer)cloneIndexes).get(i));
              ((IntBuffer)cloneIndexes).put(i,index);
            }
          }
        break;
case Triangles:
      for (int i=0; i < cloneIndexes.limit(); i+=3) {
        if (cloneIndexes instanceof ShortBuffer) {
          short index=((ShortBuffer)cloneIndexes).get(i + 2);
          ((ShortBuffer)cloneIndexes).put(i + 2,((ShortBuffer)cloneIndexes).get(i + 1));
          ((ShortBuffer)cloneIndexes).put(i + 1,index);
        }
 else {
          int index=((IntBuffer)cloneIndexes).get(i + 2);
          ((IntBuffer)cloneIndexes).put(i + 2,((IntBuffer)cloneIndexes).get(i + 1));
          ((IntBuffer)cloneIndexes).put(i + 1,index);
        }
      }
    break;
default :
  throw new IllegalStateException("Invalid mesh mode: " + mesh.getMode());
}
if (mirrorU && clone.getBuffer(Type.TexCoord) != null) {
LOGGER.finer("Mirroring U coordinates.");
FloatBuffer cloneUVs=(FloatBuffer)clone.getBuffer(Type.TexCoord).getData();
for (int i=0; i < cloneUVs.limit(); i+=2) {
  cloneUVs.put(i,1.0f - cloneUVs.get(i));
}
}
if (mirrorV && clone.getBuffer(Type.TexCoord) != null) {
LOGGER.finer("Mirroring V coordinates.");
FloatBuffer cloneUVs=(FloatBuffer)clone.getBuffer(Type.TexCoord).getData();
for (int i=1; i < cloneUVs.limit(); i+=2) {
  cloneUVs.put(i,1.0f - cloneUVs.get(i));
}
}
Geometry geometry=new Geometry(spatial.getName() + " - mirror " + mirrorNames[mirrorIndex],clone);
geometry.setMaterial(((Geometry)spatial).getMaterial());
geometriesToAdd.add(geometry);
}
}
LOGGER.log(Level.FINE,"Adding {0} geometries to current node.",geometriesToAdd.size());
for (Geometry geometry : geometriesToAdd) {
node.attachChild(geometry);
}
geometriesToAdd.clear();
}
}
}
}
