{
  viewPort.setBackgroundColor(ColorRGBA.DarkGray);
  frustumCam=cam.clone();
  frustumCam.setFrustumFar(25);
  Vector3f[] points=new Vector3f[8];
  for (int i=0; i < 8; i++) {
    points[i]=new Vector3f();
  }
  ShadowUtil.updateFrustumPoints2(frustumCam,points);
  WireFrustum frustumShape=new WireFrustum(points);
  Geometry frustum=new Geometry("frustum",frustumShape);
  frustum.setMaterial(new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md"));
  rootNode.attachChild(frustum);
  rootNode.addLight(new DirectionalLight());
  AmbientLight al=new AmbientLight();
  al.setColor(ColorRGBA.White.mult(0.2f));
  rootNode.addLight(al);
  Grid grid=new Grid(50,50,5);
  Geometry gridGeom=new Geometry("grid",grid);
  gridGeom.setMaterial(new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md"));
  gridGeom.getMaterial().setColor("Color",ColorRGBA.Gray);
  rootNode.attachChild(gridGeom);
  gridGeom.setLocalTranslation(-125,-25,-125);
  spotLight=new SpotLight();
  spotLight.setSpotRange(25);
  spotLight.setSpotOuterAngle(10 * FastMath.DEG_TO_RAD);
  float radius=FastMath.tan(spotLight.getSpotOuterAngle()) * spotLight.getSpotRange();
  Cylinder cylinder=new Cylinder(5,16,0,radius,spotLight.getSpotRange(),true,false);
  geom=new Geometry("light",cylinder);
  geom.setMaterial(new Material(assetManager,"Common/MatDefs/Light/Lighting.j3md"));
  geom.getMaterial().setColor("Diffuse",ColorRGBA.White);
  geom.getMaterial().setColor("Ambient",ColorRGBA.DarkGray);
  geom.getMaterial().setBoolean("UseMaterialColors",true);
  final LightNode ln=new LightNode("lb",spotLight);
  ln.attachChild(geom);
  geom.setLocalTranslation(0,-spotLight.getSpotRange() / 2f,0);
  geom.rotate(-FastMath.HALF_PI,0,0);
  rootNode.attachChild(ln);
  inputManager.addMapping("click",new MouseButtonTrigger(MouseInput.BUTTON_RIGHT));
  inputManager.addMapping("shift",new KeyTrigger(KeyInput.KEY_LSHIFT),new KeyTrigger(KeyInput.KEY_RSHIFT));
  inputManager.addMapping("middleClick",new MouseButtonTrigger(MouseInput.BUTTON_MIDDLE));
  inputManager.addMapping("up",new MouseAxisTrigger(MouseInput.AXIS_Y,false));
  inputManager.addMapping("down",new MouseAxisTrigger(MouseInput.AXIS_Y,true));
  inputManager.addMapping("left",new MouseAxisTrigger(MouseInput.AXIS_X,true));
  inputManager.addMapping("right",new MouseAxisTrigger(MouseInput.AXIS_X,false));
  final Node camTarget=new Node("CamTarget");
  rootNode.attachChild(camTarget);
  ChaseCameraAppState chaser=new ChaseCameraAppState();
  chaser.setTarget(camTarget);
  chaser.setMaxDistance(150);
  chaser.setDefaultDistance(70);
  chaser.setDefaultHorizontalRotation(FastMath.HALF_PI);
  chaser.setMinVerticalRotation(-FastMath.PI);
  chaser.setMaxVerticalRotation(FastMath.PI * 2);
  chaser.setToggleRotationTrigger(new MouseButtonTrigger(MouseInput.BUTTON_LEFT));
  stateManager.attach(chaser);
  flyCam.setEnabled(false);
  inputManager.addListener(new AnalogListener(){
    public void onAnalog(    String name,    float value,    float tpf){
      Spatial s=null;
      float mult=1;
      if (moving) {
        s=ln;
      }
      if (panning) {
        s=camTarget;
        mult=-1;
      }
      if ((moving || panning) && s != null) {
        if (shift) {
          if (name.equals("left")) {
            tmp.set(cam.getDirection());
            s.rotate(tmpQuat.fromAngleAxis(value,tmp));
          }
          if (name.equals("right")) {
            tmp.set(cam.getDirection());
            s.rotate(tmpQuat.fromAngleAxis(-value,tmp));
          }
        }
 else {
          value*=MOVE_SPEED * mult;
          if (name.equals("up")) {
            tmp.set(cam.getUp()).multLocal(value);
            s.move(tmp);
          }
          if (name.equals("down")) {
            tmp.set(cam.getUp()).multLocal(-value);
            s.move(tmp);
          }
          if (name.equals("left")) {
            tmp.set(cam.getLeft()).multLocal(value);
            s.move(tmp);
          }
          if (name.equals("right")) {
            tmp.set(cam.getLeft()).multLocal(-value);
            s.move(tmp);
          }
        }
      }
    }
  }
,"up","down","left","right");
  inputManager.addListener(new ActionListener(){
    public void onAction(    String name,    boolean isPressed,    float tpf){
      if (name.equals("click")) {
        if (isPressed) {
          moving=true;
        }
 else {
          moving=false;
        }
      }
      if (name.equals("middleClick")) {
        if (isPressed) {
          panning=true;
        }
 else {
          panning=false;
        }
      }
      if (name.equals("shift")) {
        if (isPressed) {
          shift=true;
        }
 else {
          shift=false;
        }
      }
    }
  }
,"click","middleClick","shift");
  Box boxMesh=new Box(1f,1f,1f);
  boxGeo=new Geometry("A Textured Box",boxMesh);
  Material boxMat=new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md");
  Texture monkeyTex=assetManager.loadTexture("Interface/Logo/Monkey.jpg");
  boxMat.setTexture("ColorMap",monkeyTex);
  boxGeo.setMaterial(boxMat);
  System.err.println("light " + spotLight.getPosition());
}
