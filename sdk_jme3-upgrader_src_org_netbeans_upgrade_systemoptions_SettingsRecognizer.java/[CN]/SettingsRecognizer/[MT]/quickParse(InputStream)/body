{
  Set<String> iofs=new HashSet<String>();
  if (!expect(is,MODULE_SETTINGS_INTRO)) {
    err.log("Could not read intro " + source);
    return null;
  }
  version=readTo(is,'"');
  if (version == null) {
    err.log("Could not read version " + source);
    return null;
  }
  if (!expect(is,MODULE_SETTINGS_INTRO_END)) {
    err.log("Could not read stuff after cnb " + source);
    return null;
  }
  int c;
  PARSE:   while (true) {
    c=is.read();
switch (c) {
case 'm':
      if (!expect(is,MODULE_SETTINGS_MODULE_NAME)) {
        err.log("Could not read up to <module name=\" " + source);
        return null;
      }
    String codeName=readTo(is,'"');
  if (codeName == null) {
    err.log("Could not read module name value " + source);
    return null;
  }
codeName=codeName.intern();
resolveModuleElm(codeName);
c=is.read();
if (c == '/') {
if (!expect(is,MODULE_SETTINGS_TAG_END)) {
err.log("Could not read up to end of module tag " + source);
return null;
}
break;
}
 else if (c != ' ') {
err.log("Could not space after module name " + source);
return null;
}
if (!expect(is,MODULE_SETTINGS_MODULE_SPEC)) {
err.log("Could not read up to spec=\" " + source);
return null;
}
String mspec=readTo(is,'"');
if (mspec == null) {
err.log("Could not read module spec value " + source);
return null;
}
try {
}
 catch (NumberFormatException nfe) {
return null;
}
c=is.read();
if (c == '/') {
if (!expect(is,MODULE_SETTINGS_TAG_END)) {
err.log("Could not read up to end of <module name spec/> tag " + source);
return null;
}
break;
}
 else if (c != ' ') {
err.log("Could not read space after module name " + source);
return null;
}
if (!expect(is,MODULE_SETTINGS_MODULE_IMPL)) {
err.log("Could not read up to impl=\" " + source);
return null;
}
moduleImpl=readTo(is,'"');
if (moduleImpl == null) {
err.log("Could not read module impl value " + source);
return null;
}
moduleImpl=moduleImpl.intern();
if (!expect(is,MODULE_SETTINGS_TAG_END)) {
err.log("Could not read up to /> < " + source);
return null;
}
break;
case 'i':
if (!expect(is,MODULE_SETTINGS_INSTANCE)) {
err.log("Could not read up to instance " + source);
return null;
}
c=is.read();
if (c == 'o') {
if (!expect(is,MODULE_SETTINGS_OF)) {
err.log("Could not read up to instance");
return null;
}
String iof=readTo(is,'"');
if (iof == null) {
err.log("Could not read instanceof value " + source);
return null;
}
iof=org.openide.util.Utilities.translate(iof).intern();
iofs.add(iof);
if (is.read() != '/') {
err.log("No / at end of <instanceof> " + iof + " "+ source);
return null;
}
if (!expect(is,MODULE_SETTINGS_TAG_END)) {
err.log("Could not read up to next tag after <instanceof> " + iof + " "+ source);
return null;
}
}
 else if (c == ' ') {
if (!expect(is,MODULE_SETTINGS_INSTANCE_CLZ)) {
err.log("Could not read up to class=\" " + source);
return null;
}
instanceClass=readTo(is,'"');
if (instanceClass == null) {
err.log("Could not read instance class value " + source);
return null;
}
instanceClass=org.openide.util.Utilities.translate(instanceClass).intern();
c=is.read();
if (c == '/') {
if (!expect(is,MODULE_SETTINGS_TAG_END)) {
err.log("Could not read up to end of instance tag " + source);
return null;
}
break;
}
 else if (c != ' ') {
err.log("Could not space after instance class " + source);
return null;
}
if (!expect(is,MODULE_SETTINGS_INSTANCE_MTD)) {
err.log("Could not read up to method=\" " + source);
return null;
}
instanceMethod=readTo(is,'"');
if (instanceMethod == null) {
err.log("Could not read method value " + source);
return null;
}
instanceMethod=instanceMethod.intern();
c=is.read();
if (c == '/') {
if (!expect(is,MODULE_SETTINGS_TAG_END)) {
err.log("Could not read up to end of instance tag " + source);
return null;
}
break;
}
err.log("Strange stuff after method attribute " + source);
return null;
}
 else {
err.log("Could not read after to instance " + source);
return null;
}
break;
case 's':
if (!expect(is,MODULE_SETTINGS_SERIAL)) {
err.log("Could not read up to <serialdata class=\" " + source);
return null;
}
instanceClass=readTo(is,'"');
if (instanceClass == null) {
err.log("Could not read serialdata class value " + source);
return null;
}
instanceClass=org.openide.util.Utilities.translate(instanceClass).intern();
c=is.read();
if (c != '>') {
err.log("Could not read up to end of serialdata tag " + source);
return null;
}
break PARSE;
case '/':
if (!expect(is,MODULE_SETTINGS_END)) {
err.log("Could not read up to end of settings tag " + source);
return null;
}
break PARSE;
default :
err.log("Strange stuff after <" + (char)c + " "+ source);
return null;
}
}
if (instanceClass != null && !iofs.isEmpty()) {
return iofs;
}
return null;
}
