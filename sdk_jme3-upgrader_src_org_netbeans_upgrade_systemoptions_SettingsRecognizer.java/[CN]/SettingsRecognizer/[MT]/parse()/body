{
  InputStream in=null;
  try {
    if (header) {
      if (err.isLoggable(err.INFORMATIONAL) && source.getSize() < 12000) {
        byte[] arr=new byte[(int)source.getSize()];
        InputStream temp=source.getInputStream();
        int len=temp.read(arr);
        if (len != arr.length) {
          throw new IOException("Could not read " + arr.length + " bytes from "+ source+ " just "+ len);
        }
        err.log("Parsing:" + new String(arr));
        temp.close();
        in=new ByteArrayInputStream(arr);
      }
 else {
        in=new BufferedInputStream(source.getInputStream());
      }
      Set<String> iofs=quickParse(new BufferedInputStream(in));
      if (iofs != null) {
        instanceOf=iofs;
        return;
      }
    }
  }
 catch (  IOException ioe) {
  }
 finally {
    if (in != null)     in.close();
  }
  stack=new Stack<String>();
  try {
    in=source.getInputStream();
    XMLReader reader=org.openide.xml.XMLUtil.createXMLReader();
    reader.setContentHandler(this);
    reader.setErrorHandler(this);
    reader.setEntityResolver(this);
    reader.parse(new org.xml.sax.InputSource(new BufferedInputStream(in)));
  }
 catch (  SettingsRecognizer.StopSAXException ex) {
  }
catch (  SAXException ex) {
    IOException ioe=new IOException(source.toString());
    ErrorManager emgr=ErrorManager.getDefault();
    emgr.annotate(ioe,ex);
    if (ex.getException() != null) {
      emgr.annotate(ioe,ex.getException());
    }
    emgr.annotate(ioe,"Content: \n" + getFileContent(source));
    emgr.annotate(ioe,"Source: " + source);
    throw ioe;
  }
 finally {
    stack=null;
    try {
      if (in != null) {
        in.close();
      }
    }
 catch (    IOException ex) {
    }
  }
}
