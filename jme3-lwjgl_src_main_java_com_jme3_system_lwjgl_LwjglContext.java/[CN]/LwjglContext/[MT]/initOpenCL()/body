{
  logger.info("Initialize OpenCL wiht LWJGL2");
  try {
    CL.create();
  }
 catch (  LWJGLException ex) {
    logger.log(Level.SEVERE,"Unable to initialize OpenCL",ex);
    return;
  }
  StringBuilder platformInfos=new StringBuilder();
  ArrayList<LwjglPlatform> platforms=new ArrayList<>();
  for (  CLPlatform p : CLPlatform.getPlatforms()) {
    platforms.add(new LwjglPlatform(p));
  }
  platformInfos.append("Available OpenCL platforms:");
  for (int i=0; i < platforms.size(); ++i) {
    LwjglPlatform platform=platforms.get(i);
    platformInfos.append("\n * Platform ").append(i + 1);
    platformInfos.append("\n *   Name: ").append(platform.getName());
    platformInfos.append("\n *   Vendor: ").append(platform.getVendor());
    platformInfos.append("\n *   Version: ").append(platform.getVersion());
    platformInfos.append("\n *   Profile: ").append(platform.getProfile());
    platformInfos.append("\n *   Supports interop: ").append(platform.hasOpenGLInterop());
    List<LwjglDevice> devices=platform.getDevices();
    platformInfos.append("\n *   Available devices:");
    for (int j=0; j < devices.size(); ++j) {
      LwjglDevice device=devices.get(j);
      platformInfos.append("\n *    * Device ").append(j + 1);
      platformInfos.append("\n *    *   Name: ").append(device.getName());
      platformInfos.append("\n *    *   Vendor: ").append(device.getVendor());
      platformInfos.append("\n *    *   Version: ").append(device.getVersion());
      platformInfos.append("\n *    *   Profile: ").append(device.getProfile());
      platformInfos.append("\n *    *   Compiler version: ").append(device.getCompilerVersion());
      platformInfos.append("\n *    *   Device type: ").append(device.getDeviceType());
      platformInfos.append("\n *    *   Compute units: ").append(device.getComputeUnits());
      platformInfos.append("\n *    *   Work group size: ").append(device.getMaxiumWorkItemsPerGroup());
      platformInfos.append("\n *    *   Global memory: ").append(device.getGlobalMemorySize()).append("B");
      platformInfos.append("\n *    *   Local memory: ").append(device.getLocalMemorySize()).append("B");
      platformInfos.append("\n *    *   Constant memory: ").append(device.getMaximumConstantBufferSize()).append("B");
      platformInfos.append("\n *    *   Supports double: ").append(device.hasDouble());
      platformInfos.append("\n *    *   Supports half floats: ").append(device.hasHalfFloat());
      platformInfos.append("\n *    *   Supports writable 3d images: ").append(device.hasWritableImage3D());
      platformInfos.append("\n *    *   Supports interop: ").append(device.hasOpenGLInterop());
    }
  }
  logger.info(platformInfos.toString());
  PlatformChooser chooser=null;
  if (settings.getOpenCLPlatformChooser() != null) {
    try {
      chooser=(PlatformChooser)Class.forName(settings.getOpenCLPlatformChooser()).newInstance();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,"unable to instantiate custom PlatformChooser",ex);
    }
  }
  if (chooser == null) {
    chooser=new PlatformChooserImpl();
  }
  List<? extends Device> choosenDevices=chooser.chooseDevices(platforms);
  List<CLDevice> devices=new ArrayList<>(choosenDevices.size());
  LwjglPlatform platform=null;
  for (  Device d : choosenDevices) {
    if (!(d instanceof LwjglDevice)) {
      logger.log(Level.SEVERE,"attempt to return a custom Device implementation from PlatformChooser: {0}",d);
      return;
    }
    LwjglDevice ld=(LwjglDevice)d;
    if (platform == null) {
      platform=ld.getPlatform();
    }
 else     if (platform != ld.getPlatform()) {
      logger.severe("attempt to use devices from different platforms");
      return;
    }
    devices.add(ld.getDevice());
  }
  if (devices.isEmpty()) {
    logger.warning("no devices specified, no OpenCL context created");
    return;
  }
  clPlatform=platform;
  logger.log(Level.INFO,"chosen platform: {0}",platform.getName());
  logger.log(Level.INFO,"chosen devices: {0}",choosenDevices);
  try {
    CLContext c=CLContext.create(platform.getPlatform(),devices,null,Display.getDrawable(),null);
    clContext=new com.jme3.opencl.lwjgl.LwjglContext(c,(List<LwjglDevice>)choosenDevices);
  }
 catch (  LWJGLException ex) {
    logger.log(Level.SEVERE,"Unable to create OpenCL context",ex);
    return;
  }
  logger.info("OpenCL context created");
}
