{
  Image.Format fmt=img.getFormat();
  checkFormatSupported(fmt);
  ByteBuffer data;
  if (index >= 0 && img.getData() != null && img.getData().size() > 0) {
    data=img.getData(index);
  }
 else {
    data=null;
  }
  int width=img.getWidth();
  int height=img.getHeight();
  int depth=img.getDepth();
  boolean compress=false;
  int internalFormat=-1;
  int format=-1;
  int dataType=-1;
switch (fmt) {
case Alpha16:
    internalFormat=GL_ALPHA16;
  format=GL_ALPHA;
dataType=GL_UNSIGNED_BYTE;
break;
case Alpha8:
internalFormat=GL_ALPHA8;
format=GL_ALPHA;
dataType=GL_UNSIGNED_BYTE;
break;
case DXT1:
compress=true;
internalFormat=GL_COMPRESSED_RGB_S3TC_DXT1_EXT;
format=GL_RGB;
dataType=GL_UNSIGNED_BYTE;
break;
case DXT1A:
compress=true;
internalFormat=GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;
format=GL_RGBA;
dataType=GL_UNSIGNED_BYTE;
break;
case DXT3:
compress=true;
internalFormat=GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;
format=GL_RGBA;
dataType=GL_UNSIGNED_BYTE;
break;
case DXT5:
compress=true;
internalFormat=GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;
format=GL_RGBA;
dataType=GL_UNSIGNED_BYTE;
break;
case LATC:
compress=true;
if (tdc) {
internalFormat=GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI;
}
 else {
internalFormat=GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT;
}
format=GL_LUMINANCE_ALPHA;
dataType=GL_UNSIGNED_BYTE;
break;
case LTC:
compress=true;
internalFormat=GL_COMPRESSED_LUMINANCE_LATC1_EXT;
format=GL_LUMINANCE_ALPHA;
dataType=GL_UNSIGNED_BYTE;
break;
case Depth:
internalFormat=GL_DEPTH_COMPONENT;
format=GL_DEPTH_COMPONENT;
dataType=GL_UNSIGNED_BYTE;
break;
case Depth16:
internalFormat=GL_DEPTH_COMPONENT16;
format=GL_DEPTH_COMPONENT;
dataType=GL_UNSIGNED_BYTE;
break;
case Depth24:
internalFormat=GL_DEPTH_COMPONENT24;
format=GL_DEPTH_COMPONENT;
dataType=GL_UNSIGNED_BYTE;
break;
case Depth32:
internalFormat=GL_DEPTH_COMPONENT32;
format=GL_DEPTH_COMPONENT;
dataType=GL_UNSIGNED_BYTE;
break;
case Depth32F:
internalFormat=NVDepthBufferFloat.GL_DEPTH_COMPONENT32F_NV;
format=GL_DEPTH_COMPONENT;
dataType=GL_FLOAT;
break;
case Luminance16FAlpha16F:
internalFormat=ARBTextureFloat.GL_LUMINANCE_ALPHA16F_ARB;
format=GL_LUMINANCE_ALPHA;
dataType=GL_UNSIGNED_BYTE;
break;
case Intensity8:
internalFormat=GL_INTENSITY8;
format=GL_INTENSITY;
dataType=GL_UNSIGNED_BYTE;
break;
case Intensity16:
internalFormat=GL_INTENSITY16;
format=GL_INTENSITY;
dataType=GL_UNSIGNED_BYTE;
break;
case Luminance8:
internalFormat=GL_LUMINANCE8;
format=GL_LUMINANCE;
dataType=GL_UNSIGNED_BYTE;
break;
case Luminance8Alpha8:
internalFormat=GL_LUMINANCE8_ALPHA8;
format=GL_LUMINANCE_ALPHA;
dataType=GL_UNSIGNED_BYTE;
break;
case Luminance16Alpha16:
internalFormat=GL_LUMINANCE16_ALPHA16;
format=GL_LUMINANCE_ALPHA;
dataType=GL_UNSIGNED_BYTE;
break;
case Luminance16:
internalFormat=GL_LUMINANCE16;
format=GL_LUMINANCE;
dataType=GL_UNSIGNED_BYTE;
break;
case Luminance16F:
internalFormat=ARBTextureFloat.GL_LUMINANCE16F_ARB;
format=GL_LUMINANCE;
dataType=ARBHalfFloatPixel.GL_HALF_FLOAT_ARB;
break;
case Luminance32F:
internalFormat=ARBTextureFloat.GL_LUMINANCE32F_ARB;
format=GL_LUMINANCE;
dataType=GL_FLOAT;
break;
case RGB10:
internalFormat=GL_RGB10;
format=GL_RGB;
dataType=GL_UNSIGNED_BYTE;
break;
case RGB16:
internalFormat=GL_RGB16;
format=GL_RGB;
dataType=GL_UNSIGNED_BYTE;
break;
case RGB111110F:
internalFormat=EXTPackedFloat.GL_R11F_G11F_B10F_EXT;
format=GL_RGB;
dataType=EXTPackedFloat.GL_UNSIGNED_INT_10F_11F_11F_REV_EXT;
break;
case RGB16F_to_RGB111110F:
internalFormat=EXTPackedFloat.GL_R11F_G11F_B10F_EXT;
format=GL_RGB;
dataType=ARBHalfFloatPixel.GL_HALF_FLOAT_ARB;
break;
case RGB16F_to_RGB9E5:
internalFormat=EXTTextureSharedExponent.GL_RGB9_E5_EXT;
format=GL_RGB;
dataType=ARBHalfFloatPixel.GL_HALF_FLOAT_ARB;
break;
case RGB9E5:
internalFormat=EXTTextureSharedExponent.GL_RGB9_E5_EXT;
format=GL_RGB;
dataType=EXTTextureSharedExponent.GL_UNSIGNED_INT_5_9_9_9_REV_EXT;
break;
case RGB16F:
internalFormat=ARBTextureFloat.GL_RGB16F_ARB;
format=GL_RGB;
dataType=ARBHalfFloatPixel.GL_HALF_FLOAT_ARB;
break;
case RGBA16F:
internalFormat=ARBTextureFloat.GL_RGBA16F_ARB;
format=GL_RGBA;
dataType=ARBHalfFloatPixel.GL_HALF_FLOAT_ARB;
break;
case RGB32F:
internalFormat=ARBTextureFloat.GL_RGB32F_ARB;
format=GL_RGB;
dataType=GL_FLOAT;
break;
case RGBA32F:
internalFormat=ARBTextureFloat.GL_RGBA32F_ARB;
format=GL_RGBA;
dataType=GL_FLOAT;
break;
case RGB5A1:
internalFormat=GL_RGB5_A1;
format=GL_RGBA;
dataType=GL_UNSIGNED_BYTE;
break;
case RGB8:
internalFormat=GL_RGB8;
format=GL_RGB;
dataType=GL_UNSIGNED_BYTE;
break;
case BGR8:
internalFormat=GL_RGB8;
format=GL_BGR;
dataType=GL_UNSIGNED_BYTE;
break;
case RGBA16:
internalFormat=GL_RGBA16;
format=GL_RGBA;
dataType=GL_UNSIGNED_BYTE;
break;
case RGBA8:
internalFormat=GL_RGBA8;
format=GL_RGBA;
dataType=GL_UNSIGNED_BYTE;
break;
case ABGR8:
internalFormat=GL_RGBA8;
format=EXTAbgr.GL_ABGR_EXT;
dataType=GL_UNSIGNED_BYTE;
break;
default :
throw new UnsupportedOperationException("Unrecognized format: " + fmt);
}
if (data != null) glPixelStorei(GL_UNPACK_ALIGNMENT,1);
int[] mipSizes=img.getMipMapSizes();
int pos=0;
if (mipSizes == null) {
if (data != null) mipSizes=new int[]{data.capacity()};
 else mipSizes=new int[]{width * height * fmt.getBitsPerPixel() / 8};
}
boolean subtex=false;
int samples=img.getMultiSamples();
for (int i=0; i < mipSizes.length; i++) {
int mipWidth=Math.max(1,width >> i);
int mipHeight=Math.max(1,height >> i);
int mipDepth=Math.max(1,depth >> i);
if (data != null) {
data.position(pos);
data.limit(pos + mipSizes[i]);
}
if (compress && data != null) {
if (target == GL_TEXTURE_3D) {
glCompressedTexImage3D(target,i,internalFormat,mipWidth,mipHeight,mipDepth,border,data);
}
 else {
glCompressedTexImage2D(target,i,internalFormat,mipWidth,mipHeight,border,data);
}
}
 else {
if (target == GL_TEXTURE_3D) {
glTexImage3D(target,i,internalFormat,mipWidth,mipHeight,mipDepth,border,format,dataType,data);
}
 else if (target == EXTTextureArray.GL_TEXTURE_2D_ARRAY_EXT) {
if (index == -1) {
glTexImage3D(target,0,internalFormat,mipWidth,mipHeight,img.getData().size(),border,format,dataType,0);
}
 else {
glTexSubImage3D(target,i,0,0,index,width,height,1,format,dataType,data);
}
}
 else {
if (subtex) {
if (samples > 1) throw new IllegalStateException("Cannot update multisample textures");
glTexSubImage2D(target,i,0,0,mipWidth,mipHeight,format,dataType,data);
}
 else {
if (samples > 1) {
ARBTextureMultisample.glTexImage2DMultisample(target,samples,internalFormat,mipWidth,mipHeight,true);
}
 else {
glTexImage2D(target,i,internalFormat,mipWidth,mipHeight,border,format,dataType,data);
}
}
}
}
pos+=mipSizes[i];
}
}
