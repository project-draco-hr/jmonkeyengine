{
  if (influence == 0 || !trackToBeChanged || targetTransform == null) {
    return;
  }
  DQuaternion q=new DQuaternion();
  Vector3d t=new Vector3d(targetTransform.getTranslation());
  bones=new BonesChain((Bone)this.getOwner(),useTail,bonesAffected,blenderContext);
  if (bones.size() == 0) {
    return;
  }
  double distanceFromTarget=Double.MAX_VALUE;
  Vector3d target=new Vector3d(targetTransform.getTranslation());
  Vector3d[] rotationVectors=new Vector3d[bones.size()];
  BoneContext topBone=bones.get(0);
  for (int i=1; i <= iterations; ++i) {
    DTransform topBoneTransform=bones.getWorldTransform(topBone);
    Vector3d e=topBoneTransform.getTranslation().add(topBoneTransform.getRotation().mult(Vector3d.UNIT_Y).multLocal(topBone.getLength()));
    distanceFromTarget=e.distance(t);
    if (distanceFromTarget <= MIN_DISTANCE) {
      break;
    }
    Matrix deltaP=new Matrix(3,1);
    deltaP.setColumn(target.subtract(e),0);
    Matrix J=new Matrix(3,bones.size());
    int column=0;
    for (    BoneContext boneContext : bones) {
      DTransform boneWorldTransform=bones.getWorldTransform(boneContext);
      Vector3d j=boneWorldTransform.getTranslation();
      Vector3d vectorFromJointToEffector=e.subtract(j);
      rotationVectors[column]=vectorFromJointToEffector.cross(target.subtract(j)).normalize();
      Vector3d col=rotationVectors[column].cross(vectorFromJointToEffector);
      J.setColumn(col,column++);
    }
    Matrix J_1=J.pseudoinverse();
    SimpleMatrix deltaThetas=J_1.mult(deltaP);
    for (int j=0; j < deltaThetas.numRows(); ++j) {
      double angle=deltaThetas.get(j,0);
      Vector3d rotationVector=rotationVectors[j];
      q.fromAngleAxis(angle,rotationVector);
      BoneContext boneContext=bones.get(j);
      Bone bone=boneContext.getBone();
      if (bone.equals(this.getOwner())) {
        if (boneContext.isLockX()) {
          q.set(0,q.getY(),q.getZ(),q.getW());
        }
        if (boneContext.isLockY()) {
          q.set(q.getX(),0,q.getZ(),q.getW());
        }
        if (boneContext.isLockZ()) {
          q.set(q.getX(),q.getY(),0,q.getW());
        }
      }
      DTransform boneTransform=bones.getWorldTransform(boneContext);
      boneTransform.getRotation().set(q.mult(boneTransform.getRotation()));
      bones.setWorldTransform(boneContext,boneTransform);
    }
  }
  for (int i=bones.size() - 1; i >= 0; --i) {
    BoneContext boneContext=bones.get(i);
    DTransform transform=bones.getWorldTransform(boneContext);
    constraintHelper.applyTransform(boneContext.getArmatureObjectOMA(),boneContext.getBone().getName(),Space.CONSTRAINT_SPACE_WORLD,transform.toTransform());
  }
  bones.reset();
}
