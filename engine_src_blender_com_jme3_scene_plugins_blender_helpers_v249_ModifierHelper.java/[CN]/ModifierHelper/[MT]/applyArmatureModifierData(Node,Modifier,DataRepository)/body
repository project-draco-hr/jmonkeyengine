{
  AnimData ad=(AnimData)modifier.getJmeModifierRepresentation();
  ArrayList<BoneAnimation> animList=ad.anims;
  Long modifierArmatureObject=(Long)modifier.getAdditionalData();
  if (animList != null && animList.size() > 0) {
    ConstraintHelper constraintHelper=dataRepository.getHelper(ConstraintHelper.class);
    Constraint[] constraints=constraintHelper.getConstraints(modifierArmatureObject);
    HashMap<String,BoneAnimation> anims=new HashMap<String,BoneAnimation>();
    for (int i=0; i < animList.size(); ++i) {
      BoneAnimation boneAnimation=animList.get(i).clone();
      if (constraints != null && constraints.length > 0) {
        for (        Constraint constraint : constraints) {
          constraint.affectAnimation(ad.skeleton,boneAnimation);
        }
      }
      anims.put(boneAnimation.getName(),boneAnimation);
    }
    Mesh[] meshes=null;
    List<Mesh> meshesList=new ArrayList<Mesh>();
    List<Spatial> children=node.getChildren();
    for (    Spatial child : children) {
      if (child instanceof Geometry) {
        meshesList.add(((Geometry)child).getMesh());
      }
    }
    if (meshesList.size() > 0) {
      meshes=meshesList.toArray(new Mesh[meshesList.size()]);
    }
    SkeletonControl skeletonControl=new SkeletonControl(meshes,ad.skeleton);
    AnimControl control=node.getControl(AnimControl.class);
    if (control == null) {
      control=new AnimControl(ad.skeleton);
    }
 else {
      Skeleton controlSkeleton=control.getSkeleton();
      int boneIndexIncrease=controlSkeleton.getBoneCount();
      Skeleton skeleton=this.merge(controlSkeleton,ad.skeleton);
      HashMap<String,BoneAnimation> animations=new HashMap<String,BoneAnimation>();
      for (      String animationName : control.getAnimationNames()) {
        animations.put(animationName,control.getAnim(animationName));
      }
      for (      Entry<String,BoneAnimation> animEntry : anims.entrySet()) {
        BoneAnimation ba=animEntry.getValue();
        for (int i=0; i < ba.getTracks().length; ++i) {
          BoneTrack bt=ba.getTracks()[i];
          int newBoneIndex=bt.getTargetBoneIndex() + boneIndexIncrease;
          ba.getTracks()[i]=new BoneTrack(newBoneIndex,bt.getTimes(),bt.getTranslations(),bt.getRotations(),bt.getScales());
        }
        animations.put(animEntry.getKey(),animEntry.getValue());
      }
      node.removeControl(control);
      control=new AnimControl(skeleton);
    }
    control.setAnimations(anims);
    node.addControl(control);
    node.addControl(skeletonControl);
  }
  return node;
}
