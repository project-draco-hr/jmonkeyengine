{
  GL gl=GLContext.getCurrentGL();
  if (state.isWireframe() && !context.wireframe) {
    gl.getGL2().glPolygonMode(GL2.GL_FRONT_AND_BACK,GL2.GL_LINE);
    context.wireframe=true;
  }
 else   if (!state.isWireframe() && context.wireframe) {
    gl.getGL2().glPolygonMode(GL2.GL_FRONT_AND_BACK,GL2.GL_FILL);
    context.wireframe=false;
  }
  if (state.isDepthTest() && !context.depthTestEnabled) {
    gl.getGL2().glEnable(GL.GL_DEPTH_TEST);
    gl.getGL2().glDepthFunc(GL.GL_LEQUAL);
    context.depthTestEnabled=true;
  }
 else   if (!state.isDepthTest() && context.depthTestEnabled) {
    gl.getGL2().glDisable(GL.GL_DEPTH_TEST);
    context.depthTestEnabled=false;
  }
  if (state.isAlphaTest()) {
    setFixedFuncBinding(FixedFuncBinding.AlphaTestFallOff,state.getAlphaFallOff());
  }
 else {
    setFixedFuncBinding(FixedFuncBinding.AlphaTestFallOff,0f);
  }
  if (state.isDepthWrite() && !context.depthWriteEnabled) {
    gl.getGL2().glDepthMask(true);
    context.depthWriteEnabled=true;
  }
 else   if (!state.isDepthWrite() && context.depthWriteEnabled) {
    gl.getGL2().glDepthMask(false);
    context.depthWriteEnabled=false;
  }
  if (state.isColorWrite() && !context.colorWriteEnabled) {
    gl.getGL2().glColorMask(true,true,true,true);
    context.colorWriteEnabled=true;
  }
 else   if (!state.isColorWrite() && context.colorWriteEnabled) {
    gl.getGL2().glColorMask(false,false,false,false);
    context.colorWriteEnabled=false;
  }
  if (state.isPointSprite()) {
    logger.log(Level.WARNING,"Point Sprite unsupported!");
  }
  if (state.isPolyOffset()) {
    if (!context.polyOffsetEnabled) {
      gl.glEnable(GL.GL_POLYGON_OFFSET_FILL);
      gl.getGL2().glPolygonOffset(state.getPolyOffsetFactor(),state.getPolyOffsetUnits());
      context.polyOffsetEnabled=true;
      context.polyOffsetFactor=state.getPolyOffsetFactor();
      context.polyOffsetUnits=state.getPolyOffsetUnits();
    }
 else {
      if (state.getPolyOffsetFactor() != context.polyOffsetFactor || state.getPolyOffsetUnits() != context.polyOffsetUnits) {
        gl.getGL2().glPolygonOffset(state.getPolyOffsetFactor(),state.getPolyOffsetUnits());
        context.polyOffsetFactor=state.getPolyOffsetFactor();
        context.polyOffsetUnits=state.getPolyOffsetUnits();
      }
    }
  }
 else {
    if (context.polyOffsetEnabled) {
      gl.glDisable(GL.GL_POLYGON_OFFSET_FILL);
      context.polyOffsetEnabled=false;
      context.polyOffsetFactor=0;
      context.polyOffsetUnits=0;
    }
  }
  if (state.getFaceCullMode() != context.cullMode) {
    if (state.getFaceCullMode() == RenderState.FaceCullMode.Off) {
      gl.glDisable(GL.GL_CULL_FACE);
    }
 else {
      gl.glEnable(GL.GL_CULL_FACE);
    }
switch (state.getFaceCullMode()) {
case Off:
      break;
case Back:
    gl.glCullFace(GL.GL_BACK);
  break;
case Front:
gl.glCullFace(GL.GL_FRONT);
break;
case FrontAndBack:
gl.glCullFace(GL.GL_FRONT_AND_BACK);
break;
default :
throw new UnsupportedOperationException("Unrecognized face cull mode: " + state.getFaceCullMode());
}
context.cullMode=state.getFaceCullMode();
}
if (state.getBlendMode() != context.blendMode) {
if (state.getBlendMode() == RenderState.BlendMode.Off) {
gl.glDisable(GL.GL_BLEND);
}
 else {
gl.glEnable(GL.GL_BLEND);
switch (state.getBlendMode()) {
case Off:
break;
case Additive:
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE);
break;
case AlphaAdditive:
gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE);
break;
case Color:
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_COLOR);
break;
case Alpha:
gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
break;
case PremultAlpha:
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
break;
case Modulate:
gl.glBlendFunc(GL.GL_DST_COLOR,GL.GL_ZERO);
break;
case ModulateX2:
gl.glBlendFunc(GL.GL_DST_COLOR,GL.GL_SRC_COLOR);
break;
default :
throw new UnsupportedOperationException("Unrecognized blend mode: " + state.getBlendMode());
}
}
context.blendMode=state.getBlendMode();
}
if (state.isStencilTest()) {
throw new UnsupportedOperationException("OpenGL 1.1 doesn't support two sided stencil operations.");
}
}
