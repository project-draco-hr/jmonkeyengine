{
  Level store=logger.getLevel();
  logger.setLevel(Level.FINE);
  logger.log(Level.FINE,"Vendor: {0}",JmeIosGLES.glGetString(JmeIosGLES.GL_VENDOR));
  logger.log(Level.FINE,"Renderer: {0}",JmeIosGLES.glGetString(JmeIosGLES.GL_RENDERER));
  logger.log(Level.FINE,"Version: {0}",JmeIosGLES.glGetString(JmeIosGLES.GL_VERSION));
  logger.log(Level.FINE,"Shading Language Version: {0}",JmeIosGLES.glGetString(JmeIosGLES.GL_SHADING_LANGUAGE_VERSION));
  int openGlVer=extractVersion("OpenGL ES ",JmeIosGLES.glGetString(JmeIosGLES.GL_VERSION));
  if (openGlVer == -1) {
    glslVer=-1;
    throw new UnsupportedOperationException("OpenGL ES 2.0+ is required for IGLESShaderRenderer!");
  }
  glslVer=extractVersion("OpenGL ES GLSL ES ",JmeIosGLES.glGetString(JmeIosGLES.GL_SHADING_LANGUAGE_VERSION));
switch (glslVer) {
default :
    caps.add(Caps.GLSL100);
  break;
}
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,intBuf16,0);
vertexTextureUnits=intBuf16[0];
logger.log(Level.FINE,"VTF Units: {0}",vertexTextureUnits);
if (vertexTextureUnits > 0) {
caps.add(Caps.VertexTextureFetch);
}
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_TEXTURE_IMAGE_UNITS,intBuf16,0);
fragTextureUnits=intBuf16[0];
logger.log(Level.FINE,"Texture Units: {0}",fragTextureUnits);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_VERTEX_UNIFORM_VECTORS,intBuf16,0);
vertexUniforms=intBuf16[0] * 4;
logger.log(Level.FINER,"Vertex Uniforms: {0}",vertexUniforms);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_FRAGMENT_UNIFORM_VECTORS,intBuf16,0);
fragUniforms=intBuf16[0] * 4;
logger.log(Level.FINER,"Fragment Uniforms: {0}",fragUniforms);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_VARYING_VECTORS,intBuf16,0);
int varyingFloats=intBuf16[0] * 4;
logger.log(Level.FINER,"Varying Floats: {0}",varyingFloats);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_VERTEX_ATTRIBS,intBuf16,0);
vertexAttribs=intBuf16[0];
logger.log(Level.FINE,"Vertex Attributes: {0}",vertexAttribs);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_SUBPIXEL_BITS,intBuf16,0);
int subpixelBits=intBuf16[0];
logger.log(Level.FINE,"Subpixel Bits: {0}",subpixelBits);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_TEXTURE_SIZE,intBuf16,0);
maxTexSize=intBuf16[0];
logger.log(Level.FINE,"Maximum Texture Resolution: {0}",maxTexSize);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_CUBE_MAP_TEXTURE_SIZE,intBuf16,0);
maxCubeTexSize=intBuf16[0];
logger.log(Level.FINE,"Maximum CubeMap Resolution: {0}",maxCubeTexSize);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_MAX_RENDERBUFFER_SIZE,intBuf16,0);
maxRBSize=intBuf16[0];
logger.log(Level.FINER,"FBO RB Max Size: {0}",maxRBSize);
String extensions=JmeIosGLES.glGetString(JmeIosGLES.GL_EXTENSIONS);
logger.log(Level.FINE,"GL_EXTENSIONS: {0}",extensions);
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_NUM_COMPRESSED_TEXTURE_FORMATS,intBuf16,0);
int numCompressedFormats=intBuf16[0];
int[] compressedFormats=new int[numCompressedFormats];
JmeIosGLES.glGetIntegerv(JmeIosGLES.GL_COMPRESSED_TEXTURE_FORMATS,compressedFormats,0);
JmeIosGLES.checkGLError();
for (int i=0; i < numCompressedFormats; i++) {
logger.log(Level.FINE,"Compressed Texture Formats: {0}",compressedFormats[i]);
}
TextureUtil.loadTextureFeatures(extensions);
applyRenderState(RenderState.DEFAULT);
JmeIosGLES.glDisable(JmeIosGLES.GL_DITHER);
JmeIosGLES.checkGLError();
logger.log(Level.FINE,"Caps: {0}",caps);
logger.setLevel(store);
uintIndexSupport=extensions.contains("GL_OES_element_index_uint");
logger.log(Level.FINE,"Support for UInt index: {0}",uintIndexSupport);
}
