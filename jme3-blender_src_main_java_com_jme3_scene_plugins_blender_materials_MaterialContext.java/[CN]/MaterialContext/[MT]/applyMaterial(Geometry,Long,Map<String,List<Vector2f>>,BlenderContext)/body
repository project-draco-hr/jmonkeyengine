{
  Material material=null;
  if (shadeless) {
    material=new Material(blenderContext.getAssetManager(),"Common/MatDefs/Misc/Unshaded.j3md");
    if (!transparent) {
      diffuseColor.a=1;
    }
    material.setColor("Color",diffuseColor);
  }
 else {
    material=new Material(blenderContext.getAssetManager(),"Common/MatDefs/Light/Lighting.j3md");
    material.setBoolean("UseMaterialColors",Boolean.TRUE);
    if (!transparent) {
      diffuseColor.a=1;
    }
    material.setColor("Diffuse",diffuseColor);
    material.setColor("Specular",specularColor);
    material.setFloat("Shininess",shininess);
    material.setColor("Ambient",new ColorRGBA(ambientFactor,ambientFactor,ambientFactor,1f));
  }
  if (loadedTextures != null && loadedTextures.size() > 0) {
    int textureIndex=0;
    if (loadedTextures.size() > TextureHelper.TEXCOORD_TYPES.length) {
      LOGGER.log(Level.WARNING,"The blender file has defined more than {0} different textures. JME supports only {0} UV mappings.",TextureHelper.TEXCOORD_TYPES.length);
    }
    for (    CombinedTexture combinedTexture : loadedTextures) {
      if (textureIndex < TextureHelper.TEXCOORD_TYPES.length) {
        combinedTexture.flatten(geometry,geometriesOMA,userDefinedUVCoordinates,blenderContext);
        this.setTexture(material,combinedTexture.getMappingType(),combinedTexture.getResultTexture());
        List<Vector2f> uvs=combinedTexture.getResultUVS();
        if (uvs != null && uvs.size() > 0) {
          VertexBuffer uvCoordsBuffer=new VertexBuffer(TextureHelper.TEXCOORD_TYPES[textureIndex++]);
          uvCoordsBuffer.setupData(Usage.Static,2,Format.Float,BufferUtils.createFloatBuffer(uvs.toArray(new Vector2f[uvs.size()])));
          geometry.getMesh().setBuffer(uvCoordsBuffer);
        }
      }
 else {
        LOGGER.log(Level.WARNING,"The texture could not be applied because JME only supports up to {0} different UV's.",TextureHelper.TEXCOORD_TYPES.length);
      }
    }
  }
 else   if (userDefinedUVCoordinates != null && userDefinedUVCoordinates.size() > 0) {
    LOGGER.fine("No textures found for the mesh, but UV coordinates are applied.");
    int textureIndex=0;
    if (userDefinedUVCoordinates.size() > TextureHelper.TEXCOORD_TYPES.length) {
      LOGGER.log(Level.WARNING,"The blender file has defined more than {0} different UV coordinates for the mesh. JME supports only {0} UV coordinates buffers.",TextureHelper.TEXCOORD_TYPES.length);
    }
    for (    Entry<String,List<Vector2f>> entry : userDefinedUVCoordinates.entrySet()) {
      if (textureIndex < TextureHelper.TEXCOORD_TYPES.length) {
        List<Vector2f> uvs=entry.getValue();
        VertexBuffer uvCoordsBuffer=new VertexBuffer(TextureHelper.TEXCOORD_TYPES[textureIndex++]);
        uvCoordsBuffer.setupData(Usage.Static,2,Format.Float,BufferUtils.createFloatBuffer(uvs.toArray(new Vector2f[uvs.size()])));
        geometry.getMesh().setBuffer(uvCoordsBuffer);
      }
 else {
        LOGGER.log(Level.WARNING,"The texture could not be applied because JME only supports up to {0} different UV's.",TextureHelper.TEXCOORD_TYPES.length);
      }
    }
  }
  material.setName(name);
  if (vertexColor) {
    material.setBoolean(shadeless ? "VertexColor" : "UseVertexColor",true);
  }
  material.getAdditionalRenderState().setFaceCullMode(faceCullMode != null ? faceCullMode : blenderContext.getBlenderKey().getFaceCullMode());
  if (transparent) {
    material.setTransparent(true);
    material.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);
    geometry.setQueueBucket(Bucket.Transparent);
  }
  geometry.setMaterial(material);
}
