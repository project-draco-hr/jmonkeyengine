{
  LightList lightList=g.getWorldLightList();
  Uniform lightColor=shader.getUniform("g_LightColor");
  Uniform lightPos=shader.getUniform("g_LightPosition");
  Uniform ambientColor=shader.getUniform("g_AmbientLightColor");
  boolean isFirstLight=true;
  boolean isSecondLight=false;
  for (int i=0; i < lightList.size(); i++) {
    Light l=lightList.get(i);
    if (l instanceof AmbientLight) {
      continue;
    }
    if (isFirstLight) {
      ambientColor.setValue(VarType.Vector4,getAmbientColor(lightList));
      isFirstLight=false;
      isSecondLight=true;
    }
 else     if (isSecondLight) {
      ambientColor.setValue(VarType.Vector4,ColorRGBA.Black);
      r.applyRenderState(additiveLight);
      isSecondLight=false;
    }
    ColorRGBA color=l.getColor();
    ColorRGBA color2;
    if (lightColor.getValue() != null) {
      color2=(ColorRGBA)lightColor.getValue();
    }
 else {
      color2=new ColorRGBA();
    }
    color2.set(color);
    color2.a=l.getType().getId();
    lightColor.setValue(VarType.Vector4,color2);
switch (l.getType()) {
case Directional:
      DirectionalLight dl=(DirectionalLight)l;
    Vector3f dir=dl.getDirection();
  Quaternion q1;
if (lightPos.getValue() != null) {
  q1=(Quaternion)lightPos.getValue();
}
 else {
  q1=new Quaternion();
}
q1.set(dir.getX(),dir.getY(),dir.getZ(),-1);
lightPos.setValue(VarType.Vector4,q1);
break;
case Point:
PointLight pl=(PointLight)l;
Vector3f pos=pl.getPosition();
float invRadius=pl.getRadius();
if (invRadius != 0) {
invRadius=1f / invRadius;
}
Quaternion q2;
if (lightPos.getValue() != null) {
q2=(Quaternion)lightPos.getValue();
}
 else {
q2=new Quaternion();
}
q2.set(pos.getX(),pos.getY(),pos.getZ(),invRadius);
lightPos.setValue(VarType.Vector4,q2);
break;
default :
throw new UnsupportedOperationException("Unknown type of light: " + l.getType());
}
r.setShader(shader);
r.renderMesh(g.getMesh(),g.getLodLevel(),1);
}
if (isFirstLight && lightList.size() > 0) {
ambientColor.setValue(VarType.Vector4,getAmbientColor(lightList));
lightColor.setValue(VarType.Vector4,ColorRGBA.BlackNoAlpha);
lightPos.setValue(VarType.Vector4,nullDirLight);
r.setShader(shader);
r.renderMesh(g.getMesh(),g.getLodLevel(),1);
}
}
