{
  if (numLights == 0) {
    return;
  }
  LightList lightList=g.getWorldLightList();
  Uniform lightColor=shader.getUniform("g_LightColor");
  Uniform lightPos=shader.getUniform("g_LightPosition");
  Uniform lightDir=shader.getUniform("g_LightDirection");
  lightColor.setVector4Length(numLights);
  lightPos.setVector4Length(numLights);
  lightDir.setVector4Length(numLights);
  Uniform ambientColor=shader.getUniform("g_AmbientLightColor");
  ambientColor.setValue(VarType.Vector4,getAmbientColor(lightList));
  int lightIndex=0;
  for (int i=0; i < numLights; i++) {
    if (lightList.size() <= i) {
      lightColor.setVector4InArray(0f,0f,0f,0f,lightIndex);
      lightPos.setVector4InArray(0f,0f,0f,0f,lightIndex);
    }
 else {
      Light l=lightList.get(i);
      ColorRGBA color=l.getColor();
      lightColor.setVector4InArray(color.getRed(),color.getGreen(),color.getBlue(),l.getType().getId(),i);
switch (l.getType()) {
case Directional:
        DirectionalLight dl=(DirectionalLight)l;
      Vector3f dir=dl.getDirection();
    lightPos.setVector4InArray(dir.getX(),dir.getY(),dir.getZ(),-1,lightIndex);
  break;
case Point:
PointLight pl=(PointLight)l;
Vector3f pos=pl.getPosition();
float invRadius=pl.getInvRadius();
lightPos.setVector4InArray(pos.getX(),pos.getY(),pos.getZ(),invRadius,lightIndex);
break;
case Spot:
SpotLight sl=(SpotLight)l;
Vector3f pos2=sl.getPosition();
Vector3f dir2=sl.getDirection();
float invRange=sl.getInvSpotRange();
float spotAngleCos=sl.getPackedAngleCos();
lightPos.setVector4InArray(pos2.getX(),pos2.getY(),pos2.getZ(),invRange,lightIndex);
lightDir.setVector4InArray(dir2.getX(),dir2.getY(),dir2.getZ(),spotAngleCos,lightIndex);
break;
case Ambient:
continue;
default :
throw new UnsupportedOperationException("Unknown type of light: " + l.getType());
}
}
lightIndex++;
}
while (lightIndex < numLights) {
lightColor.setVector4InArray(0f,0f,0f,0f,lightIndex);
lightPos.setVector4InArray(0f,0f,0f,0f,lightIndex);
lightIndex++;
}
}
