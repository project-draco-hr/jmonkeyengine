{
  if (glslVer != -1) {
    GL gl=GLContext.getCurrentGL();
    int id=source.getId();
    if (id == -1) {
      id=gl.getGL2().glCreateShader(convertShaderType(source.getType()));
      if (id <= 0) {
        throw new RendererException("Invalid ID received when trying to create shader.");
      }
      source.setId(id);
    }
    byte[] versionData=new byte[]{};
    byte[] definesCodeData=source.getDefines().getBytes();
    byte[] sourceCodeData=source.getSource().getBytes();
    ByteBuffer codeBuf=BufferUtils.createByteBuffer(versionData.length + definesCodeData.length + sourceCodeData.length);
    codeBuf.put(versionData);
    codeBuf.put(definesCodeData);
    codeBuf.put(sourceCodeData);
    codeBuf.flip();
    final byte[] array=new byte[codeBuf.limit()];
    codeBuf.get(array);
    gl.getGL2().glShaderSourceARB(id,1,new String[]{new String(array)},new int[]{array.length},0);
    gl.getGL2().glCompileShader(id);
    gl.getGL2().glGetShaderiv(id,GL2ES2.GL_COMPILE_STATUS,intBuf1);
    boolean compiledOK=intBuf1.get(0) == GL.GL_TRUE;
    String infoLog=null;
    if (VALIDATE_SHADER || !compiledOK) {
      gl.getGL2().glGetShaderiv(id,GL2ES2.GL_INFO_LOG_LENGTH,intBuf1);
      int length=intBuf1.get(0);
      if (length > 3) {
        ByteBuffer logBuf=BufferUtils.createByteBuffer(length);
        gl.getGL2().glGetShaderInfoLog(id,logBuf.limit(),intBuf1,logBuf);
        byte[] logBytes=new byte[length];
        logBuf.get(logBytes,0,length);
        infoLog=new String(logBytes);
      }
    }
    if (compiledOK) {
      if (infoLog != null) {
        logger.log(Level.INFO,"{0} compile success\n{1}",new Object[]{source.getName(),infoLog});
      }
 else {
        logger.log(Level.FINE,"{0} compile success",source.getName());
      }
    }
 else {
      if (infoLog != null) {
        logger.log(Level.WARNING,"{0} compile error: {1}",new Object[]{source.getName(),infoLog});
      }
 else {
        logger.log(Level.WARNING,"{0} compile error: ?",source.getName());
      }
      logger.log(Level.WARNING,"{0}{1}",new Object[]{source.getDefines(),source.getSource()});
    }
    source.clearUpdateNeeded();
    source.setUsable(compiledOK);
    if (!compiledOK) {
      gl.getGL2().glDeleteShader(id);
    }
 else {
      objManager.registerForCleanup(source);
    }
  }
}
