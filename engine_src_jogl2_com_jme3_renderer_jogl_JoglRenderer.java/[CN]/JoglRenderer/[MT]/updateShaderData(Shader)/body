{
  if (glslVer != -1) {
    GL gl=GLContext.getCurrentGL();
    int id=shader.getId();
    boolean needRegister=false;
    if (id == -1) {
      id=gl.getGL2().glCreateProgram();
      if (id <= 0) {
        throw new RendererException("Invalid ID received when trying to create shader program.");
      }
      shader.setId(id);
      needRegister=true;
    }
    for (    ShaderSource source : shader.getSources()) {
      if (source.isUpdateNeeded()) {
        updateShaderSourceData(source,shader.getLanguage());
      }
      if (!source.isUsable()) {
        shader.setUsable(false);
        shader.clearUpdateNeeded();
        return;
      }
      gl.getGL2().glAttachShader(id,source.getId());
    }
    gl.getGL2().glLinkProgram(id);
    gl.getGL2().glGetProgramiv(id,GL2ES2.GL_LINK_STATUS,intBuf1);
    boolean linkOK=intBuf1.get(0) == GL.GL_TRUE;
    String infoLog=null;
    if (VALIDATE_SHADER || !linkOK) {
      gl.getGL2().glGetProgramiv(id,GL2ES2.GL_INFO_LOG_LENGTH,intBuf1);
      int length=intBuf1.get(0);
      if (length > 3) {
        ByteBuffer logBuf=BufferUtils.createByteBuffer(length);
        gl.getGL2().glGetProgramInfoLog(id,logBuf.limit(),intBuf1,logBuf);
        byte[] logBytes=new byte[length];
        logBuf.get(logBytes,0,length);
        infoLog=new String(logBytes);
      }
    }
    if (linkOK) {
      if (infoLog != null) {
        logger.log(Level.INFO,"shader link success. \n{0}",infoLog);
      }
 else {
        logger.fine("shader link success");
      }
    }
 else {
      if (infoLog != null) {
        logger.log(Level.WARNING,"shader link failure. \n{0}",infoLog);
      }
 else {
        logger.warning("shader link failure");
      }
    }
    shader.clearUpdateNeeded();
    if (!linkOK) {
      shader.resetSources();
      shader.setUsable(false);
      deleteShader(shader);
    }
 else {
      shader.setUsable(true);
      if (needRegister) {
        objManager.registerForCleanup(shader);
        statistics.onNewShader();
      }
 else {
        resetUniformLocations(shader);
      }
    }
  }
}
