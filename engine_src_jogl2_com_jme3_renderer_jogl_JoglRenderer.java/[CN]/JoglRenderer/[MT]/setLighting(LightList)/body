{
  if (glslVer == -1) {
    GL gl=GLContext.getCurrentGL();
    if (list == null || list.size() == 0) {
      gl.glDisable(GLLightingFunc.GL_LIGHTING);
      return;
    }
    gl.glEnable(GLLightingFunc.GL_LIGHTING);
    gl.getGL2().glShadeModel(GLLightingFunc.GL_SMOOTH);
    float[] temp=new float[4];
    for (int i=0; i < list.size() + 1; i++) {
      int lightId=GLLightingFunc.GL_LIGHT0 + i;
      if (list.size() <= i) {
        gl.glDisable(lightId);
        break;
      }
      Light l=list.get(i);
      if (!l.isEnabled()) {
        gl.glDisable(lightId);
        continue;
      }
      ColorRGBA color=l.getColor();
      color.toArray(temp);
      gl.glEnable(lightId);
      gl.getGL2().glLightfv(lightId,GLLightingFunc.GL_DIFFUSE,temp,0);
      gl.getGL2().glLightfv(lightId,GLLightingFunc.GL_SPECULAR,temp,0);
      ColorRGBA.Black.toArray(temp);
      gl.getGL2().glLightfv(lightId,GLLightingFunc.GL_AMBIENT,temp,0);
switch (l.getType()) {
case Directional:
        DirectionalLight dl=(DirectionalLight)l;
      dl.getDirection().toArray(temp);
    temp[3]=0f;
  gl.getGL2().glLightfv(lightId,GLLightingFunc.GL_POSITION,temp,0);
break;
case Point:
PointLight pl=(PointLight)l;
pl.getPosition().toArray(temp);
temp[3]=1f;
gl.getGL2().glLightfv(lightId,GLLightingFunc.GL_POSITION,temp,0);
break;
}
}
}
}
