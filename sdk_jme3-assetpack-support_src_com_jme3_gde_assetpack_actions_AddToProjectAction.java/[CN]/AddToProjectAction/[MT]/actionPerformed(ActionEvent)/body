{
  ProjectAssetManager pm=context.getLookup().lookup(ProjectAssetManager.class);
  if (pm == null) {
    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,"AssetManager not found!");
    return;
  }
  Element assetElement=context.getLookup().lookup(Element.class);
  String type=assetElement.getAttribute("type");
  try {
    if ("model".equals(type) || "scene".equals(type)) {
      AssetConfiguration conf=new AssetConfiguration(assetElement);
      Spatial model=AssetPackLoader.loadAssetPackModel(pm,conf);
      if (model != null) {
        ProjectAssetManager mgr=ProjectSelection.getProjectAssetManager();
        if (mgr != null && mgr != pm) {
          FileObject modelFolder=mgr.getAssetFolder().getFileObject("Models");
          if (modelFolder == null) {
            modelFolder=mgr.getAssetFolder().createFolder("Models");
          }
          if (modelFolder.isFolder()) {
            AssetPackLoader.addModelFiles(pm,mgr,conf);
            SceneComposerTopComponent.findInstance().addModel(model);
            OutputStream out=modelFolder.createAndOpen(conf.getAssetElement().getAttribute("name") + ".j3o");
            BinaryExporter.getInstance().save(model,out);
            out.close();
            modelFolder.refresh();
          }
 else {
            Logger.getLogger(this.getClass().getName()).log(Level.WARNING,"Cannot copy, file 'Models' exists");
          }
        }
 else {
          Message msg=new NotifyDescriptor.Message("Please open a model from the destination\n" + "project in the SceneExplorer\n" + "to define the project.\n"+ "(temp. workaround)",NotifyDescriptor.ERROR_MESSAGE);
          DialogDisplayer.getDefault().notifyLater(msg);
        }
      }
 else {
        Logger.getLogger(this.getClass().getName()).log(Level.WARNING,"Error loading model");
      }
    }
 else {
      AssetConfiguration conf=new AssetConfiguration(assetElement);
      ProjectAssetManager mgr=ProjectSelection.getProjectAssetManager();
      AssetPackLoader.addAllFiles(pm,mgr,conf);
    }
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
}
