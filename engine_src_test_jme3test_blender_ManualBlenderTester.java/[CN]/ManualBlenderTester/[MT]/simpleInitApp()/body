{
  if (debug) {
    mouseInput.setCursorVisible(true);
  }
  assetManager.registerLocator(".",FileLocator.class);
  assetManager.registerLocator("./src/test-data/Blender/2.4x",FileLocator.class);
  assetManager.registerLocator("./src/test-data/Blender/2.4x/textures",FileLocator.class);
  assetManager.registerLocator("./src/test-data/Blender/2.5x",FileLocator.class);
  assetManager.registerLoader(BlenderLoader.class,"blend");
  assetManager.registerLoader(AWTLoader.class,"png","jpg","bmp");
  viewPort.setBackgroundColor(ColorRGBA.Gray);
  flyCam.setMoveSpeed(20);
  cam.setFrustumFar(1000.0f);
  cam.setFrustumNear(1.0f);
  ModelKey modelKey=blenderKeyConfiguration.getKeyToUse();
  AssetInfo ai=new AssetInfo(assetManager,modelKey){
    @Override public InputStream openStream(){
      try {
        return new FileInputStream(this.key.getName());
      }
 catch (      FileNotFoundException e) {
        LOGGER.log(Level.SEVERE,e.getMessage(),e);
        return null;
      }
    }
  }
;
  rootNode.attachChild(new Pivot(assetManager));
  if (modelKey instanceof BlenderKey) {
    this.testBlenderLoader(ai);
    List<String[]> selectedAnimations=blenderKeyConfiguration.getSelectedAnimations().get(modelKey.getName());
    if (selectedAnimations != null) {
      for (      String[] animData : selectedAnimations) {
        Spatial animatedSpatial=this.findNode(this.rootNode,animData[0]);
        if (animatedSpatial != null) {
          animatedSpatial.getControl(AnimControl.class).createChannel().setAnim(animData[1]);
        }
 else {
          LOGGER.warning("Cannot find the node to play its animation: " + animData[0]);
        }
      }
    }
  }
 else {
    this.testBlenderModelLoader(ai);
  }
  DirectionalLight sun=new DirectionalLight();
  sun.setDirection(new Vector3f(0,-10,0).normalizeLocal());
  sun.setColor(ColorRGBA.White);
  rootNode.addLight(sun);
}
