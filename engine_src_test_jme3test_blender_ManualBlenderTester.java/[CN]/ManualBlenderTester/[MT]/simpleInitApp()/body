{
  if (debug) {
    mouseInput.setCursorVisible(true);
  }
  assetManager.registerLocator(".",FileLocator.class);
  assetManager.registerLoader(BlenderLoader.class,"blend");
  assetManager.registerLoader(AWTLoader.class,"png");
  viewPort.setBackgroundColor(ColorRGBA.Gray);
  flyCam.setMoveSpeed(20);
  cam.setFrustumFar(1000.0f);
  cam.setFrustumNear(1.0f);
  AssetInfo ai=new AssetInfo(assetManager,modelKey){
    @Override public InputStream openStream(){
      try {
        return new FileInputStream(this.key.getName());
      }
 catch (      FileNotFoundException e) {
        LOGGER.log(Level.SEVERE,e.getMessage(),e);
        return null;
      }
    }
  }
;
  rootNode.attachChild(new Pivot(assetManager));
  if (modelKey instanceof BlenderKey) {
    this.testBlenderLoader(ai);
    Map<String,Map<String,int[]>> animations=((BlenderKey)modelKey).getAnimations();
    if (((BlenderKey)modelKey).getAnimations() != null) {
      for (      Entry<String,Map<String,int[]>> animEntry : animations.entrySet()) {
        for (        Entry<String,int[]> anim : animEntry.getValue().entrySet()) {
          Spatial animatedSpatial=this.findNode(this.rootNode,animEntry.getKey());
          if (animatedSpatial != null) {
            animatedSpatial.getControl(AnimControl.class).createChannel().setAnim(anim.getKey());
            break;
          }
        }
        break;
      }
    }
  }
 else {
    this.testBlenderModelLoader(ai);
  }
  DirectionalLight sun=new DirectionalLight();
  sun.setDirection(new Vector3f(0,-10,0).normalizeLocal());
  sun.setColor(ColorRGBA.White);
  rootNode.addLight(sun);
}
