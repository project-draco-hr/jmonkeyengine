{
  if (request.equals(sentRequest)) {
    currentRequest=request;
    if (editorController != null) {
      editorController.cleanup();
    }
    editorController=new SceneEditorController(request.getJmeNode(),request.getDataObject());
    setActivatedNodes(new org.openide.nodes.Node[]{request.getDataObject().getNodeDelegate()});
    setSceneInfo(request.getJmeNode(),editorController.getCurrentFileObject(),true);
    if (camController != null) {
      camController.disable();
    }
    if (toolController != null) {
      toolController.cleanup();
    }
    toolController=new SceneComposerToolController(request.getToolNode(),request.getManager(),request.getJmeNode());
    camController=new ComposerCameraController(SceneApplication.getApplication().getCamera(),request.getJmeNode());
    toolController.setEditorController(editorController);
    camController.setToolController(toolController);
    camController.setMaster(this);
    camController.enable();
    toolController.createOnTopToolNode();
    SelectTool tool=new SelectTool();
    toolController.showEditTool(tool);
    toolController.setShowSelection(true);
    toolController.setShowGrid(true);
    editorController.setToolController(toolController);
    toolController.refreshNonSpatialMarkers();
    toolController.setCamController(camController);
    editorController.setTerrainLodCamera();
    final SpatialAssetDataObject dobj=((SpatialAssetDataObject)currentRequest.getDataObject());
    listener=new ProjectAssetManager.ClassPathChangeListener(){
      public void classPathChanged(      final ProjectAssetManager manager){
        if (dobj.isModified()) {
          Confirmation msg=new NotifyDescriptor.Confirmation("Classes have been changed, save and reload scene?",NotifyDescriptor.OK_CANCEL_OPTION,NotifyDescriptor.INFORMATION_MESSAGE);
          Object result=DialogDisplayer.getDefault().notify(msg);
          if (!NotifyDescriptor.OK_OPTION.equals(result)) {
            return;
          }
          try {
            dobj.saveAsset();
          }
 catch (          IOException ex) {
            Exceptions.printStackTrace(ex);
          }
        }
        Runnable call=new Runnable(){
          public void run(){
            ProgressHandle progressHandle=ProgressHandleFactory.createHandle("Reloading Scene..");
            progressHandle.start();
            try {
              manager.clearCache();
              final Spatial asset=dobj.loadAsset();
              if (asset != null) {
                java.awt.EventQueue.invokeLater(new Runnable(){
                  public void run(){
                    SceneComposerTopComponent composer=SceneComposerTopComponent.findInstance();
                    composer.openScene(asset,dobj,manager);
                  }
                }
);
              }
 else {
                Confirmation msg=new NotifyDescriptor.Confirmation("Error opening " + dobj.getPrimaryFile().getNameExt(),NotifyDescriptor.OK_CANCEL_OPTION,NotifyDescriptor.ERROR_MESSAGE);
                DialogDisplayer.getDefault().notify(msg);
              }
            }
  finally {
              progressHandle.finish();
            }
          }
        }
;
        new Thread(call).start();
      }
    }
;
  }
}
