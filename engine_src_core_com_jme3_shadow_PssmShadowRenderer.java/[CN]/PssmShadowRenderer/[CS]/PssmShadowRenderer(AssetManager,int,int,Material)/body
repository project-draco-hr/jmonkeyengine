{
  assetManager=manager;
  nbSplits=Math.max(Math.min(nbSplits,4),1);
  this.nbSplits=nbSplits;
  shadowFB=new FrameBuffer[nbSplits];
  shadowMaps=new Texture2D[nbSplits];
  dispPic=new Picture[nbSplits];
  lightViewProjectionsMatrices=new Matrix4f[nbSplits];
  splits=new ColorRGBA();
  splitsArray=new float[nbSplits + 1];
  dummyTex=new Texture2D(size,size,Format.RGBA8);
  preshadowMat=new Material(manager,"Common/MatDefs/Shadow/PreShadow.j3md");
  this.postshadowMat=postShadowMat;
  for (int i=0; i < nbSplits; i++) {
    lightViewProjectionsMatrices[i]=new Matrix4f();
    shadowFB[i]=new FrameBuffer(size,size,1);
    shadowMaps[i]=new Texture2D(size,size,Format.Depth);
    shadowFB[i].setDepthTexture(shadowMaps[i]);
    shadowFB[i].setColorTexture(dummyTex);
    postshadowMat.setTexture("ShadowMap" + i,shadowMaps[i]);
    dispPic[i]=new Picture("Picture" + i);
    dispPic[i].setTexture(manager,shadowMaps[i],false);
  }
  setCompareMode(CompareMode.Hardware);
  setFilterMode(FilterMode.Bilinear);
  setShadowIntensity(0.7f);
  shadowCam=new Camera(size,size);
  shadowCam.setParallelProjection(true);
  for (int i=0; i < points.length; i++) {
    points[i]=new Vector3f();
  }
  state.setBlendMode(RenderState.BlendMode.Modulate);
  state.setFaceCullMode(RenderState.FaceCullMode.Off);
  state.setDepthWrite(false);
  state.setPolyOffset(-0.1f,0);
}
