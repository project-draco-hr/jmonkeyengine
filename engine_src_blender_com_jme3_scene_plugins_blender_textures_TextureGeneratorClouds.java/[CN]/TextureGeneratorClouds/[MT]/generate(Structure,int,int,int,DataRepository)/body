{
  float wDelta=1.0f / width, hDelta=1.0f / height, dDelta=1.0f / depth;
  float[] texvec=new float[]{0,0,0};
  TexResult texres=new TexResult();
  float noisesize=((Number)tex.getFieldValue("noisesize")).floatValue();
  int noiseDepth=((Number)tex.getFieldValue("noisedepth")).intValue();
  int noiseBasis=((Number)tex.getFieldValue("noisebasis")).intValue();
  int noiseType=((Number)tex.getFieldValue("noisetype")).intValue();
  float contrast=((Number)tex.getFieldValue("contrast")).floatValue();
  float bright=((Number)tex.getFieldValue("bright")).floatValue();
  boolean isHard=noiseType != NoiseGenerator.TEX_NOISESOFT;
  int sType=((Number)tex.getFieldValue("stype")).intValue();
  int halfW=width, halfH=height, halfD=depth;
  width<<=1;
  height<<=1;
  depth<<=1;
  ColorBand colorBand=this.readColorband(tex,dataRepository);
  Format format=sType == NoiseGenerator.TEX_COLOR || colorBand != null ? Format.RGB8 : Format.Luminance8;
  int bytesPerPixel=sType == NoiseGenerator.TEX_COLOR || colorBand != null ? 3 : 1;
  ByteBuffer data=BufferUtils.createByteBuffer(width * height * depth* bytesPerPixel);
  for (int i=-halfW; i < halfW; ++i) {
    texvec[0]=wDelta * i;
    for (int j=-halfH; j < halfH; ++j) {
      texvec[1]=hDelta * j;
      for (int k=-halfD; k < halfD; ++k) {
        texvec[2]=dDelta * k;
        texres.tin=noiseGenerator.bliGTurbulence(noisesize,texvec[0],texvec[1],texvec[2],noiseDepth,isHard,noiseBasis);
        if (colorBand != null) {
          noiseGenerator.doColorband(colorBand,texres,dataRepository);
          if (texres.nor != null) {
            float nabla=((Number)tex.getFieldValue("nabla")).floatValue();
            texres.nor[0]=noiseGenerator.bliGTurbulence(noisesize,texvec[0] + nabla,texvec[1],texvec[2],noiseDepth,isHard,noiseBasis);
            texres.nor[1]=noiseGenerator.bliGTurbulence(noisesize,texvec[0],texvec[1] + nabla,texvec[2],noiseDepth,isHard,noiseBasis);
            texres.nor[2]=noiseGenerator.bliGTurbulence(noisesize,texvec[0],texvec[1],texvec[2] + nabla,noiseDepth,isHard,noiseBasis);
            noiseGenerator.texNormalDerivate(colorBand,texres,dataRepository);
          }
          noiseGenerator.brightnesAndContrastRGB(tex,texres);
          data.put((byte)(texres.tr * 255.0f));
          data.put((byte)(texres.tg * 255.0f));
          data.put((byte)(texres.tb * 255.0f));
        }
 else         if (sType == NoiseGenerator.TEX_COLOR) {
          texres.tr=texres.tin;
          texres.tg=noiseGenerator.bliGTurbulence(noisesize,texvec[1],texvec[0],texvec[2],noiseDepth,isHard,noiseBasis);
          texres.tb=noiseGenerator.bliGTurbulence(noisesize,texvec[1],texvec[2],texvec[0],noiseDepth,isHard,noiseBasis);
          noiseGenerator.brightnesAndContrastRGB(tex,texres);
          data.put((byte)(texres.tr * 255.0f));
          data.put((byte)(texres.tg * 255.0f));
          data.put((byte)(texres.tb * 255.0f));
        }
 else {
          noiseGenerator.brightnesAndContrast(texres,contrast,bright);
          data.put((byte)(texres.tin * 255));
        }
      }
    }
  }
  ArrayList<ByteBuffer> dataArray=new ArrayList<ByteBuffer>(1);
  dataArray.add(data);
  return new Texture3D(new Image(format,width,height,depth,dataArray));
}
