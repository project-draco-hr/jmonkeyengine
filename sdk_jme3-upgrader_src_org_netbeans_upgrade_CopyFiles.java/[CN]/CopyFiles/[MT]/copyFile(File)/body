{
  String relativePath=getRelativePath(sourceRoot,sourceFile);
  currentProperties=null;
  boolean includeFile=false;
  Set<String> includeKeys=new HashSet<String>();
  Set<String> excludeKeys=new HashSet<String>();
  for (  String pattern : includePatterns) {
    if (pattern.contains("#")) {
      includeKeys.addAll(matchingKeys(relativePath,pattern));
    }
 else {
      if (relativePath.matches(pattern)) {
        includeFile=true;
        includeKeys.clear();
        break;
      }
    }
  }
  if (includeFile || !includeKeys.isEmpty()) {
    for (    String pattern : excludePatterns) {
      if (pattern.contains("#")) {
        excludeKeys.addAll(matchingKeys(relativePath,pattern));
      }
 else {
        if (relativePath.matches(pattern)) {
          includeFile=false;
          includeKeys.clear();
          break;
        }
      }
    }
  }
  LOGGER.log(Level.FINEST,"{0}, includeFile={1}, includeKeys={2}, excludeKeys={3}",new Object[]{relativePath,includeFile,includeKeys,excludeKeys});
  if (!includeFile && includeKeys.isEmpty()) {
    return;
  }
  if (relativePath.startsWith(ORIG_CSSSP)) {
    relativePath=TARG_CSSSP + relativePath.substring(ORIG_CSSSP.length());
  }
  File targetFile=new File(targetRoot,relativePath);
  LOGGER.log(Level.FINE,"Path: {0}",relativePath);
  if (includeKeys.isEmpty() && excludeKeys.isEmpty()) {
    copyFile(sourceFile,targetFile);
  }
 else {
    if (!includeKeys.isEmpty()) {
      currentProperties.keySet().retainAll(includeKeys);
    }
    currentProperties.keySet().removeAll(excludeKeys);
    LOGGER.log(Level.FINE,"  Only keys: {0}",currentProperties.keySet());
    OutputStream out=null;
    try {
      ensureParent(targetFile);
      out=new FileOutputStream(targetFile);
      currentProperties.store(out);
    }
  finally {
      if (out != null) {
        out.close();
      }
    }
  }
}
