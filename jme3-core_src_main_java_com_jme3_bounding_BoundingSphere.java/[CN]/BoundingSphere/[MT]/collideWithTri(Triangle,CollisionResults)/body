{
  TempVars tvars=TempVars.get();
  try {
    Vector3f a=tri.get1().subtract(center,tvars.vect1);
    Vector3f b=tri.get2().subtract(center,tvars.vect2);
    Vector3f c=tri.get3().subtract(center,tvars.vect3);
    Vector3f ab=b.subtract(a,tvars.vect4);
    Vector3f ac=c.subtract(a,tvars.vect5);
    Vector3f n=ab.cross(ac,tvars.vect6);
    float d=a.dot(n);
    float e=n.dot(n);
    if (d * d > radius * radius * e) {
      return 0;
    }
    Vector3f v0=ac;
    Vector3f v1=ab;
    Vector3f v2=a;
    float dot00=v0.dot(v0);
    float dot01=v0.dot(v1);
    float dot02=-v0.dot(v2);
    float dot11=v1.dot(v1);
    float dot12=-v1.dot(v2);
    float invDenom=1 / (dot00 * dot11 - dot01 * dot01);
    float u=(dot11 * dot02 - dot01 * dot12) * invDenom;
    float v=(dot00 * dot12 - dot01 * dot02) * invDenom;
    if (u >= 0 && v >= 0 && (u + v) < 1) {
      Vector3f part1=ac;
      Vector3f part2=ab;
      Vector3f p=center.add(a.add(part1.mult(u)).addLocal(part2.mult(v)));
      CollisionResult r=new CollisionResult();
      r.setDistance((float)Math.sqrt(d) - radius);
      r.setContactNormal(n.normalize());
      r.setContactPoint(p);
      results.addCollision(r);
      return 1;
    }
    Vector3f nearestPt=null;
    float nearestDist=radius * radius;
    Vector3f base;
    Vector3f edge;
    float t;
    base=a;
    edge=ab;
    t=-edge.dot(base) / edge.dot(edge);
    if (t >= 0 && t <= 1) {
      Vector3f Q=base.add(edge.mult(t,tvars.vect7),tvars.vect8);
      float distSq=Q.dot(Q);
      if (distSq < nearestDist) {
        nearestPt=Q;
        nearestDist=distSq;
      }
    }
    base=a;
    edge=ac;
    t=-edge.dot(base) / edge.dot(edge);
    if (t >= 0 && t <= 1) {
      Vector3f Q=base.add(edge.mult(t,tvars.vect7),tvars.vect9);
      float distSq=Q.dot(Q);
      if (distSq < nearestDist) {
        nearestPt=Q;
        nearestDist=distSq;
      }
    }
    base=b;
    Vector3f bc=c.subtract(b);
    edge=bc;
    t=-edge.dot(base) / edge.dot(edge);
    if (t >= 0 && t <= 1) {
      Vector3f Q=base.add(edge.mult(t,tvars.vect7),tvars.vect10);
      float distSq=Q.dot(Q);
      if (distSq < nearestDist) {
        nearestPt=Q;
        nearestDist=distSq;
      }
    }
    if (nearestPt != null) {
      float dist=FastMath.sqrt(nearestDist);
      Vector3f cn=nearestPt.divide(-dist);
      CollisionResult r=new CollisionResult();
      r.setDistance(dist);
      r.setContactNormal(cn);
      r.setContactPoint(nearestPt.add(center));
      results.addCollision(r);
      return 1;
    }
    base=a;
    t=base.dot(base);
    if (t < nearestDist) {
      nearestDist=t;
      nearestPt=base;
    }
    base=b;
    t=base.dot(base);
    if (t < nearestDist) {
      nearestDist=t;
      nearestPt=base;
    }
    base=c;
    t=base.dot(base);
    if (t < nearestDist) {
      nearestDist=t;
      nearestPt=base;
    }
    if (nearestPt != null) {
      float dist=FastMath.sqrt(nearestDist);
      Vector3f cn=nearestPt.divide(-dist);
      CollisionResult r=new CollisionResult();
      r.setDistance(dist);
      r.setContactNormal(cn);
      r.setContactPoint(nearestPt.add(center));
      results.addCollision(r);
      return 1;
    }
    return 0;
  }
  finally {
    tvars.release();
  }
}
