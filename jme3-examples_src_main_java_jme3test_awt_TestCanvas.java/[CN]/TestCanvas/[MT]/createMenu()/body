{
  JMenuBar menuBar=new JMenuBar();
  frame.setJMenuBar(menuBar);
  JMenu menuTortureMethods=new JMenu("Canvas Torture Methods");
  menuBar.add(menuTortureMethods);
  final JMenuItem itemRemoveCanvas=new JMenuItem("Remove Canvas");
  menuTortureMethods.add(itemRemoveCanvas);
  itemRemoveCanvas.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (itemRemoveCanvas.getText().equals("Remove Canvas")) {
        currentPanel.remove(canvas);
        itemRemoveCanvas.setText("Add Canvas");
      }
 else       if (itemRemoveCanvas.getText().equals("Add Canvas")) {
        currentPanel.add(canvas,BorderLayout.CENTER);
        itemRemoveCanvas.setText("Remove Canvas");
      }
    }
  }
);
  final JMenuItem itemHideCanvas=new JMenuItem("Hide Canvas");
  menuTortureMethods.add(itemHideCanvas);
  itemHideCanvas.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (itemHideCanvas.getText().equals("Hide Canvas")) {
        canvas.setVisible(false);
        itemHideCanvas.setText("Show Canvas");
      }
 else       if (itemHideCanvas.getText().equals("Show Canvas")) {
        canvas.setVisible(true);
        itemHideCanvas.setText("Hide Canvas");
      }
    }
  }
);
  final JMenuItem itemSwitchTab=new JMenuItem("Switch to tab #2");
  menuTortureMethods.add(itemSwitchTab);
  itemSwitchTab.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (itemSwitchTab.getText().equals("Switch to tab #2")) {
        canvasPanel1.remove(canvas);
        canvasPanel2.add(canvas,BorderLayout.CENTER);
        currentPanel=canvasPanel2;
        itemSwitchTab.setText("Switch to tab #1");
      }
 else       if (itemSwitchTab.getText().equals("Switch to tab #1")) {
        canvasPanel2.remove(canvas);
        canvasPanel1.add(canvas,BorderLayout.CENTER);
        currentPanel=canvasPanel1;
        itemSwitchTab.setText("Switch to tab #2");
      }
    }
  }
);
  JMenuItem itemSwitchLaf=new JMenuItem("Switch Look and Feel");
  menuTortureMethods.add(itemSwitchLaf);
  itemSwitchLaf.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
      SwingUtilities.updateComponentTreeUI(frame);
      frame.pack();
    }
  }
);
  JMenuItem itemSmallSize=new JMenuItem("Set size to (0, 0)");
  menuTortureMethods.add(itemSmallSize);
  itemSmallSize.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Dimension preferred=frame.getPreferredSize();
      frame.setPreferredSize(new Dimension(0,0));
      frame.pack();
      frame.setPreferredSize(preferred);
    }
  }
);
  JMenuItem itemKillCanvas=new JMenuItem("Stop/Start Canvas");
  menuTortureMethods.add(itemKillCanvas);
  itemKillCanvas.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      currentPanel.remove(canvas);
      app.stop(true);
      createCanvas(appClass);
      currentPanel.add(canvas,BorderLayout.CENTER);
      frame.pack();
      startApp();
    }
  }
);
  JMenuItem itemExit=new JMenuItem("Exit");
  menuTortureMethods.add(itemExit);
  itemExit.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ae){
      frame.dispose();
      app.stop();
    }
  }
);
}
