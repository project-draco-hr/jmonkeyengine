{
  try {
    ModelKey modelKey=(ModelKey)assetInfo.getKey();
    BlenderKey blenderKey;
    if (modelKey instanceof BlenderKey) {
      blenderKey=(BlenderKey)modelKey;
    }
 else {
      blenderKey=new BlenderKey(modelKey.getName());
      blenderKey.setAssetRootPath(modelKey.getFolder());
    }
    BlenderInputStream inputStream=new BlenderInputStream(assetInfo.openStream(),assetInfo.getManager());
    List<FileBlockHeader> blocks=new ArrayList<FileBlockHeader>();
    FileBlockHeader fileBlock;
    DataRepository dataRepository=new DataRepository();
    dataRepository.setAssetManager(assetInfo.getManager());
    dataRepository.setInputStream(inputStream);
    dataRepository.setBlenderKey(blenderKey);
    dataRepository.putHelper(ArmatureHelper.class,new ArmatureHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(TextureHelper.class,new TextureHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(MeshHelper.class,new MeshHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(ObjectHelper.class,new ObjectHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(CurvesHelper.class,new CurvesHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(LightHelper.class,new LightHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(CameraHelper.class,new CameraHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(ModifierHelper.class,new ModifierHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(MaterialHelper.class,new MaterialHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(ConstraintHelper.class,new ConstraintHelper(inputStream.getVersionNumber(),dataRepository));
    dataRepository.putHelper(IpoHelper.class,new IpoHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(NoiseHelper.class,new NoiseHelper(inputStream.getVersionNumber()));
    dataRepository.putHelper(ParticlesHelper.class,new ParticlesHelper(inputStream.getVersionNumber()));
    if (blenderKey.isFixUpAxis()) {
      ObjectHelper objectHelper=dataRepository.getHelper(ObjectHelper.class);
      objectHelper.setyIsUpAxis(true);
      CurvesHelper curvesHelper=dataRepository.getHelper(CurvesHelper.class);
      curvesHelper.setyIsUpAxis(true);
    }
    MaterialHelper materialHelper=dataRepository.getHelper(MaterialHelper.class);
    materialHelper.setFaceCullMode(blenderKey.getFaceCullMode());
    do {
      fileBlock=new FileBlockHeader(inputStream,dataRepository);
      if (!fileBlock.isDnaBlock()) {
        blocks.add(fileBlock);
      }
    }
 while (!fileBlock.isLastBlock());
    JmeConverter converter=new JmeConverter(dataRepository);
    LoadingResults loadingResults=blenderKey.prepareLoadingResults();
    WorldData worldData=null;
    for (    FileBlockHeader block : blocks) {
switch (block.getCode()) {
case FileBlockHeader.BLOCK_OB00:
        Object object=converter.toObject(block.getStructure(dataRepository));
      if (object instanceof Node) {
        if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.OBJECTS) != 0) {
          LOGGER.log(Level.INFO,"{0}: {1}--> {2}",new Object[]{((Node)object).getName(),((Node)object).getLocalTranslation().toString(),((Node)object).getParent() == null ? "null" : ((Node)object).getParent().getName()});
          if (((Node)object).getParent() == null) {
            loadingResults.addObject((Node)object);
          }
        }
      }
 else       if (object instanceof Camera) {
        if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.CAMERAS) != 0) {
          loadingResults.addCamera((Camera)object);
        }
      }
 else       if (object instanceof Light) {
        if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.LIGHTS) != 0) {
          loadingResults.addLight((Light)object);
        }
      }
    break;
case FileBlockHeader.BLOCK_MA00:
  if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.MATERIALS) != 0) {
    loadingResults.addMaterial(converter.toMaterial(block.getStructure(dataRepository)));
  }
break;
case FileBlockHeader.BLOCK_SC00:
if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.SCENES) != 0) {
loadingResults.addScene(converter.toScene(block.getStructure(dataRepository)));
}
break;
case FileBlockHeader.BLOCK_WO00:
if (worldData == null) {
Structure worldStructure=block.getStructure(dataRepository);
String worldName=worldStructure.getName();
if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {
worldData=converter.toWorldData(worldStructure);
if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.LIGHTS) != 0) {
loadingResults.addLight(worldData.getAmbientLight());
}
}
}
break;
}
}
try {
inputStream.close();
}
 catch (IOException e) {
LOGGER.log(Level.SEVERE,e.getMessage(),e);
}
return loadingResults;
}
 catch (BlenderFileException e) {
LOGGER.log(Level.SEVERE,e.getMessage(),e);
}
return null;
}
