{
  try {
    this.setup(assetInfo);
    LoadingResults loadingResults=blenderKey.prepareLoadingResults();
    WorldData worldData=null;
    for (    FileBlockHeader block : blocks) {
switch (block.getCode()) {
case FileBlockHeader.BLOCK_OB00:
        Object object=converter.toObject(block.getStructure(blenderContext));
      if (object instanceof Node) {
        if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.OBJECTS) != 0) {
          LOGGER.log(Level.INFO,"{0}: {1}--> {2}",new Object[]{((Node)object).getName(),((Node)object).getLocalTranslation().toString(),((Node)object).getParent() == null ? "null" : ((Node)object).getParent().getName()});
          if (((Node)object).getParent() == null) {
            loadingResults.addObject((Node)object);
          }
        }
      }
 else       if (object instanceof Camera) {
        if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.CAMERAS) != 0) {
          loadingResults.addCamera((Camera)object);
        }
      }
 else       if (object instanceof Light) {
        if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.LIGHTS) != 0) {
          loadingResults.addLight((Light)object);
        }
      }
    break;
case FileBlockHeader.BLOCK_MA00:
  if (blenderKey.isLoadUnlinkedAssets() && (blenderKey.getFeaturesToLoad() & FeaturesToLoad.MATERIALS) != 0) {
    loadingResults.addMaterial(converter.toMaterial(block.getStructure(blenderContext)));
  }
break;
case FileBlockHeader.BLOCK_SC00:
if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.SCENES) != 0) {
loadingResults.addScene(converter.toScene(block.getStructure(blenderContext)));
}
break;
case FileBlockHeader.BLOCK_WO00:
if (blenderKey.isLoadUnlinkedAssets() && worldData == null) {
Structure worldStructure=block.getStructure(blenderContext);
String worldName=worldStructure.getName();
if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {
worldData=converter.toWorldData(worldStructure);
if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.LIGHTS) != 0) {
loadingResults.addLight(worldData.getAmbientLight());
}
}
}
break;
}
}
try {
inputStream.close();
}
 catch (IOException e) {
LOGGER.log(Level.SEVERE,e.getMessage(),e);
}
return loadingResults;
}
 catch (BlenderFileException e) {
LOGGER.log(Level.SEVERE,e.getMessage(),e);
}
return null;
}
