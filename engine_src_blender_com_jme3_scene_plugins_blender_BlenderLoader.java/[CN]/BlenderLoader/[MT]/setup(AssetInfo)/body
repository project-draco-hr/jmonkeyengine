{
  ModelKey modelKey=(ModelKey)assetInfo.getKey();
  if (modelKey instanceof BlenderKey) {
    blenderKey=(BlenderKey)modelKey;
  }
 else {
    blenderKey=new BlenderKey(modelKey.getName());
    blenderKey.setAssetRootPath(modelKey.getFolder());
  }
  inputStream=new BlenderInputStream(assetInfo.openStream(),assetInfo.getManager());
  blocks=new ArrayList<FileBlockHeader>();
  FileBlockHeader fileBlock;
  dataRepository=new DataRepository();
  dataRepository.setAssetManager(assetInfo.getManager());
  dataRepository.setInputStream(inputStream);
  dataRepository.setBlenderKey(blenderKey);
  dataRepository.putHelper(ArmatureHelper.class,new ArmatureHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(TextureHelper.class,new TextureHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(MeshHelper.class,new MeshHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(ObjectHelper.class,new ObjectHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(CurvesHelper.class,new CurvesHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(LightHelper.class,new LightHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(CameraHelper.class,new CameraHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(ModifierHelper.class,new ModifierHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(MaterialHelper.class,new MaterialHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(ConstraintHelper.class,new ConstraintHelper(inputStream.getVersionNumber(),dataRepository));
  dataRepository.putHelper(IpoHelper.class,new IpoHelper(inputStream.getVersionNumber()));
  dataRepository.putHelper(ParticlesHelper.class,new ParticlesHelper(inputStream.getVersionNumber()));
  if (blenderKey.isFixUpAxis()) {
    ObjectHelper objectHelper=dataRepository.getHelper(ObjectHelper.class);
    objectHelper.setyIsUpAxis(true);
    CurvesHelper curvesHelper=dataRepository.getHelper(CurvesHelper.class);
    curvesHelper.setyIsUpAxis(true);
  }
  MaterialHelper materialHelper=dataRepository.getHelper(MaterialHelper.class);
  materialHelper.setFaceCullMode(blenderKey.getFaceCullMode());
  FileBlockHeader sceneFileBlock=null;
  do {
    fileBlock=new FileBlockHeader(inputStream,dataRepository);
    if (!fileBlock.isDnaBlock()) {
      blocks.add(fileBlock);
      if (fileBlock.getCode() == FileBlockHeader.BLOCK_SC00 && blenderKey.getLayersToLoad() < 0) {
        sceneFileBlock=fileBlock;
      }
    }
  }
 while (!fileBlock.isLastBlock());
  if (sceneFileBlock != null) {
    int lay=((Number)sceneFileBlock.getStructure(dataRepository).getFieldValue("lay")).intValue();
    dataRepository.getBlenderKey().setLayersToLoad(lay);
  }
  converter=new JmeConverter(dataRepository);
}
