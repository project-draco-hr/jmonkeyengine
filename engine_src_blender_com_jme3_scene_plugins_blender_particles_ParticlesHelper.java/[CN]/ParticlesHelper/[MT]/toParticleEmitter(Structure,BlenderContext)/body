{
  ParticleEmitter result=null;
  Pointer pParticleSettings=(Pointer)particleSystem.getFieldValue("part");
  if (pParticleSettings.isNotNull()) {
    Structure particleSettings=pParticleSettings.fetchData(blenderContext.getInputStream()).get(0);
    int totPart=((Number)particleSettings.getFieldValue("totpart")).intValue();
    int drawAs=((Number)particleSettings.getFieldValue("draw_as")).intValue();
    char nameSuffix;
switch (drawAs) {
case PART_DRAW_NOT:
      nameSuffix='N';
    totPart=0;
  break;
case PART_DRAW_BB:
nameSuffix='B';
break;
case PART_DRAW_OB:
case PART_DRAW_GR:
nameSuffix='P';
LOGGER.warning("Neither object nor group particles supported yet! Using point representation instead!");
break;
case PART_DRAW_LINE:
nameSuffix='L';
LOGGER.warning("Lines not yet supported! Using point representation instead!");
default :
nameSuffix='P';
}
result=new ParticleEmitter(particleSettings.getName() + nameSuffix,Type.Triangle,totPart);
if (nameSuffix == 'N') {
return result;
}
int from=((Number)particleSettings.getFieldValue("from")).intValue();
switch (from) {
case PART_FROM_VERT:
result.setShape(new EmitterMeshVertexShape());
break;
case PART_FROM_FACE:
result.setShape(new EmitterMeshFaceShape());
break;
case PART_FROM_VOLUME:
result.setShape(new EmitterMeshConvexHullShape());
break;
default :
LOGGER.warning("Default shape used! Unknown emitter shape value ('from' parameter: " + from + ')');
}
DynamicArray<Number> acc=(DynamicArray<Number>)particleSettings.getFieldValue("acc");
result.setGravity(-acc.get(0).floatValue(),-acc.get(1).floatValue(),-acc.get(2).floatValue());
result.setEndColor(new ColorRGBA(1f,1f,1f,1f));
result.setStartColor(new ColorRGBA(1f,1f,1f,1f));
float sizeFactor=nameSuffix == 'B' ? 1.0f : 0.3f;
float size=((Number)particleSettings.getFieldValue("size")).floatValue() * sizeFactor;
result.setStartSize(size);
result.setEndSize(size);
int fps=blenderContext.getBlenderKey().getFps();
float lifetime=((Number)particleSettings.getFieldValue("lifetime")).floatValue() / fps;
float randlife=((Number)particleSettings.getFieldValue("randlife")).floatValue() / fps;
result.setLowLife(lifetime * (1.0f - randlife));
result.setHighLife(lifetime);
ParticleInfluencer influencer;
int phystype=((Number)particleSettings.getFieldValue("phystype")).intValue();
switch (phystype) {
case PART_PHYS_NEWTON:
influencer=new NewtonianParticleInfluencer();
((NewtonianParticleInfluencer)influencer).setNormalVelocity(((Number)particleSettings.getFieldValue("normfac")).floatValue());
((NewtonianParticleInfluencer)influencer).setVelocityVariation(((Number)particleSettings.getFieldValue("randfac")).floatValue());
((NewtonianParticleInfluencer)influencer).setSurfaceTangentFactor(((Number)particleSettings.getFieldValue("tanfac")).floatValue());
((NewtonianParticleInfluencer)influencer).setSurfaceTangentRotation(((Number)particleSettings.getFieldValue("tanphase")).floatValue());
break;
case PART_PHYS_BOIDS:
case PART_PHYS_KEYED:
LOGGER.warning("Boids and Keyed particles physic not yet supported! Empty influencer used!");
case PART_PHYS_NO:
default :
influencer=new EmptyParticleInfluencer();
}
result.setParticleInfluencer(influencer);
}
return result;
}
