{
  Object loadedResult=blenderContext.getLoadedFeature(objectStructure.getOldMemoryAddress(),LoadedDataType.FEATURE);
  if (loadedResult != null) {
    return loadedResult;
  }
  LOGGER.fine("Loading blender object.");
  if ("ID".equals(objectStructure.getType())) {
    Node object=(Node)this.loadLibrary(objectStructure);
    if (object.getParent() != null) {
      LOGGER.log(Level.FINEST,"Detaching object {0}, loaded from external file, from its parent.",object);
      object.getParent().detachChild(object);
    }
    return object;
  }
  int type=((Number)objectStructure.getFieldValue("type")).intValue();
  ObjectType objectType=ObjectType.valueOf(type);
  LOGGER.log(Level.FINE,"Type of the object: {0}.",objectType);
  int lay=((Number)objectStructure.getFieldValue("lay")).intValue();
  if ((lay & blenderContext.getBlenderKey().getLayersToLoad()) == 0) {
    LOGGER.fine("The layer this object is located in is not included in loading.");
    return null;
  }
  blenderContext.pushParent(objectStructure);
  String name=objectStructure.getName();
  LOGGER.log(Level.FINE,"Loading obejct: {0}",name);
  int restrictflag=((Number)objectStructure.getFieldValue("restrictflag")).intValue();
  boolean visible=(restrictflag & 0x01) != 0;
  Pointer pParent=(Pointer)objectStructure.getFieldValue("parent");
  Object parent=blenderContext.getLoadedFeature(pParent.getOldMemoryAddress(),LoadedDataType.FEATURE);
  if (parent == null && pParent.isNotNull()) {
    Structure parentStructure=pParent.fetchData().get(0);
    parent=this.toObject(parentStructure,blenderContext);
  }
  Transform t=this.getTransformation(objectStructure,blenderContext);
  LOGGER.log(Level.FINE,"Importing object of type: {0}",objectType);
  Node result=null;
  try {
switch (objectType) {
case LATTICE:
case METABALL:
case TEXT:
case WAVE:
      LOGGER.log(Level.WARNING,"{0} type is not supported but the node will be returned in order to keep parent - child relationship.",objectType);
case EMPTY:
case ARMATURE:
    result=new Node(name);
  break;
case MESH:
result=new Node(name);
MeshHelper meshHelper=blenderContext.getHelper(MeshHelper.class);
Pointer pMesh=(Pointer)objectStructure.getFieldValue("data");
List<Structure> meshesArray=pMesh.fetchData();
TemporalMesh temporalMesh=meshHelper.toTemporalMesh(meshesArray.get(0),blenderContext);
if (temporalMesh != null) {
result.attachChild(temporalMesh);
}
break;
case SURF:
case CURVE:
result=new Node(name);
Pointer pCurve=(Pointer)objectStructure.getFieldValue("data");
if (pCurve.isNotNull()) {
CurvesHelper curvesHelper=blenderContext.getHelper(CurvesHelper.class);
Structure curveData=pCurve.fetchData().get(0);
TemporalMesh curvesTemporalMesh=curvesHelper.toCurve(curveData,blenderContext);
if (curvesTemporalMesh != null) {
result.attachChild(curvesTemporalMesh);
}
}
break;
case LAMP:
Pointer pLamp=(Pointer)objectStructure.getFieldValue("data");
if (pLamp.isNotNull()) {
LightHelper lightHelper=blenderContext.getHelper(LightHelper.class);
List<Structure> lampsArray=pLamp.fetchData();
Light light=lightHelper.toLight(lampsArray.get(0),blenderContext);
if (light == null) {
result=new Node(name);
}
 else {
result=new LightNode(name,light);
}
}
break;
case CAMERA:
Pointer pCamera=(Pointer)objectStructure.getFieldValue("data");
if (pCamera.isNotNull()) {
CameraHelper cameraHelper=blenderContext.getHelper(CameraHelper.class);
List<Structure> camerasArray=pCamera.fetchData();
Camera camera=cameraHelper.toCamera(camerasArray.get(0),blenderContext);
if (camera == null) {
result=new Node(name);
}
 else {
result=new CameraNode(name,camera);
}
}
break;
default :
LOGGER.log(Level.WARNING,"Unsupported object type: {0}",type);
}
if (result != null) {
LOGGER.fine("Storing loaded feature in blender context and applying markers (those will be removed before the final result is released).");
Long oma=objectStructure.getOldMemoryAddress();
blenderContext.addLoadedFeatures(oma,LoadedDataType.STRUCTURE,objectStructure);
blenderContext.addLoadedFeatures(oma,LoadedDataType.FEATURE,result);
blenderContext.addMarker(OMA_MARKER,result,objectStructure.getOldMemoryAddress());
if (objectType == ObjectType.ARMATURE) {
blenderContext.addMarker(ARMATURE_NODE_MARKER,result,Boolean.TRUE);
}
result.setLocalTransform(t);
result.setCullHint(visible ? CullHint.Always : CullHint.Inherit);
if (parent instanceof Node) {
((Node)parent).attachChild(result);
}
LOGGER.fine("Reading and applying object's modifiers.");
ModifierHelper modifierHelper=blenderContext.getHelper(ModifierHelper.class);
Collection<Modifier> modifiers=modifierHelper.readModifiers(objectStructure,blenderContext);
for (Modifier modifier : modifiers) {
modifier.apply(result,blenderContext);
}
if (result.getChildren() != null && result.getChildren().size() > 0) {
if (result.getChildren().size() == 1 && result.getChild(0) instanceof TemporalMesh) {
LOGGER.fine("Converting temporal mesh into jme geometries.");
((TemporalMesh)result.getChild(0)).toGeometries();
}
LOGGER.fine("Applying proper scale to the geometries.");
for (Spatial child : result.getChildren()) {
if (child instanceof Geometry) {
this.flipMeshIfRequired((Geometry)child,child.getWorldScale());
}
}
}
result.updateModelBound();
LOGGER.fine("Applying animations to the object if such are defined.");
AnimationHelper animationHelper=blenderContext.getHelper(AnimationHelper.class);
animationHelper.applyAnimations(result,blenderContext.getBlenderKey().getAnimationMatchMethod());
LOGGER.fine("Loading constraints connected with this object.");
ConstraintHelper constraintHelper=blenderContext.getHelper(ConstraintHelper.class);
constraintHelper.loadConstraints(objectStructure,blenderContext);
LOGGER.fine("Loading custom properties.");
if (blenderContext.getBlenderKey().isLoadObjectProperties()) {
Properties properties=this.loadProperties(objectStructure,blenderContext);
if (properties != null && properties.getValue() != null) {
this.applyProperties(result,properties);
}
}
}
}
  finally {
blenderContext.popParent();
}
return result;
}
