{
  Map<Vector3f,Vector3f> vertToNormalMap=new HashMap<Vector3f,Vector3f>();
  this.vertices=new ArrayList<List<Vector3f>>(meshes.size());
  this.normals=new ArrayList<List<Vector3f>>(meshes.size());
  for (  Mesh mesh : meshes) {
    float[] vertexTable=BufferUtils.getFloatArray(mesh.getFloatBuffer(Type.Position));
    float[] normalTable=BufferUtils.getFloatArray(mesh.getFloatBuffer(Type.Normal));
    for (int i=0; i < vertexTable.length; i+=3) {
      Vector3f vert=new Vector3f(vertexTable[i],vertexTable[i + 1],vertexTable[i + 2]);
      Vector3f norm=vertToNormalMap.get(vert);
      if (norm == null) {
        norm=new Vector3f(normalTable[i],normalTable[i + 1],normalTable[i + 2]);
        vertToNormalMap.put(vert,norm);
      }
 else {
        norm.addLocal(normalTable[i],normalTable[i + 1],normalTable[i + 2]);
      }
    }
    List<Vector3f> vertices=new ArrayList<Vector3f>(vertToNormalMap.size());
    List<Vector3f> normals=new ArrayList<Vector3f>(vertToNormalMap.size());
    for (    Entry<Vector3f,Vector3f> entry : vertToNormalMap.entrySet()) {
      vertices.add(entry.getKey());
      normals.add(entry.getValue().normalizeLocal());
    }
    this.vertices.add(vertices);
    this.normals.add(normals);
  }
}
