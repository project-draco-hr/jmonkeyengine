{
  int id=source.getId();
  if (id == -1) {
    id=gl.glCreateShader(convertShaderType(source.getType()));
    if (id <= 0) {
      throw new RendererException("Invalid ID received when trying to create shader.");
    }
    source.setId(id);
  }
 else {
    throw new RendererException("Cannot recompile shader source");
  }
  boolean gles2=caps.contains(Caps.OpenGLES20);
  String language=source.getLanguage();
  if (gles2 && !language.equals("GLSL100")) {
    throw new RendererException("This shader cannot run in OpenGL ES 2. " + "Only GLSL 1.00 shaders are supported.");
  }
  stringBuf.setLength(0);
  if (language.startsWith("GLSL")) {
    int version=Integer.parseInt(language.substring(4));
    if (version > 100) {
      stringBuf.append("#version ");
      stringBuf.append(language.substring(4));
      if (version >= 150) {
        stringBuf.append(" core");
      }
      stringBuf.append("\n");
    }
 else {
      if (gles2) {
        if (source.getType() == ShaderType.Fragment) {
          stringBuf.append("precision mediump float;\n");
        }
      }
 else {
        stringBuf.append("#version 110\n");
      }
    }
  }
  if (linearizeSrgbImages) {
    stringBuf.append("#define SRGB 1\n");
  }
  stringBuf.append("#define ").append(source.getType().name().toUpperCase()).append("_SHADER 1\n");
  stringBuf.append(source.getDefines());
  stringBuf.append(source.getSource());
  intBuf1.clear();
  intBuf1.put(0,stringBuf.length());
  gl.glShaderSource(id,new String[]{stringBuf.toString()},intBuf1);
  gl.glCompileShader(id);
  gl.glGetShader(id,GL.GL_COMPILE_STATUS,intBuf1);
  boolean compiledOK=intBuf1.get(0) == GL.GL_TRUE;
  String infoLog=null;
  if (VALIDATE_SHADER || !compiledOK) {
    gl.glGetShader(id,GL.GL_INFO_LOG_LENGTH,intBuf1);
    int length=intBuf1.get(0);
    if (length > 3) {
      infoLog=gl.glGetShaderInfoLog(id,length);
    }
  }
  if (compiledOK) {
    if (infoLog != null) {
      logger.log(Level.WARNING,"{0} compiled successfully, compiler warnings: \n{1}",new Object[]{source.getName(),infoLog});
    }
 else {
      logger.log(Level.FINE,"{0} compiled successfully.",source.getName());
    }
    source.clearUpdateNeeded();
  }
 else {
    logger.log(Level.WARNING,"Bad compile of:\n{0}",new Object[]{ShaderDebug.formatShaderSource(stringBuf.toString())});
    if (infoLog != null) {
      throw new RendererException("compile error in: " + source + "\n"+ infoLog);
    }
 else {
      throw new RendererException("compile error in: " + source + "\nerror: <not provided>");
    }
  }
}
