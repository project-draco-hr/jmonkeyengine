{
  if (gl2 != null) {
    if (state.isWireframe() && !context.wireframe) {
      gl2.glPolygonMode(GL.GL_FRONT_AND_BACK,GL2.GL_LINE);
      context.wireframe=true;
    }
 else     if (!state.isWireframe() && context.wireframe) {
      gl2.glPolygonMode(GL.GL_FRONT_AND_BACK,GL2.GL_FILL);
      context.wireframe=false;
    }
  }
  if (state.isDepthTest() && !context.depthTestEnabled) {
    gl.glEnable(GL.GL_DEPTH_TEST);
    gl.glDepthFunc(convertTestFunction(context.depthFunc));
    context.depthTestEnabled=true;
  }
 else   if (!state.isDepthTest() && context.depthTestEnabled) {
    gl.glDisable(GL.GL_DEPTH_TEST);
    context.depthTestEnabled=false;
  }
  if (state.getDepthFunc() != context.depthFunc) {
    gl.glDepthFunc(convertTestFunction(state.getDepthFunc()));
    context.depthFunc=state.getDepthFunc();
  }
  if (gl2 != null) {
    if (state.isAlphaTest() && !context.alphaTestEnabled) {
      gl2.glEnable(GL2.GL_ALPHA_TEST);
      gl2.glAlphaFunc(convertTestFunction(context.alphaFunc),context.alphaTestFallOff);
      context.alphaTestEnabled=true;
    }
 else     if (!state.isAlphaTest() && context.alphaTestEnabled) {
      gl2.glDisable(GL2.GL_ALPHA_TEST);
      context.alphaTestEnabled=false;
    }
    if (state.getAlphaFallOff() != context.alphaTestFallOff) {
      gl2.glAlphaFunc(convertTestFunction(context.alphaFunc),context.alphaTestFallOff);
      context.alphaTestFallOff=state.getAlphaFallOff();
    }
    if (state.getAlphaFunc() != context.alphaFunc) {
      gl2.glAlphaFunc(convertTestFunction(state.getAlphaFunc()),context.alphaTestFallOff);
      context.alphaFunc=state.getAlphaFunc();
    }
  }
  if (state.isDepthWrite() && !context.depthWriteEnabled) {
    gl.glDepthMask(true);
    context.depthWriteEnabled=true;
  }
 else   if (!state.isDepthWrite() && context.depthWriteEnabled) {
    gl.glDepthMask(false);
    context.depthWriteEnabled=false;
  }
  if (state.isColorWrite() && !context.colorWriteEnabled) {
    gl.glColorMask(true,true,true,true);
    context.colorWriteEnabled=true;
  }
 else   if (!state.isColorWrite() && context.colorWriteEnabled) {
    gl.glColorMask(false,false,false,false);
    context.colorWriteEnabled=false;
  }
  if (state.isPointSprite() && !context.pointSprite) {
    if (context.boundTextures[0] != null) {
      if (context.boundTextureUnit != 0) {
        gl.glActiveTexture(GL.GL_TEXTURE0);
        context.boundTextureUnit=0;
      }
      if (gl2 != null) {
        gl2.glEnable(GL2.GL_POINT_SPRITE);
        gl2.glEnable(GL2.GL_VERTEX_PROGRAM_POINT_SIZE);
      }
    }
    context.pointSprite=true;
  }
 else   if (!state.isPointSprite() && context.pointSprite) {
    if (context.boundTextures[0] != null) {
      if (context.boundTextureUnit != 0) {
        gl.glActiveTexture(GL.GL_TEXTURE0);
        context.boundTextureUnit=0;
      }
      if (gl2 != null) {
        gl2.glDisable(GL2.GL_POINT_SPRITE);
        gl2.glDisable(GL2.GL_VERTEX_PROGRAM_POINT_SIZE);
      }
      context.pointSprite=false;
    }
  }
  if (state.isPolyOffset()) {
    if (!context.polyOffsetEnabled) {
      gl.glEnable(GL.GL_POLYGON_OFFSET_FILL);
      gl.glPolygonOffset(state.getPolyOffsetFactor(),state.getPolyOffsetUnits());
      context.polyOffsetEnabled=true;
      context.polyOffsetFactor=state.getPolyOffsetFactor();
      context.polyOffsetUnits=state.getPolyOffsetUnits();
    }
 else {
      if (state.getPolyOffsetFactor() != context.polyOffsetFactor || state.getPolyOffsetUnits() != context.polyOffsetUnits) {
        gl.glPolygonOffset(state.getPolyOffsetFactor(),state.getPolyOffsetUnits());
        context.polyOffsetFactor=state.getPolyOffsetFactor();
        context.polyOffsetUnits=state.getPolyOffsetUnits();
      }
    }
  }
 else {
    if (context.polyOffsetEnabled) {
      gl.glDisable(GL.GL_POLYGON_OFFSET_FILL);
      context.polyOffsetEnabled=false;
      context.polyOffsetFactor=0;
      context.polyOffsetUnits=0;
    }
  }
  if (state.getFaceCullMode() != context.cullMode) {
    if (state.getFaceCullMode() == RenderState.FaceCullMode.Off) {
      gl.glDisable(GL.GL_CULL_FACE);
    }
 else {
      gl.glEnable(GL.GL_CULL_FACE);
    }
switch (state.getFaceCullMode()) {
case Off:
      break;
case Back:
    gl.glCullFace(GL.GL_BACK);
  break;
case Front:
gl.glCullFace(GL.GL_FRONT);
break;
case FrontAndBack:
gl.glCullFace(GL.GL_FRONT_AND_BACK);
break;
default :
throw new UnsupportedOperationException("Unrecognized face cull mode: " + state.getFaceCullMode());
}
context.cullMode=state.getFaceCullMode();
}
if (state.getBlendMode() != context.blendMode) {
if (state.getBlendMode() == RenderState.BlendMode.Off) {
gl.glDisable(GL.GL_BLEND);
}
 else {
gl.glEnable(GL.GL_BLEND);
switch (state.getBlendMode()) {
case Off:
break;
case Additive:
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE);
break;
case AlphaAdditive:
gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE);
break;
case Color:
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_COLOR);
break;
case Alpha:
gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
break;
case PremultAlpha:
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
break;
case Modulate:
gl.glBlendFunc(GL.GL_DST_COLOR,GL.GL_ZERO);
break;
case ModulateX2:
gl.glBlendFunc(GL.GL_DST_COLOR,GL.GL_SRC_COLOR);
break;
case Screen:
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_COLOR);
break;
case Exclusion:
gl.glBlendFunc(GL.GL_ONE_MINUS_DST_COLOR,GL.GL_ONE_MINUS_SRC_COLOR);
break;
default :
throw new UnsupportedOperationException("Unrecognized blend mode: " + state.getBlendMode());
}
}
context.blendMode=state.getBlendMode();
}
if (context.stencilTest != state.isStencilTest() || context.frontStencilStencilFailOperation != state.getFrontStencilStencilFailOperation() || context.frontStencilDepthFailOperation != state.getFrontStencilDepthFailOperation() || context.frontStencilDepthPassOperation != state.getFrontStencilDepthPassOperation() || context.backStencilStencilFailOperation != state.getBackStencilStencilFailOperation() || context.backStencilDepthFailOperation != state.getBackStencilDepthFailOperation() || context.backStencilDepthPassOperation != state.getBackStencilDepthPassOperation() || context.frontStencilFunction != state.getFrontStencilFunction() || context.backStencilFunction != state.getBackStencilFunction()) {
context.frontStencilStencilFailOperation=state.getFrontStencilStencilFailOperation();
context.frontStencilDepthFailOperation=state.getFrontStencilDepthFailOperation();
context.frontStencilDepthPassOperation=state.getFrontStencilDepthPassOperation();
context.backStencilStencilFailOperation=state.getBackStencilStencilFailOperation();
context.backStencilDepthFailOperation=state.getBackStencilDepthFailOperation();
context.backStencilDepthPassOperation=state.getBackStencilDepthPassOperation();
context.frontStencilFunction=state.getFrontStencilFunction();
context.backStencilFunction=state.getBackStencilFunction();
if (state.isStencilTest()) {
gl.glEnable(GL.GL_STENCIL_TEST);
gl.glStencilOpSeparate(GL.GL_FRONT,convertStencilOperation(state.getFrontStencilStencilFailOperation()),convertStencilOperation(state.getFrontStencilDepthFailOperation()),convertStencilOperation(state.getFrontStencilDepthPassOperation()));
gl.glStencilOpSeparate(GL.GL_BACK,convertStencilOperation(state.getBackStencilStencilFailOperation()),convertStencilOperation(state.getBackStencilDepthFailOperation()),convertStencilOperation(state.getBackStencilDepthPassOperation()));
gl.glStencilFuncSeparate(GL.GL_FRONT,convertTestFunction(state.getFrontStencilFunction()),0,Integer.MAX_VALUE);
gl.glStencilFuncSeparate(GL.GL_BACK,convertTestFunction(state.getBackStencilFunction()),0,Integer.MAX_VALUE);
}
 else {
gl.glDisable(GL.GL_STENCIL_TEST);
}
}
}
