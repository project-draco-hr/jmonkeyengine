{
  int texId=img.getId();
  if (texId == -1) {
    gl.glGenTextures(intBuf1);
    texId=intBuf1.get(0);
    img.setId(texId);
    objManager.registerObject(img);
    statistics.onNewTexture();
  }
  int target=convertTextureType(type,img.getMultiSamples(),-1);
  bindTextureAndUnit(target,img,unit);
  if (!img.hasMipmaps() && img.isGeneratedMipmapsRequired()) {
    if (!caps.contains(Caps.FrameBuffer) && gl2 != null) {
      gl2.glTexParameteri(target,GL2.GL_GENERATE_MIPMAP,GL.GL_TRUE);
      img.setMipmapsGenerated(true);
    }
 else {
    }
  }
 else   if (img.hasMipmaps()) {
    gl.glTexParameteri(target,GL.GL_TEXTURE_MAX_LEVEL,img.getMipMapSizes().length - 1);
  }
 else {
    gl.glTexParameteri(target,GL.GL_TEXTURE_MAX_LEVEL,0);
  }
  int imageSamples=img.getMultiSamples();
  if (imageSamples > 1) {
    if (img.getFormat().isDepthFormat()) {
      img.setMultiSamples(Math.min(limits.get(Limits.DepthTextureSamples),imageSamples));
    }
 else {
      img.setMultiSamples(Math.min(limits.get(Limits.ColorTextureSamples),imageSamples));
    }
  }
  if (!caps.contains(Caps.TextureMultisample)) {
    if (img.getMultiSamples() > 1) {
      throw new RendererException("Multisample textures are not supported by the video hardware");
    }
  }
  if (img.getFormat().isDepthFormat() && !caps.contains(Caps.DepthTexture)) {
    throw new RendererException("Depth textures are not supported by the video hardware");
  }
  if (target == GL.GL_TEXTURE_CUBE_MAP) {
    int cubeSize=limits.get(Limits.CubemapSize);
    if (img.getWidth() > cubeSize || img.getHeight() > cubeSize) {
      throw new RendererException("Cannot upload cubemap " + img + ". The maximum supported cubemap resolution is "+ cubeSize);
    }
    if (img.getWidth() != img.getHeight()) {
      throw new RendererException("Cubemaps must have square dimensions");
    }
  }
 else {
    int texSize=limits.get(Limits.TextureSize);
    if (img.getWidth() > texSize || img.getHeight() > texSize) {
      throw new RendererException("Cannot upload texture " + img + ". The maximum supported texture resolution is "+ texSize);
    }
  }
  Image imageForUpload;
  if (scaleToPot) {
    imageForUpload=MipMapGenerator.resizeToPowerOf2(img);
  }
 else {
    imageForUpload=img;
  }
  if (target == GL.GL_TEXTURE_CUBE_MAP) {
    List<ByteBuffer> data=imageForUpload.getData();
    if (data.size() != 6) {
      logger.log(Level.WARNING,"Invalid texture: {0}\n" + "Cubemap textures must contain 6 data units.",img);
      return;
    }
    for (int i=0; i < 6; i++) {
      texUtil.uploadTexture(imageForUpload,GL.GL_TEXTURE_CUBE_MAP_POSITIVE_X + i,i,linearizeSrgbImages);
    }
  }
 else   if (target == GLExt.GL_TEXTURE_2D_ARRAY_EXT) {
    if (!caps.contains(Caps.TextureArray)) {
      throw new RendererException("Texture arrays not supported by graphics hardware");
    }
    List<ByteBuffer> data=imageForUpload.getData();
    texUtil.uploadTexture(imageForUpload,target,-1,linearizeSrgbImages);
    for (int i=0; i < data.size(); i++) {
      texUtil.uploadTexture(imageForUpload,target,i,linearizeSrgbImages);
    }
  }
 else {
    texUtil.uploadTexture(imageForUpload,target,0,linearizeSrgbImages);
  }
  if (img.getMultiSamples() != imageSamples) {
    img.setMultiSamples(imageSamples);
  }
  if (caps.contains(Caps.FrameBuffer) || gl2 == null) {
    if (!img.hasMipmaps() && img.isGeneratedMipmapsRequired() && img.getData(0) != null) {
      glfbo.glGenerateMipmapEXT(target);
      img.setMipmapsGenerated(true);
    }
  }
  img.clearUpdateNeeded();
}
