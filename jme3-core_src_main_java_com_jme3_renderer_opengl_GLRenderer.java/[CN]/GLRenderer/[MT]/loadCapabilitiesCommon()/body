{
  extensions=loadExtensions(gl.glGetString(GL.GL_EXTENSIONS));
  vertexTextureUnits=getInteger(GL.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS);
  logger.log(Level.FINER,"VTF Units: {0}",vertexTextureUnits);
  if (vertexTextureUnits > 0) {
    caps.add(Caps.VertexTextureFetch);
  }
  fragTextureUnits=getInteger(GL.GL_MAX_TEXTURE_IMAGE_UNITS);
  logger.log(Level.FINER,"Texture Units: {0}",fragTextureUnits);
  vertexAttribs=getInteger(GL.GL_MAX_VERTEX_ATTRIBS);
  logger.log(Level.FINER,"Vertex Attributes: {0}",vertexAttribs);
  maxTexSize=getInteger(GL.GL_MAX_TEXTURE_SIZE);
  logger.log(Level.FINER,"Maximum Texture Resolution: {0}",maxTexSize);
  maxCubeTexSize=getInteger(GL.GL_MAX_CUBE_MAP_TEXTURE_SIZE);
  logger.log(Level.FINER,"Maximum CubeMap Resolution: {0}",maxCubeTexSize);
  if (hasExtension("GL_ARB_draw_instanced") && hasExtension("GL_ARB_instanced_arrays")) {
    caps.add(Caps.MeshInstancing);
  }
  if (hasExtension("GL_OES_element_index_uint") || gl2 != null) {
    caps.add(Caps.IntegerIndexBuffer);
  }
  if (hasExtension("GL_ARB_texture_buffer_object")) {
    caps.add(Caps.TextureBuffer);
  }
  boolean hasFloatTexture=false;
  hasFloatTexture=hasExtension("GL_OES_texture_half_float") && hasExtension("GL_OES_texture_float");
  if (!hasFloatTexture) {
    hasFloatTexture=hasExtension("GL_ARB_texture_float") && hasExtension("GL_ARB_half_float_pixel");
    if (!hasFloatTexture) {
      hasFloatTexture=caps.contains(Caps.OpenGL30);
    }
  }
  if (hasFloatTexture) {
    caps.add(Caps.FloatTexture);
  }
  if (hasExtension("GL_OES_depth_texture") || gl2 != null) {
    caps.add(Caps.DepthTexture);
  }
  if (hasExtension("GL_OES_rgb8_rgba8") || hasExtension("GL_ARM_rgba8") || hasExtension("GL_EXT_texture_format_BGRA8888")) {
    caps.add(Caps.Rgba8);
  }
  if (caps.contains(Caps.OpenGL30) || hasExtension("GL_OES_packed_depth_stencil")) {
    caps.add(Caps.PackedDepthStencilBuffer);
  }
  if (hasExtension("GL_ARB_color_buffer_float") && hasExtension("GL_ARB_half_float_pixel")) {
    caps.add(Caps.FloatColorBuffer);
  }
  if (hasExtension("GL_ARB_depth_buffer_float")) {
    caps.add(Caps.FloatDepthBuffer);
  }
  if ((hasExtension("GL_EXT_packed_float") && hasFloatTexture) || caps.contains(Caps.OpenGL30)) {
    caps.add(Caps.PackedFloatColorBuffer);
    caps.add(Caps.PackedFloatTexture);
  }
  if (hasExtension("GL_EXT_texture_shared_exponent") || caps.contains(Caps.OpenGL30)) {
    caps.add(Caps.SharedExponentTexture);
  }
  if (hasExtension("GL_EXT_texture_compression_s3tc")) {
    caps.add(Caps.TextureCompressionS3TC);
  }
  if (hasExtension("GL_ARB_ES3_compatibility")) {
    caps.add(Caps.TextureCompressionETC2);
    caps.add(Caps.TextureCompressionETC1);
  }
 else   if (hasExtension("GL_OES_compressed_ETC1_RGB8_texture")) {
    caps.add(Caps.TextureCompressionETC1);
  }
  if (hasExtension("GL_ARB_vertex_array_object") || caps.contains(Caps.OpenGL30)) {
    caps.add(Caps.VertexBufferArray);
  }
  if (hasExtension("GL_ARB_texture_non_power_of_two") || hasExtension("GL_OES_texture_npot") || caps.contains(Caps.OpenGL30)) {
    caps.add(Caps.NonPowerOfTwoTextures);
  }
 else {
    logger.log(Level.WARNING,"Your graphics card does not " + "support non-power-of-2 textures. " + "Some features might not work.");
  }
  if (hasExtension("GL_EXT_texture_array") || caps.contains(Caps.OpenGL30)) {
    caps.add(Caps.TextureArray);
  }
  if (hasExtension("GL_EXT_texture_filter_anisotropic")) {
    caps.add(Caps.TextureFilterAnisotropic);
  }
  if (hasExtension("GL_EXT_framebuffer_object")) {
    caps.add(Caps.FrameBuffer);
    maxRBSize=getInteger(GLExt.GL_MAX_RENDERBUFFER_SIZE_EXT);
    logger.log(Level.FINER,"FBO RB Max Size: {0}",maxRBSize);
    maxFBOAttachs=getInteger(GLExt.GL_MAX_COLOR_ATTACHMENTS_EXT);
    logger.log(Level.FINER,"FBO Max renderbuffers: {0}",maxFBOAttachs);
    if (hasExtension("GL_EXT_framebuffer_blit")) {
      caps.add(Caps.FrameBufferBlit);
    }
    if (hasExtension("GL_EXT_framebuffer_multisample")) {
      caps.add(Caps.FrameBufferMultisample);
      maxFBOSamples=getInteger(GLExt.GL_MAX_SAMPLES_EXT);
      logger.log(Level.FINER,"FBO Max Samples: {0}",maxFBOSamples);
    }
    if (hasExtension("GL_ARB_texture_multisample")) {
      caps.add(Caps.TextureMultisample);
      maxColorTexSamples=getInteger(GLExt.GL_MAX_COLOR_TEXTURE_SAMPLES);
      logger.log(Level.FINER,"Texture Multisample Color Samples: {0}",maxColorTexSamples);
      maxDepthTexSamples=getInteger(GLExt.GL_MAX_DEPTH_TEXTURE_SAMPLES);
      logger.log(Level.FINER,"Texture Multisample Depth Samples: {0}",maxDepthTexSamples);
    }
    if (hasExtension("GL_ARB_draw_buffers")) {
      maxMRTFBOAttachs=getInteger(GLExt.GL_MAX_DRAW_BUFFERS_ARB);
      if (maxMRTFBOAttachs > 1) {
        caps.add(Caps.FrameBufferMRT);
        logger.log(Level.FINER,"FBO Max MRT renderbuffers: {0}",maxMRTFBOAttachs);
      }
    }
 else {
      maxMRTFBOAttachs=1;
    }
  }
  if (hasExtension("GL_ARB_multisample")) {
    boolean available=getInteger(GLExt.GL_SAMPLE_BUFFERS_ARB) != 0;
    int samples=getInteger(GLExt.GL_SAMPLES_ARB);
    logger.log(Level.FINER,"Samples: {0}",samples);
    boolean enabled=gl.glIsEnabled(GLExt.GL_MULTISAMPLE_ARB);
    if (samples > 0 && available && !enabled) {
      gl.glEnable(GLExt.GL_MULTISAMPLE_ARB);
    }
    caps.add(Caps.Multisample);
  }
  if ((hasExtension("GL_ARB_framebuffer_sRGB") && hasExtension("GL_EXT_texture_sRGB")) || caps.contains(Caps.OpenGL30)) {
    caps.add(Caps.Srgb);
  }
  logger.log(Level.FINE,"Caps: {0}",caps);
  texUtil.initialize(caps);
}
