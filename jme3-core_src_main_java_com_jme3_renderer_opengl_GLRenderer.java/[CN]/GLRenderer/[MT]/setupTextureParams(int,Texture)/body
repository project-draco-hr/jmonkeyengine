{
  Image image=tex.getImage();
  int target=convertTextureType(tex.getType(),image != null ? image.getMultiSamples() : 1,-1);
  boolean haveMips=true;
  if (image != null) {
    haveMips=image.isGeneratedMipmapsRequired() || image.hasMipmaps();
  }
  LastTextureState curState=image.getLastTextureState();
  if (curState.magFilter != tex.getMagFilter()) {
    bindTextureAndUnit(target,image,unit);
    gl.glTexParameteri(target,GL.GL_TEXTURE_MAG_FILTER,convertMagFilter(tex.getMagFilter()));
    curState.magFilter=tex.getMagFilter();
  }
  if (curState.minFilter != tex.getMinFilter()) {
    bindTextureAndUnit(target,image,unit);
    gl.glTexParameteri(target,GL.GL_TEXTURE_MIN_FILTER,convertMinFilter(tex.getMinFilter(),haveMips));
    curState.minFilter=tex.getMinFilter();
  }
  int desiredAnisoFilter=tex.getAnisotropicFilter() == 0 ? defaultAnisotropicFilter : tex.getAnisotropicFilter();
  if (caps.contains(Caps.TextureFilterAnisotropic) && curState.anisoFilter != desiredAnisoFilter) {
    bindTextureAndUnit(target,image,unit);
    gl.glTexParameterf(target,GLExt.GL_TEXTURE_MAX_ANISOTROPY_EXT,desiredAnisoFilter);
    curState.anisoFilter=desiredAnisoFilter;
  }
switch (tex.getType()) {
case ThreeDimensional:
case CubeMap:
    if (gl2 != null && curState.rWrap != tex.getWrap(WrapAxis.R)) {
      bindTextureAndUnit(target,image,unit);
      gl2.glTexParameteri(target,GL2.GL_TEXTURE_WRAP_R,convertWrapMode(tex.getWrap(WrapAxis.R)));
      curState.rWrap=tex.getWrap(WrapAxis.R);
    }
case TwoDimensional:
case TwoDimensionalArray:
  if (curState.tWrap != tex.getWrap(WrapAxis.T)) {
    bindTextureAndUnit(target,image,unit);
    gl.glTexParameteri(target,GL.GL_TEXTURE_WRAP_T,convertWrapMode(tex.getWrap(WrapAxis.T)));
    image.getLastTextureState().tWrap=tex.getWrap(WrapAxis.T);
  }
if (curState.sWrap != tex.getWrap(WrapAxis.S)) {
  bindTextureAndUnit(target,image,unit);
  gl.glTexParameteri(target,GL.GL_TEXTURE_WRAP_S,convertWrapMode(tex.getWrap(WrapAxis.S)));
  curState.sWrap=tex.getWrap(WrapAxis.S);
}
break;
default :
throw new UnsupportedOperationException("Unknown texture type: " + tex.getType());
}
ShadowCompareMode texCompareMode=tex.getShadowCompareMode();
if (gl2 != null && curState.shadowCompareMode != texCompareMode) {
bindTextureAndUnit(target,image,unit);
if (texCompareMode != ShadowCompareMode.Off) {
gl2.glTexParameteri(target,GL2.GL_TEXTURE_COMPARE_MODE,GL2.GL_COMPARE_REF_TO_TEXTURE);
if (texCompareMode == ShadowCompareMode.GreaterOrEqual) {
gl2.glTexParameteri(target,GL2.GL_TEXTURE_COMPARE_FUNC,GL.GL_GEQUAL);
}
 else {
gl2.glTexParameteri(target,GL2.GL_TEXTURE_COMPARE_FUNC,GL.GL_LEQUAL);
}
}
 else {
gl2.glTexParameteri(target,GL2.GL_TEXTURE_COMPARE_MODE,GL.GL_NONE);
}
curState.shadowCompareMode=texCompareMode;
}
bindTextureOnly(target,image,unit);
}
