{
  try {
    this.setup(assetInfo);
    List<FileBlockHeader> sceneBlocks=new ArrayList<FileBlockHeader>();
    BlenderKey blenderKey=blenderContext.getBlenderKey();
    LoadingResults loadingResults=blenderKey.prepareLoadingResults();
    AnimationHelper animationHelper=blenderContext.getHelper(AnimationHelper.class);
    animationHelper.loadAnimations();
    for (    FileBlockHeader block : blocks) {
switch (block.getCode()) {
case FileBlockHeader.BLOCK_OB00:
        ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
      Object object=objectHelper.toObject(block.getStructure(blenderContext),blenderContext);
    if (object instanceof LightNode) {
      loadingResults.addLight((LightNode)object);
    }
 else     if (object instanceof CameraNode) {
      loadingResults.addCamera((CameraNode)object);
    }
 else     if (object instanceof Node) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,"{0}: {1}--> {2}",new Object[]{((Node)object).getName(),((Node)object).getLocalTranslation().toString(),((Node)object).getParent() == null ? "null" : ((Node)object).getParent().getName()});
      }
      if (this.isRootObject(loadingResults,(Node)object)) {
        loadingResults.addObject((Node)object);
      }
    }
  break;
case FileBlockHeader.BLOCK_SC00:
if (blenderKey.shouldLoad(FeaturesToLoad.SCENES)) {
  sceneBlocks.add(block);
}
break;
case FileBlockHeader.BLOCK_WO00:
if (blenderKey.shouldLoad(FeaturesToLoad.WORLD)) {
Structure worldStructure=block.getStructure(blenderContext);
String worldName=worldStructure.getName();
if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {
LandscapeHelper landscapeHelper=blenderContext.getHelper(LandscapeHelper.class);
Light ambientLight=landscapeHelper.toAmbientLight(worldStructure);
loadingResults.addLight(new LightNode(null,ambientLight));
loadingResults.setSky(landscapeHelper.toSky(worldStructure));
loadingResults.setBackgroundColor(landscapeHelper.toBackgroundColor(worldStructure));
}
}
break;
}
}
ConstraintHelper constraintHelper=blenderContext.getHelper(ConstraintHelper.class);
constraintHelper.bakeConstraints(blenderContext);
for (FileBlockHeader sceneBlock : sceneBlocks) {
loadingResults.addScene(this.toScene(sceneBlock.getStructure(blenderContext)));
}
return loadingResults;
}
 catch (BlenderFileException e) {
throw new IOException(e.getLocalizedMessage(),e);
}
catch (Exception e) {
throw new IOException("Unexpected importer exception occured: " + e.getLocalizedMessage(),e);
}
 finally {
this.clear();
}
}
