{
  try {
    BlenderContext blenderContext=this.setup(assetInfo);
    AnimationHelper animationHelper=blenderContext.getHelper(AnimationHelper.class);
    animationHelper.loadAnimations();
    BlenderKey blenderKey=blenderContext.getBlenderKey();
    LoadedFeatures loadedFeatures=new LoadedFeatures();
    for (    FileBlockHeader block : blenderContext.getBlocks()) {
switch (block.getCode()) {
case BLOCK_OB00:
        ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
      Node object=(Node)objectHelper.toObject(block.getStructure(blenderContext),blenderContext);
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.log(Level.FINE,"{0}: {1}--> {2}",new Object[]{object.getName(),object.getLocalTranslation().toString(),object.getParent() == null ? "null" : object.getParent().getName()});
    }
  if (object.getParent() == null) {
    loadedFeatures.objects.add(object);
  }
if (object instanceof LightNode && ((LightNode)object).getLight() != null) {
  loadedFeatures.lights.add(((LightNode)object).getLight());
}
 else if (object instanceof CameraNode && ((CameraNode)object).getCamera() != null) {
  loadedFeatures.cameras.add(((CameraNode)object).getCamera());
}
break;
case BLOCK_SC00:
loadedFeatures.sceneBlocks.add(block);
break;
case BLOCK_MA00:
MaterialHelper materialHelper=blenderContext.getHelper(MaterialHelper.class);
MaterialContext materialContext=materialHelper.toMaterialContext(block.getStructure(blenderContext),blenderContext);
loadedFeatures.materials.add(materialContext);
break;
case BLOCK_ME00:
MeshHelper meshHelper=blenderContext.getHelper(MeshHelper.class);
TemporalMesh temporalMesh=meshHelper.toTemporalMesh(block.getStructure(blenderContext),blenderContext);
loadedFeatures.meshes.add(temporalMesh);
break;
case BLOCK_IM00:
TextureHelper textureHelper=blenderContext.getHelper(TextureHelper.class);
Texture image=textureHelper.loadImageAsTexture(block.getStructure(blenderContext),0,blenderContext);
if (image != null && image.getImage() != null) {
loadedFeatures.images.add(image);
}
break;
case BLOCK_TE00:
Structure textureStructure=block.getStructure(blenderContext);
int type=((Number)textureStructure.getFieldValue("type")).intValue();
if (type == TextureHelper.TEX_IMAGE) {
TextureHelper texHelper=blenderContext.getHelper(TextureHelper.class);
Texture texture=texHelper.getTexture(textureStructure,null,blenderContext);
if (texture != null) {
loadedFeatures.textures.add(texture);
}
}
 else {
LOGGER.fine("Only image textures can be loaded as unlinked assets. Generated textures will be applied to an existing object.");
}
break;
case BLOCK_WO00:
LandscapeHelper landscapeHelper=blenderContext.getHelper(LandscapeHelper.class);
Structure worldStructure=block.getStructure(blenderContext);
String worldName=worldStructure.getName();
if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {
Light ambientLight=landscapeHelper.toAmbientLight(worldStructure);
if (ambientLight != null) {
loadedFeatures.objects.add(new LightNode(null,ambientLight));
loadedFeatures.lights.add(ambientLight);
}
loadedFeatures.sky=landscapeHelper.toSky(worldStructure);
loadedFeatures.backgroundColor=landscapeHelper.toBackgroundColor(worldStructure);
Filter fogFilter=landscapeHelper.toFog(worldStructure);
if (fogFilter != null) {
loadedFeatures.filters.add(landscapeHelper.toFog(worldStructure));
}
}
break;
case BLOCK_AC00:
LOGGER.fine("Loading unlinked animations is not yet supported!");
break;
default :
LOGGER.log(Level.FINEST,"Ommiting the block: {0}.",block.getCode());
}
}
LOGGER.fine("Baking constraints after every feature is loaded.");
ConstraintHelper constraintHelper=blenderContext.getHelper(ConstraintHelper.class);
constraintHelper.bakeConstraints(blenderContext);
LOGGER.fine("Loading scenes and attaching them to the root object.");
for (FileBlockHeader sceneBlock : loadedFeatures.sceneBlocks) {
loadedFeatures.scenes.add(this.toScene(sceneBlock.getStructure(blenderContext),blenderContext));
}
LOGGER.fine("Creating the root node of the model and applying loaded nodes of the scene and loaded features to it.");
Node modelRoot=new Node(blenderKey.getName());
for (Node scene : loadedFeatures.scenes) {
modelRoot.attachChild(scene);
}
if (blenderKey.isLoadUnlinkedAssets()) {
LOGGER.fine("Setting loaded content as user data in resulting sptaial.");
Map<String,Map<String,Object>> linkedData=new HashMap<String,Map<String,Object>>();
Map<String,Object> thisFileData=new HashMap<String,Object>();
thisFileData.put("scenes",loadedFeatures.scenes == null ? new ArrayList<Object>() : loadedFeatures.scenes);
thisFileData.put("objects",loadedFeatures.objects == null ? new ArrayList<Object>() : loadedFeatures.objects);
thisFileData.put("meshes",loadedFeatures.meshes == null ? new ArrayList<Object>() : loadedFeatures.meshes);
thisFileData.put("materials",loadedFeatures.materials == null ? new ArrayList<Object>() : loadedFeatures.materials);
thisFileData.put("textures",loadedFeatures.textures == null ? new ArrayList<Object>() : loadedFeatures.textures);
thisFileData.put("images",loadedFeatures.images == null ? new ArrayList<Object>() : loadedFeatures.images);
thisFileData.put("animations",loadedFeatures.animations == null ? new ArrayList<Object>() : loadedFeatures.animations);
thisFileData.put("cameras",loadedFeatures.cameras == null ? new ArrayList<Object>() : loadedFeatures.cameras);
thisFileData.put("lights",loadedFeatures.lights == null ? new ArrayList<Object>() : loadedFeatures.lights);
thisFileData.put("filters",loadedFeatures.filters == null ? new ArrayList<Object>() : loadedFeatures.filters);
thisFileData.put("backgroundColor",loadedFeatures.backgroundColor);
thisFileData.put("sky",loadedFeatures.sky);
linkedData.put("this",thisFileData);
linkedData.putAll(blenderContext.getLinkedFeatures());
modelRoot.setUserData("linkedData",linkedData);
}
return modelRoot;
}
 catch (BlenderFileException e) {
throw new IOException(e.getLocalizedMessage(),e);
}
catch (Exception e) {
throw new IOException("Unexpected importer exception occured: " + e.getLocalizedMessage(),e);
}
 finally {
this.clear(assetInfo);
}
}
