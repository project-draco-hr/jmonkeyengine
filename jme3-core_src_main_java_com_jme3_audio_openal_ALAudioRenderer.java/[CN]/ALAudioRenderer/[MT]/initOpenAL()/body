{
  try {
    if (!alc.isCreated()) {
      alc.createALC();
    }
  }
 catch (  UnsatisfiedLinkError ex) {
    logger.log(Level.SEVERE,"Failed to load audio library",ex);
    audioDisabled=true;
    return;
  }
  ArrayList<Integer> channelList=new ArrayList<Integer>();
  for (int i=0; i < MAX_NUM_CHANNELS; i++) {
    int chan=al.alGenSources();
    if (al.alGetError() != 0) {
      break;
    }
 else {
      channelList.add(chan);
    }
  }
  channels=new int[channelList.size()];
  for (int i=0; i < channels.length; i++) {
    channels[i]=channelList.get(i);
  }
  ib=BufferUtils.createIntBuffer(channels.length);
  chanSrcs=new AudioSource[channels.length];
  final String deviceName=alc.alcGetString(ALC.ALC_DEVICE_SPECIFIER);
  logger.log(Level.INFO,"Audio Renderer Information\n" + " * Device: {0}\n" + " * Vendor: {1}\n"+ " * Renderer: {2}\n"+ " * Version: {3}\n"+ " * Supported channels: {4}\n"+ " * ALC extensions: {5}\n"+ " * AL extensions: {6}",new Object[]{deviceName,al.alGetString(AL_VENDOR),al.alGetString(AL_RENDERER),al.alGetString(AL_VERSION),channels.length,alc.alcGetString(ALC.ALC_EXTENSIONS),al.alGetString(AL_EXTENSIONS)});
  supportPauseDevice=alc.alcIsExtensionPresent("ALC_SOFT_pause_device");
  if (!supportPauseDevice) {
    logger.log(Level.WARNING,"Pausing audio device not supported.");
  }
  supportEfx=alc.alcIsExtensionPresent("ALC_EXT_EFX");
  if (supportEfx) {
    ib.position(0).limit(1);
    alc.alcGetInteger(EFX.ALC_EFX_MAJOR_VERSION,ib,1);
    int major=ib.get(0);
    ib.position(0).limit(1);
    alc.alcGetInteger(EFX.ALC_EFX_MINOR_VERSION,ib,1);
    int minor=ib.get(0);
    logger.log(Level.INFO,"Audio effect extension version: {0}.{1}",new Object[]{major,minor});
    alc.alcGetInteger(EFX.ALC_MAX_AUXILIARY_SENDS,ib,1);
    auxSends=ib.get(0);
    logger.log(Level.INFO,"Audio max auxiliary sends: {0}",auxSends);
    ib.position(0).limit(1);
    efx.alGenAuxiliaryEffectSlots(1,ib);
    reverbFxSlot=ib.get(0);
    ib.position(0).limit(1);
    efx.alGenEffects(1,ib);
    reverbFx=ib.get(0);
    efx.alEffecti(reverbFx,EFX.AL_EFFECT_TYPE,EFX.AL_EFFECT_REVERB);
    efx.alAuxiliaryEffectSloti(reverbFxSlot,EFX.AL_EFFECTSLOT_EFFECT,reverbFx);
  }
 else {
    logger.log(Level.WARNING,"OpenAL EFX not available! Audio effects won't work.");
  }
}
