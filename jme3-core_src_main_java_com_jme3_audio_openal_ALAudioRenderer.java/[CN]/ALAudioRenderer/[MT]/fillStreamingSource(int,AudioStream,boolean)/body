{
  boolean success=false;
  int processed=al.alGetSourcei(sourceId,AL_BUFFERS_PROCESSED);
  int unqueuedBufferBytes=0;
  for (int i=0; i < processed; i++) {
    int buffer;
    ib.position(0).limit(1);
    al.alSourceUnqueueBuffers(sourceId,1,ib);
    buffer=ib.get(0);
    unqueuedBufferBytes+=BUFFER_SIZE;
    boolean active=fillBuffer(stream,buffer);
    if (!active && !stream.isEOF()) {
      throw new AssertionError();
    }
    if (!active && looping) {
      stream.setTime(0);
      active=fillBuffer(stream,buffer);
      if (!active) {
        throw new IllegalStateException("Looping streaming source " + "was rewinded but could not be filled");
      }
    }
    if (active) {
      ib.position(0).limit(1);
      ib.put(0,buffer);
      al.alSourceQueueBuffers(sourceId,1,ib);
      success=true;
    }
 else {
      break;
    }
  }
  stream.setUnqueuedBufferBytes(stream.getUnqueuedBufferBytes() + unqueuedBufferBytes);
  return success;
}
