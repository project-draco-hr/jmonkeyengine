{
  int experimentId=0;
  int stripId=0;
  boolean done=false;
  int loopCtr=0;
  while (!done) {
    loopCtr++;
    StripInfoVec[] experiments=new StripInfoVec[numSamples * 6];
    for (int i=0; i < experiments.length; i++)     experiments[i]=new StripInfoVec();
    int experimentIndex=0;
    HashSet<FaceInfo> resetPoints=new HashSet<FaceInfo>();
    for (int i=0; i < numSamples; i++) {
      FaceInfo nextFace=findGoodResetPoint(allFaceInfos,allEdgeInfos);
      if (nextFace == null) {
        done=true;
        break;
      }
 else       if (resetPoints.contains(nextFace)) {
        continue;
      }
      resetPoints.add(nextFace);
      EdgeInfo edge01=findEdgeInfo(allEdgeInfos,nextFace.m_v0,nextFace.m_v1);
      StripInfo strip01=new StripInfo(new StripStartInfo(nextFace,edge01,true),stripId++,experimentId++);
      experiments[experimentIndex++].add(strip01);
      EdgeInfo edge10=findEdgeInfo(allEdgeInfos,nextFace.m_v0,nextFace.m_v1);
      StripInfo strip10=new StripInfo(new StripStartInfo(nextFace,edge10,false),stripId++,experimentId++);
      experiments[experimentIndex++].add(strip10);
      EdgeInfo edge12=findEdgeInfo(allEdgeInfos,nextFace.m_v1,nextFace.m_v2);
      StripInfo strip12=new StripInfo(new StripStartInfo(nextFace,edge12,true),stripId++,experimentId++);
      experiments[experimentIndex++].add(strip12);
      EdgeInfo edge21=findEdgeInfo(allEdgeInfos,nextFace.m_v1,nextFace.m_v2);
      StripInfo strip21=new StripInfo(new StripStartInfo(nextFace,edge21,false),stripId++,experimentId++);
      experiments[experimentIndex++].add(strip21);
      EdgeInfo edge20=findEdgeInfo(allEdgeInfos,nextFace.m_v2,nextFace.m_v0);
      StripInfo strip20=new StripInfo(new StripStartInfo(nextFace,edge20,true),stripId++,experimentId++);
      experiments[experimentIndex++].add(strip20);
      EdgeInfo edge02=findEdgeInfo(allEdgeInfos,nextFace.m_v2,nextFace.m_v0);
      StripInfo strip02=new StripInfo(new StripStartInfo(nextFace,edge02,false),stripId++,experimentId++);
      experiments[experimentIndex++].add(strip02);
    }
    int numExperiments=experimentIndex;
    for (int i=0; i < numExperiments; i++) {
      experiments[i].at(0).build(allEdgeInfos,allFaceInfos);
      int experimentId2=experiments[i].at(0).m_experimentId;
      StripInfo stripIter=experiments[i].at(0);
      StripStartInfo startInfo=new StripStartInfo(null,null,false);
      while (findTraversal(allFaceInfos,allEdgeInfos,stripIter,startInfo)) {
        stripIter=new StripInfo(startInfo,stripId++,experimentId2);
        stripIter.build(allEdgeInfos,allFaceInfos);
        experiments[i].add(stripIter);
      }
    }
    int bestIndex=0;
    double bestValue=0;
    for (int i=0; i < numExperiments; i++) {
      float avgStripSizeWeight=1.0f;
      float numStripsWeight=0.0f;
      float avgStripSize=avgStripSize(experiments[i]);
      float numStrips=experiments[i].size();
      float value=avgStripSize * avgStripSizeWeight + (numStrips * numStripsWeight);
      if (value > bestValue) {
        bestValue=value;
        bestIndex=i;
      }
    }
    commitStrips(allStrips,experiments[bestIndex]);
  }
}
