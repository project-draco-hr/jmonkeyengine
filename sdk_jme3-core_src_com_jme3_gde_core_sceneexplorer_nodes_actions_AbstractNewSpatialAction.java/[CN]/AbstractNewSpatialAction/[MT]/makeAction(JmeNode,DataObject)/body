{
  final Node node=rootNode.getLookup().lookup(Node.class);
  return new AbstractAction(name){
    public void actionPerformed(    ActionEvent e){
      SceneApplication.getApplication().enqueue(new Callable<Void>(){
        public Void call() throws Exception {
          final Spatial attachSpatial=doCreateSpatial(node);
          if (node != null && attachSpatial != null) {
            node.attachChild(attachSpatial);
            Lookup.getDefault().lookup(SceneUndoRedoManager.class).addEdit(this,new AbstractUndoableSceneEdit(){
              @Override public void sceneUndo() throws CannotUndoException {
                attachSpatial.removeFromParent();
              }
              @Override public void sceneRedo() throws CannotRedoException {
                node.attachChild(attachSpatial);
              }
              @Override public void awtRedo(){
                dataObject.setModified(true);
                rootNode.refresh(true);
              }
              @Override public void awtUndo(){
                dataObject.setModified(true);
                rootNode.refresh(true);
              }
            }
);
            setModified();
          }
          return null;
        }
      }
);
    }
    protected void setModified(){
      java.awt.EventQueue.invokeLater(new Runnable(){
        public void run(){
          dataObject.setModified(true);
          rootNode.refresh(true);
        }
      }
);
    }
  }
;
}
