{
  for (int i=0; i < params.size(); i++) {
    Uniform u=params.get(i);
switch (u.getBinding()) {
case WorldMatrix:
      u.setValue(VarType.Matrix4,worldMatrix);
    break;
case ViewMatrix:
  u.setValue(VarType.Matrix4,viewMatrix);
break;
case ProjectionMatrix:
u.setValue(VarType.Matrix4,projMatrix);
break;
case ViewProjectionMatrix:
u.setValue(VarType.Matrix4,viewProjMatrix);
break;
case WorldViewMatrix:
worldViewMatrix.set(viewMatrix);
worldViewMatrix.multLocal(worldMatrix);
u.setValue(VarType.Matrix4,worldViewMatrix);
break;
case NormalMatrix:
tempMatrix.set(viewMatrix);
tempMatrix.multLocal(worldMatrix);
tempMatrix.toRotationMatrix(normalMatrix);
normalMatrix.invertLocal();
normalMatrix.transposeLocal();
u.setValue(VarType.Matrix3,normalMatrix);
break;
case WorldViewProjectionMatrix:
worldViewProjMatrix.set(viewProjMatrix);
worldViewProjMatrix.multLocal(worldMatrix);
u.setValue(VarType.Matrix4,worldViewProjMatrix);
break;
case WorldMatrixInverse:
worldMatrixInv.set(worldMatrix);
worldMatrixInv.invertLocal();
u.setValue(VarType.Matrix4,worldMatrixInv);
break;
case WorldMatrixInverseTranspose:
worldMatrix.toRotationMatrix(worldMatrixInvTrsp);
worldMatrixInvTrsp.invertLocal().transposeLocal();
u.setValue(VarType.Matrix3,worldMatrixInvTrsp);
break;
case ViewMatrixInverse:
viewMatrixInv.set(viewMatrix);
viewMatrixInv.invertLocal();
u.setValue(VarType.Matrix4,viewMatrixInv);
break;
case ProjectionMatrixInverse:
projMatrixInv.set(projMatrix);
projMatrixInv.invertLocal();
u.setValue(VarType.Matrix4,projMatrixInv);
break;
case ViewProjectionMatrixInverse:
viewProjMatrixInv.set(viewProjMatrix);
viewProjMatrixInv.invertLocal();
u.setValue(VarType.Matrix4,viewProjMatrixInv);
break;
case WorldViewMatrixInverse:
worldViewMatrixInv.set(viewMatrix);
worldViewMatrixInv.multLocal(worldMatrix);
worldViewMatrixInv.invertLocal();
u.setValue(VarType.Matrix4,worldViewMatrixInv);
break;
case NormalMatrixInverse:
tempMatrix.set(viewMatrix);
tempMatrix.multLocal(worldMatrix);
tempMatrix.toRotationMatrix(normalMatrixInv);
normalMatrixInv.invertLocal();
normalMatrixInv.transposeLocal();
normalMatrixInv.invertLocal();
u.setValue(VarType.Matrix3,normalMatrixInv);
break;
case WorldViewProjectionMatrixInverse:
worldViewProjMatrixInv.set(viewProjMatrix);
worldViewProjMatrixInv.multLocal(worldMatrix);
worldViewProjMatrixInv.invertLocal();
u.setValue(VarType.Matrix4,worldViewProjMatrixInv);
break;
case ViewPort:
viewPort.set(viewX,viewY,viewWidth,viewHeight);
u.setValue(VarType.Vector4,viewPort);
break;
case Resolution:
resolution.set(viewWidth,viewHeight);
u.setValue(VarType.Vector2,resolution);
break;
case ResolutionInverse:
resolutionInv.set(1f / viewWidth,1f / viewHeight);
u.setValue(VarType.Vector2,resolutionInv);
break;
case Aspect:
float aspect=((float)viewWidth) / viewHeight;
u.setValue(VarType.Float,aspect);
break;
case FrustumNearFar:
nearFar.set(near,far);
u.setValue(VarType.Vector2,nearFar);
break;
case CameraPosition:
u.setValue(VarType.Vector3,camLoc);
break;
case CameraDirection:
u.setValue(VarType.Vector3,camDir);
break;
case CameraLeft:
u.setValue(VarType.Vector3,camLeft);
break;
case CameraUp:
u.setValue(VarType.Vector3,camUp);
break;
case Time:
u.setValue(VarType.Float,timer.getTimeInSeconds());
break;
case Tpf:
u.setValue(VarType.Float,timer.getTimePerFrame());
break;
case FrameRate:
u.setValue(VarType.Float,timer.getFrameRate());
break;
}
}
}
