{
  if (invalid) {
    LOGGER.log(Level.WARNING,"Array modifier is invalid! Cannot be applied to: {0}",node.getName());
  }
 else {
    TemporalMesh temporalMesh=this.getTemporalMesh(node);
    if (temporalMesh != null) {
      LOGGER.log(Level.FINE,"Applying array modifier to: {0}",temporalMesh);
      if (offset == null) {
        offset=new float[]{0.0f,0.0f,0.0f};
      }
      if (scale == null) {
        scale=new float[]{0.0f,0.0f,0.0f};
      }
 else {
        temporalMesh.updateModelBound();
        BoundingVolume boundingVolume=temporalMesh.getWorldBound();
        if (boundingVolume instanceof BoundingBox) {
          scale[0]*=((BoundingBox)boundingVolume).getXExtent() * 2.0f;
          scale[1]*=((BoundingBox)boundingVolume).getYExtent() * 2.0f;
          scale[2]*=((BoundingBox)boundingVolume).getZExtent() * 2.0f;
        }
 else         if (boundingVolume instanceof BoundingSphere) {
          float radius=((BoundingSphere)boundingVolume).getRadius();
          scale[0]*=radius * 2.0f;
          scale[1]*=radius * 2.0f;
          scale[2]*=radius * 2.0f;
        }
 else {
          throw new IllegalStateException("Unknown bounding volume type: " + boundingVolume.getClass().getName());
        }
      }
      float[] objectOffset=new float[]{0.0f,0.0f,0.0f};
      if (pOffsetObject != null && pOffsetObject.isNotNull()) {
        FileBlockHeader offsetObjectBlock=blenderContext.getFileBlock(pOffsetObject.getOldMemoryAddress());
        ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
        try {
          Structure offsetStructure=offsetObjectBlock.getStructure(blenderContext);
          Vector3f translation=objectHelper.getTransformation(offsetStructure,blenderContext).getTranslation();
          objectOffset[0]=translation.x;
          objectOffset[1]=translation.y;
          objectOffset[2]=translation.z;
        }
 catch (        BlenderFileException e) {
          LOGGER.log(Level.WARNING,"Problems in blender file structure! Object offset cannot be applied! The problem: {0}",e.getMessage());
        }
      }
      MeshHelper meshHelper=blenderContext.getHelper(MeshHelper.class);
      TemporalMesh[] caps=new TemporalMesh[]{null,null};
      Pointer[] pCaps=new Pointer[]{pStartCap,pEndCap};
      for (int i=0; i < pCaps.length; ++i) {
        if (pCaps[i].isNotNull()) {
          FileBlockHeader capBlock=blenderContext.getFileBlock(pCaps[i].getOldMemoryAddress());
          try {
            Structure capStructure=capBlock.getStructure(blenderContext);
            Pointer pMesh=(Pointer)capStructure.getFieldValue("data");
            List<Structure> meshesArray=pMesh.fetchData();
            caps[i]=meshHelper.toTemporalMesh(meshesArray.get(0),blenderContext);
          }
 catch (          BlenderFileException e) {
            LOGGER.log(Level.WARNING,"Problems in blender file structure! Cap object cannot be applied! The problem: {0}",e.getMessage());
          }
        }
      }
      Vector3f translationVector=new Vector3f(offset[0] + scale[0] + objectOffset[0],offset[1] + scale[1] + objectOffset[1],offset[2] + scale[2] + objectOffset[2]);
      if (blenderContext.getBlenderKey().isFixUpAxis()) {
        float y=translationVector.y;
        translationVector.y=translationVector.z;
        translationVector.z=y == 0 ? 0 : -y;
      }
      int count=0;
      if (fittype == 0) {
        count=this.count - 1;
      }
 else       if (fittype == 1) {
        float length=this.length;
        if (translationVector.length() > 0.0f) {
          count=(int)(length / translationVector.length()) - 1;
        }
      }
 else       if (fittype == 2) {
        throw new IllegalStateException("Fit curve should be transformed to Fixed Length array type!");
      }
 else {
        throw new IllegalStateException("Unknown fit type: " + fittype);
      }
      Vector3f totalTranslation=new Vector3f(translationVector);
      if (count > 0) {
        TemporalMesh originalMesh=temporalMesh.clone();
        for (int i=0; i < count; ++i) {
          TemporalMesh clone=originalMesh.clone();
          for (          Vector3f v : clone.getVertices()) {
            v.addLocal(totalTranslation);
          }
          temporalMesh.append(clone);
          totalTranslation.addLocal(translationVector);
        }
      }
      if (caps[0] != null) {
        translationVector.multLocal(-1);
        TemporalMesh capsClone=caps[0].clone();
        for (        Vector3f v : capsClone.getVertices()) {
          v.addLocal(translationVector);
        }
        temporalMesh.append(capsClone);
      }
      if (caps[1] != null) {
        TemporalMesh capsClone=caps[1].clone();
        for (        Vector3f v : capsClone.getVertices()) {
          v.addLocal(totalTranslation);
        }
        temporalMesh.append(capsClone);
      }
    }
 else {
      LOGGER.log(Level.WARNING,"Cannot find temporal mesh for node: {0}. The modifier will NOT be applied!",node);
    }
  }
}
