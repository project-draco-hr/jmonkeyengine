{
  ContextCapabilities ctxCaps=GLContext.getCapabilities();
  if (ctxCaps.OpenGL20) {
    caps.add(Caps.OpenGL20);
    if (ctxCaps.OpenGL21) {
      caps.add(Caps.OpenGL21);
      if (ctxCaps.OpenGL30) {
        caps.add(Caps.OpenGL30);
        if (ctxCaps.OpenGL31) {
          caps.add(Caps.OpenGL31);
          if (ctxCaps.OpenGL32) {
            caps.add(Caps.OpenGL32);
          }
        }
      }
    }
  }
  String versionStr=null;
  if (ctxCaps.OpenGL20) {
    versionStr=glGetString(GL_SHADING_LANGUAGE_VERSION);
  }
  if (versionStr == null || versionStr.equals("")) {
    glslVer=-1;
    throw new UnsupportedOperationException("GLSL and OpenGL2 is " + "required for the LWJGL " + "renderer!");
  }
  initialDrawBuf=glGetInteger(GL_DRAW_BUFFER);
  initialReadBuf=glGetInteger(GL_READ_BUFFER);
  int spaceIdx=versionStr.indexOf(" ");
  if (spaceIdx >= 1) {
    versionStr=versionStr.substring(0,spaceIdx);
  }
  float version=Float.parseFloat(versionStr);
  glslVer=(int)(version * 100);
switch (glslVer) {
default :
    if (glslVer < 400) {
      break;
    }
case 400:
case 330:
case 150:
  caps.add(Caps.GLSL150);
case 140:
caps.add(Caps.GLSL140);
case 130:
caps.add(Caps.GLSL130);
case 120:
caps.add(Caps.GLSL120);
case 110:
caps.add(Caps.GLSL110);
case 100:
caps.add(Caps.GLSL100);
break;
}
if (!caps.contains(Caps.GLSL100)) {
logger.log(Level.WARNING,"Force-adding GLSL100 support, since OpenGL2 is supported.");
caps.add(Caps.GLSL100);
}
glGetInteger(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,intBuf16);
vertexTextureUnits=intBuf16.get(0);
logger.log(Level.FINER,"VTF Units: {0}",vertexTextureUnits);
if (vertexTextureUnits > 0) {
caps.add(Caps.VertexTextureFetch);
}
glGetInteger(GL_MAX_TEXTURE_IMAGE_UNITS,intBuf16);
fragTextureUnits=intBuf16.get(0);
logger.log(Level.FINER,"Texture Units: {0}",fragTextureUnits);
glGetInteger(GL_MAX_VERTEX_UNIFORM_COMPONENTS,intBuf16);
vertexUniforms=intBuf16.get(0);
logger.log(Level.FINER,"Vertex Uniforms: {0}",vertexUniforms);
glGetInteger(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS,intBuf16);
fragUniforms=intBuf16.get(0);
logger.log(Level.FINER,"Fragment Uniforms: {0}",fragUniforms);
glGetInteger(GL_MAX_VERTEX_ATTRIBS,intBuf16);
vertexAttribs=intBuf16.get(0);
logger.log(Level.FINER,"Vertex Attributes: {0}",vertexAttribs);
glGetInteger(GL_SUBPIXEL_BITS,intBuf16);
int subpixelBits=intBuf16.get(0);
logger.log(Level.FINER,"Subpixel Bits: {0}",subpixelBits);
glGetInteger(GL_MAX_ELEMENTS_VERTICES,intBuf16);
maxVertCount=intBuf16.get(0);
logger.log(Level.FINER,"Preferred Batch Vertex Count: {0}",maxVertCount);
glGetInteger(GL_MAX_ELEMENTS_INDICES,intBuf16);
maxTriCount=intBuf16.get(0);
logger.log(Level.FINER,"Preferred Batch Index Count: {0}",maxTriCount);
glGetInteger(GL_MAX_TEXTURE_SIZE,intBuf16);
maxTexSize=intBuf16.get(0);
logger.log(Level.FINER,"Maximum Texture Resolution: {0}",maxTexSize);
glGetInteger(GL_MAX_CUBE_MAP_TEXTURE_SIZE,intBuf16);
maxCubeTexSize=intBuf16.get(0);
logger.log(Level.FINER,"Maximum CubeMap Resolution: {0}",maxCubeTexSize);
if (ctxCaps.GL_ARB_color_buffer_float) {
if (ctxCaps.GL_ARB_half_float_pixel) {
caps.add(Caps.FloatColorBuffer);
}
}
if (ctxCaps.GL_ARB_depth_buffer_float) {
caps.add(Caps.FloatDepthBuffer);
}
if (ctxCaps.OpenGL30) {
caps.add(Caps.PackedDepthStencilBuffer);
}
if (ctxCaps.GL_ARB_draw_instanced) {
caps.add(Caps.MeshInstancing);
}
if (ctxCaps.GL_ARB_fragment_program) {
caps.add(Caps.ARBprogram);
}
if (ctxCaps.GL_ARB_texture_buffer_object) {
caps.add(Caps.TextureBuffer);
}
if (ctxCaps.GL_ARB_texture_float) {
if (ctxCaps.GL_ARB_half_float_pixel) {
caps.add(Caps.FloatTexture);
}
}
if (ctxCaps.GL_ARB_vertex_array_object) {
caps.add(Caps.VertexBufferArray);
}
if (ctxCaps.GL_ARB_texture_non_power_of_two) {
caps.add(Caps.NonPowerOfTwoTextures);
}
 else {
logger.log(Level.WARNING,"Your graphics card does not " + "support non-power-of-2 textures. " + "Some features might not work.");
}
boolean latc=ctxCaps.GL_EXT_texture_compression_latc;
if (latc) {
caps.add(Caps.TextureCompressionLATC);
}
if (ctxCaps.GL_EXT_packed_float) {
caps.add(Caps.PackedFloatColorBuffer);
if (ctxCaps.GL_ARB_half_float_pixel) {
caps.add(Caps.PackedFloatTexture);
}
}
if (ctxCaps.GL_EXT_texture_array) {
caps.add(Caps.TextureArray);
}
if (ctxCaps.GL_EXT_texture_shared_exponent) {
caps.add(Caps.SharedExponentTexture);
}
if (ctxCaps.GL_EXT_framebuffer_object) {
caps.add(Caps.FrameBuffer);
glGetInteger(GL_MAX_RENDERBUFFER_SIZE_EXT,intBuf16);
maxRBSize=intBuf16.get(0);
logger.log(Level.FINER,"FBO RB Max Size: {0}",maxRBSize);
glGetInteger(GL_MAX_COLOR_ATTACHMENTS_EXT,intBuf16);
maxFBOAttachs=intBuf16.get(0);
logger.log(Level.FINER,"FBO Max renderbuffers: {0}",maxFBOAttachs);
if (ctxCaps.GL_EXT_framebuffer_multisample) {
caps.add(Caps.FrameBufferMultisample);
glGetInteger(GL_MAX_SAMPLES_EXT,intBuf16);
maxFBOSamples=intBuf16.get(0);
logger.log(Level.FINER,"FBO Max Samples: {0}",maxFBOSamples);
}
if (ctxCaps.GL_ARB_texture_multisample) {
caps.add(Caps.TextureMultisample);
glGetInteger(GL_MAX_COLOR_TEXTURE_SAMPLES,intBuf16);
maxColorTexSamples=intBuf16.get(0);
logger.log(Level.FINER,"Texture Multisample Color Samples: {0}",maxColorTexSamples);
glGetInteger(GL_MAX_DEPTH_TEXTURE_SAMPLES,intBuf16);
maxDepthTexSamples=intBuf16.get(0);
logger.log(Level.FINER,"Texture Multisample Depth Samples: {0}",maxDepthTexSamples);
}
glGetInteger(GL_MAX_DRAW_BUFFERS,intBuf16);
maxMRTFBOAttachs=intBuf16.get(0);
if (maxMRTFBOAttachs > 1) {
caps.add(Caps.FrameBufferMRT);
logger.log(Level.FINER,"FBO Max MRT renderbuffers: {0}",maxMRTFBOAttachs);
}
}
if (ctxCaps.GL_ARB_multisample) {
glGetInteger(ARBMultisample.GL_SAMPLE_BUFFERS_ARB,intBuf16);
boolean available=intBuf16.get(0) != 0;
glGetInteger(ARBMultisample.GL_SAMPLES_ARB,intBuf16);
int samples=intBuf16.get(0);
logger.log(Level.FINER,"Samples: {0}",samples);
boolean enabled=glIsEnabled(ARBMultisample.GL_MULTISAMPLE_ARB);
if (samples > 0 && available && !enabled) {
glEnable(ARBMultisample.GL_MULTISAMPLE_ARB);
}
}
logger.log(Level.INFO,"Caps: {0}",caps);
}
