{
  TempVars vars=TempVars.get();
  Quaternion tmpRot1=vars.quat1;
  Quaternion[] tmpRot2=new Quaternion[]{vars.quat2,new Quaternion()};
  Iterator<String> it=ikTargets.keySet().iterator();
  float distance;
  Bone bone;
  String boneName;
  while (it.hasNext()) {
    boneName=it.next();
    bone=(Bone)boneLinks.get(boneName).bone;
    if (!bone.hasUserControl()) {
      Logger.getLogger(KinematicRagdollControl.class.getSimpleName()).log(Level.FINE,"{0} doesn't have user control",boneName);
      continue;
    }
    distance=bone.getModelSpacePosition().distance(ikTargets.get(boneName));
    if (distance < IKThreshold) {
      Logger.getLogger(KinematicRagdollControl.class.getSimpleName()).log(Level.FINE,"Distance is close enough");
      continue;
    }
    int depth=0;
    int maxDepth=ikChainDepth.get(bone.getName());
    updateBone(boneLinks.get(bone.getName()),tpf * (float)FastMath.sqrt(distance),vars,tmpRot1,tmpRot2,bone,ikTargets.get(boneName),depth,maxDepth);
    Vector3f position=vars.vect1;
    for (    PhysicsBoneLink link : boneLinks.values()) {
      matchPhysicObjectToBone(link,position,tmpRot1);
    }
  }
  vars.release();
}
