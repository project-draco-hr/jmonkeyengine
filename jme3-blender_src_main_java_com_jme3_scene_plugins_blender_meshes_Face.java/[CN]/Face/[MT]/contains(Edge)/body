{
  int index1=edge.getFirstIndex();
  int index2=edge.getSecondIndex();
  if (!indexes.areNeighbours(index1,index2)) {
    for (int i=0; i < indexes.size(); ++i) {
      int i1=this.getIndex(i - 1);
      int i2=this.getIndex(i);
      if (i1 != index1 && i1 != index2 && i2 != index1 && i2 != index2) {
        if (edge.cross(new Edge(i1,i2,0,false,temporalMesh))) {
          return false;
        }
      }
    }
    Vector3f edgeMiddlePoint=edge.computeCentroid();
    Vector3f edgeVector=edge.getSecondVertex().subtract(edge.getFirstVertex());
    Vector3f edgeNormal=temporalMesh.getNormals().get(index1).cross(edgeVector).normalizeLocal();
    Edge e=new Edge(edgeMiddlePoint,edgeNormal.add(edgeMiddlePoint));
    List<Vector3f> crossingVectors=new ArrayList<Vector3f>();
    for (int i=0; i < indexes.size(); ++i) {
      int i1=this.getIndex(i);
      int i2=this.getIndex(i + 1);
      Vector3f crossPoint=e.getCrossPoint(new Edge(i1,i2,0,false,temporalMesh),true,false);
      if (crossPoint != null) {
        crossingVectors.add(crossPoint.subtractLocal(edgeMiddlePoint));
      }
    }
    if (crossingVectors.size() == 0) {
      return false;
    }
    List<Vector3f> distinctCrossingVectors=new ArrayList<Vector3f>();
    for (    Vector3f cv : crossingVectors) {
      double minDistance=Double.MAX_VALUE;
      for (      Vector3f dcv : distinctCrossingVectors) {
        minDistance=Math.min(minDistance,dcv.distance(cv));
      }
      if (minDistance > FastMath.FLT_EPSILON) {
        distinctCrossingVectors.add(cv);
      }
    }
    if (distinctCrossingVectors.size() == 0) {
      throw new IllegalStateException("There MUST be at least 2 crossing vertices!");
    }
    float direction=Math.signum(distinctCrossingVectors.get(0).dot(edgeNormal));
    for (int i=1; i < distinctCrossingVectors.size(); ++i) {
      if (direction != Math.signum(distinctCrossingVectors.get(i).dot(edgeNormal))) {
        return true;
      }
    }
    return false;
  }
  return true;
}
