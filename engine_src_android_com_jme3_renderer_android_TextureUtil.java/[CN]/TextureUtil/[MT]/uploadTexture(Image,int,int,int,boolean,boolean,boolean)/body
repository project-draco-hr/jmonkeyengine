{
  if (img.getEfficentData() instanceof Bitmap) {
    Bitmap bitmap=(Bitmap)img.getEfficentData();
    uploadTextureBitmap(target,bitmap,generateMips,powerOf2);
    return;
  }
  Image.Format fmt=img.getFormat();
  ByteBuffer data;
  if (index >= 0 || img.getData() != null && img.getData().size() > 0) {
    data=img.getData(index);
  }
 else {
    data=null;
  }
  int width=img.getWidth();
  int height=img.getHeight();
  boolean compress=false;
  int format=-1;
  int dataType=-1;
switch (fmt) {
case Alpha16:
    format=GL10.GL_ALPHA;
  dataType=GL10.GL_UNSIGNED_BYTE;
break;
case Alpha8:
format=GL10.GL_ALPHA;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case Luminance8:
format=GL10.GL_LUMINANCE;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case Luminance8Alpha8:
format=GL10.GL_LUMINANCE_ALPHA;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case Luminance16Alpha16:
format=GL10.GL_LUMINANCE_ALPHA;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case Luminance16:
format=GL10.GL_LUMINANCE;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case RGB565:
format=GL10.GL_RGB;
dataType=GL10.GL_UNSIGNED_SHORT_5_6_5;
break;
case ARGB4444:
format=GL10.GL_RGBA;
dataType=GL10.GL_UNSIGNED_SHORT_4_4_4_4;
break;
case RGB10:
format=GL10.GL_RGB;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case RGB16:
format=GL10.GL_RGB;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case RGB5A1:
format=GL10.GL_RGBA;
dataType=GL10.GL_UNSIGNED_SHORT_5_5_5_1;
break;
case RGB8:
format=GL10.GL_RGB;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case BGR8:
format=GL10.GL_RGB;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case RGBA16:
format=GL10.GL_RGBA;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
case RGBA8:
format=GL10.GL_RGBA;
dataType=GL10.GL_UNSIGNED_BYTE;
break;
default :
throw new UnsupportedOperationException("Unrecognized format: " + fmt);
}
if (data != null) GLES20.glPixelStorei(GLES20.GL_UNPACK_ALIGNMENT,1);
int[] mipSizes=img.getMipMapSizes();
int pos=0;
if (mipSizes == null) {
if (data != null) mipSizes=new int[]{data.capacity()};
 else mipSizes=new int[]{width * height * fmt.getBitsPerPixel() / 8};
}
if (compress) {
data.clear();
GLES20.glCompressedTexImage2D(GLES20.GL_TEXTURE_2D,1 - mipSizes.length,format,width,height,0,data.capacity(),data);
return;
}
for (int i=0; i < mipSizes.length; i++) {
int mipWidth=Math.max(1,width >> i);
int mipHeight=Math.max(1,height >> i);
if (data != null) {
data.position(pos);
data.limit(pos + mipSizes[i]);
}
if (compress && data != null) {
GLES20.glCompressedTexImage2D(GLES20.GL_TEXTURE_2D,i,format,mipWidth,mipHeight,0,data.remaining(),data);
}
 else {
GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,i,format,mipWidth,mipHeight,0,format,dataType,data);
}
pos+=mipSizes[i];
}
}
