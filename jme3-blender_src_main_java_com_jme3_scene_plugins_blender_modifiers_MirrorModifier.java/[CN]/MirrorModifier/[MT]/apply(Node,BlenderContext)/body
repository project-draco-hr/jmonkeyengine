{
  if (invalid) {
    LOGGER.log(Level.WARNING,"Mirror modifier is invalid! Cannot be applied to: {0}",node.getName());
  }
 else {
    TemporalMesh temporalMesh=this.getTemporalMesh(node);
    if (temporalMesh != null) {
      LOGGER.log(Level.FINE,"Applying mirror modifier to: {0}",temporalMesh);
      Vector3f mirrorPlaneCenter=new Vector3f();
      if (pMirrorObject.isNotNull()) {
        Structure objectStructure;
        try {
          objectStructure=pMirrorObject.fetchData().get(0);
          ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
          Node object=(Node)objectHelper.toObject(objectStructure,blenderContext);
          if (object != null) {
            mirrorPlaneCenter=this.getWorldMatrix(node).invertLocal().mult(object.getWorldTranslation());
          }
        }
 catch (        BlenderFileException e) {
          LOGGER.log(Level.SEVERE,"Cannot load mirror''s reference object. Cause: {0}",e.getLocalizedMessage());
          LOGGER.log(Level.SEVERE,"Mirror modifier will not be applied to node named: {0}",node.getName());
          return;
        }
      }
      LOGGER.finest("Allocating temporal variables.");
      float d;
      Vector3f mirrorPlaneNormal=new Vector3f();
      Vector3f shiftVector=new Vector3f();
      LOGGER.fine("Mirroring mesh.");
      for (int mirrorIndex=0; mirrorIndex < 3; ++mirrorIndex) {
        if (isMirrored[mirrorIndex]) {
          boolean mirrorAtPoint0=mirrorPlaneCenter.get(mirrorIndex) == 0;
          if (!mirrorAtPoint0) {
            mirrorPlaneNormal.set(0,0,0).set(mirrorIndex,Math.signum(mirrorPlaneCenter.get(mirrorIndex)));
          }
          TemporalMesh mirror=temporalMesh.clone();
          for (int i=0; i < mirror.getVertexCount(); ++i) {
            Vector3f vertex=mirror.getVertex(i);
            Vector3f normal=mirror.getNormal(i);
            if (mirrorAtPoint0) {
              d=Math.abs(vertex.get(mirrorIndex));
              shiftVector.set(0,0,0).set(mirrorIndex,-vertex.get(mirrorIndex));
            }
 else {
              d=this.computeDistanceFromPlane(vertex,mirrorPlaneCenter,mirrorPlaneNormal);
              mirrorPlaneNormal.mult(d,shiftVector);
            }
            if (merge && d <= tolerance) {
              vertex.addLocal(shiftVector);
              normal.set(mirrorIndex,0);
              temporalMesh.getVertex(i).addLocal(shiftVector);
              temporalMesh.getNormal(i).set(mirrorIndex,0);
            }
 else {
              vertex.addLocal(shiftVector.multLocal(2));
              normal.set(mirrorIndex,-normal.get(mirrorIndex));
            }
          }
          mirror.flipIndexes();
          if (mirrorU || mirrorV) {
            mirror.flipUV(mirrorU,mirrorV);
          }
          temporalMesh.append(mirror);
        }
      }
    }
 else {
      LOGGER.log(Level.WARNING,"Cannot find temporal mesh for node: {0}. The modifier will NOT be applied!",node);
    }
  }
}
