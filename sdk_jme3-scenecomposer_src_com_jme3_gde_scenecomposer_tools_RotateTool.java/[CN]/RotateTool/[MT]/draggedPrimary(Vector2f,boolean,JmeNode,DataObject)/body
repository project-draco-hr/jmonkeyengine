{
  if (!pressed) {
    setDefaultAxisMarkerColors();
    pickedPlane=null;
    lastScreenCoord=null;
    if (wasDragging) {
      actionPerformed(new ScaleUndo(toolController.getSelectedSpatial(),startRotate,lastRotate));
      wasDragging=false;
    }
    return;
  }
  if (toolController.getSelectedSpatial() == null) {
    return;
  }
  if (pickedPlane == null) {
    pickedPlane=pickAxisMarker(camera,screenCoord,axisPickType);
    if (pickedPlane == null) {
      return;
    }
    startRotate=toolController.getSelectedSpatial().getLocalRotation().clone();
  }
  if (lastScreenCoord == null) {
    lastScreenCoord=screenCoord;
  }
 else {
    Quaternion rotate=new Quaternion();
    float diff;
    if (pickedPlane.equals(QUAD_XY)) {
      diff=-(screenCoord.x - lastScreenCoord.x);
      diff*=0.03f;
      rotate=rotate.fromAngleAxis(diff,Vector3f.UNIT_Z);
    }
 else     if (pickedPlane.equals(QUAD_YZ)) {
      diff=-(screenCoord.y - lastScreenCoord.y);
      diff*=0.03f;
      rotate=rotate.fromAngleAxis(diff,Vector3f.UNIT_X);
    }
 else     if (pickedPlane.equals(QUAD_XZ)) {
      diff=screenCoord.x - lastScreenCoord.x;
      diff*=0.03f;
      rotate=rotate.fromAngleAxis(diff,Vector3f.UNIT_Y);
    }
    lastScreenCoord=screenCoord;
    Quaternion rotation=toolController.getSelectedSpatial().getLocalRotation().mult(rotate);
    lastRotate=rotation;
    toolController.getSelectedSpatial().setLocalRotation(rotation);
    updateToolsTransformation();
  }
  wasDragging=true;
}
