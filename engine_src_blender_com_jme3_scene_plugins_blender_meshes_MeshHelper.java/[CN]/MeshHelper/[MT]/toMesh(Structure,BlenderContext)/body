{
  List<Geometry> geometries=(List<Geometry>)blenderContext.getLoadedFeature(structure.getOldMemoryAddress(),LoadedFeatureDataType.LOADED_FEATURE);
  if (geometries != null) {
    List<Geometry> copiedGeometries=new ArrayList<Geometry>(geometries.size());
    for (    Geometry geometry : geometries) {
      copiedGeometries.add(geometry.clone());
    }
    return copiedGeometries;
  }
  String name=structure.getName();
  MeshContext meshContext=new MeshContext();
  LOGGER.log(Level.FINE,"Reading mesh: {0}.",name);
  LOGGER.fine("Loading materials.");
  MaterialHelper materialHelper=blenderContext.getHelper(MaterialHelper.class);
  MaterialContext[] materials=null;
  if ((blenderContext.getBlenderKey().getFeaturesToLoad() & FeaturesToLoad.MATERIALS) != 0) {
    materials=materialHelper.getMaterials(structure,blenderContext);
  }
  LOGGER.fine("Reading vertices and their colors.");
  Vector3f[][] verticesAndNormals=this.getVerticesAndNormals(structure,blenderContext);
  List<byte[]> verticesColors=this.getVerticesColors(structure,blenderContext);
  MeshBuilder meshBuilder=new MeshBuilder(verticesAndNormals,verticesColors,this.areGeneratedTexturesPresent(materials));
  if (this.isBMeshCompatible(structure)) {
    this.readBMesh(meshBuilder,structure,blenderContext);
  }
 else {
    this.readTraditionalFaces(meshBuilder,structure,blenderContext);
  }
  if (meshBuilder.isEmpty()) {
    LOGGER.fine("The geometry is empty.");
    geometries=new ArrayList<Geometry>(0);
    blenderContext.addLoadedFeatures(structure.getOldMemoryAddress(),structure.getName(),structure,geometries);
    blenderContext.setMeshContext(structure.getOldMemoryAddress(),meshContext);
    return geometries;
  }
  meshContext.setVertexReferenceMap(meshBuilder.getVertexReferenceMap());
  LOGGER.fine("Reading vertices groups (from the Object structure).");
  Structure parent=blenderContext.peekParent();
  Structure defbase=(Structure)parent.getFieldValue("defbase");
  List<Structure> defs=defbase.evaluateListBase(blenderContext);
  String[] verticesGroups=new String[defs.size()];
  int defIndex=0;
  for (  Structure def : defs) {
    verticesGroups[defIndex++]=def.getFieldValue("name").toString();
  }
  LOGGER.fine("Reading custom properties.");
  Properties properties=this.loadProperties(structure,blenderContext);
  LOGGER.fine("Generating meshes.");
  geometries=new ArrayList<Geometry>(meshBuilder.getMeshesPartAmount());
  for (  Entry<Integer,List<Integer>> meshEntry : meshBuilder.getMeshesMap().entrySet()) {
    int materialIndex=meshEntry.getKey();
    Mesh mesh=new Mesh();
    List<Integer> indexList=meshEntry.getValue();
    if (meshBuilder.getVerticesAmount(materialIndex) <= Short.MAX_VALUE) {
      short[] indices=new short[indexList.size()];
      for (int i=0; i < indexList.size(); ++i) {
        indices[i]=indexList.get(i).shortValue();
      }
      mesh.setBuffer(Type.Index,1,indices);
    }
 else {
      int[] indices=new int[indexList.size()];
      for (int i=0; i < indexList.size(); ++i) {
        indices[i]=indexList.get(i).intValue();
      }
      mesh.setBuffer(Type.Index,1,indices);
    }
    LOGGER.fine("Creating vertices buffer.");
    VertexBuffer verticesBuffer=new VertexBuffer(Type.Position);
    verticesBuffer.setupData(Usage.Static,3,Format.Float,BufferUtils.createFloatBuffer(meshBuilder.getVertices(materialIndex)));
    mesh.setBuffer(verticesBuffer);
    LOGGER.fine("Creating normals buffer.");
    VertexBuffer normalsBuffer=new VertexBuffer(Type.Normal);
    normalsBuffer.setupData(Usage.Static,3,Format.Float,BufferUtils.createFloatBuffer(meshBuilder.getNormals(materialIndex)));
    mesh.setBuffer(normalsBuffer);
    if (verticesColors != null) {
      LOGGER.fine("Setting vertices colors.");
      mesh.setBuffer(Type.Color,4,meshBuilder.getVertexColorsBuffer(materialIndex));
      mesh.getBuffer(Type.Color).setNormalized(true);
    }
    LOGGER.fine("Preparing the result part.");
    Geometry geometry=new Geometry(name + (geometries.size() + 1),mesh);
    if (properties != null && properties.getValue() != null) {
      this.applyProperties(geometry,properties);
    }
    geometries.add(geometry);
    meshContext.putGeometry(materialIndex,geometry);
  }
  blenderContext.addLoadedFeatures(structure.getOldMemoryAddress(),structure.getName(),structure,geometries);
  blenderContext.setMeshContext(structure.getOldMemoryAddress(),meshContext);
  if (materials != null) {
    for (    Geometry geometry : geometries) {
      int materialNumber=meshContext.getMaterialIndex(geometry);
      if (materials[materialNumber] != null) {
        LinkedHashMap<String,List<Vector2f>> uvCoordinates=meshBuilder.getUVCoordinates(materialNumber);
        MaterialContext materialContext=materials[materialNumber];
        materialContext.applyMaterial(geometry,structure.getOldMemoryAddress(),uvCoordinates,blenderContext);
      }
 else {
        geometry.setMaterial(blenderContext.getDefaultMaterial());
        LOGGER.warning("The importer came accross mesh that points to a null material. Default material is used to prevent loader from crashing, " + "but the model might look not the way it should. Sometimes blender does not assign materials properly. " + "Enter the edit mode and assign materials once more to your faces.");
      }
    }
  }
 else {
    List<VertexBuffer> uvCoordsBuffer=null;
    if (meshBuilder.hasUVCoordinates()) {
      Map<String,List<Vector2f>> uvs=meshBuilder.getUVCoordinates(0);
      if (uvs != null && uvs.size() > 0) {
        uvCoordsBuffer=new ArrayList<VertexBuffer>(uvs.size());
        int uvIndex=0;
        for (        Entry<String,List<Vector2f>> entry : uvs.entrySet()) {
          VertexBuffer buffer=new VertexBuffer(TextureHelper.TEXCOORD_TYPES[uvIndex++]);
          buffer.setupData(Usage.Static,2,Format.Float,BufferUtils.createFloatBuffer(entry.getValue().toArray(new Vector2f[uvs.size()])));
          uvCoordsBuffer.add(buffer);
        }
      }
    }
    for (    Geometry geometry : geometries) {
      geometry.setMaterial(blenderContext.getDefaultMaterial());
      if (uvCoordsBuffer != null) {
        for (        VertexBuffer buffer : uvCoordsBuffer) {
          geometry.getMesh().setBuffer(buffer);
        }
      }
    }
  }
  return geometries;
}
