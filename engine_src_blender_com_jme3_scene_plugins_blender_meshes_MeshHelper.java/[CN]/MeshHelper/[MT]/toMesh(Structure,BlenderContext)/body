{
  List<Geometry> geometries=(List<Geometry>)blenderContext.getLoadedFeature(structure.getOldMemoryAddress(),LoadedFeatureDataType.LOADED_FEATURE);
  if (geometries != null) {
    List<Geometry> copiedGeometries=new ArrayList<Geometry>(geometries.size());
    for (    Geometry geometry : geometries) {
      copiedGeometries.add(geometry.clone());
    }
    return copiedGeometries;
  }
  String name=structure.getName();
  MeshContext meshContext=new MeshContext();
  MaterialHelper materialHelper=blenderContext.getHelper(MaterialHelper.class);
  MaterialContext[] materials=null;
  if ((blenderContext.getBlenderKey().getFeaturesToLoad() & FeaturesToLoad.MATERIALS) != 0) {
    materials=materialHelper.getMaterials(structure,blenderContext);
  }
  Vector3f[] vertices=this.getVertices(structure,blenderContext);
  List<byte[]> verticesColors=this.getVerticesColors(structure,blenderContext);
  MeshBuilder meshBuilder=new MeshBuilder(vertices,verticesColors,this.areGeneratedTexturesPresent(materials));
  Pointer pMFace=(Pointer)structure.getFieldValue("mface");
  List<Structure> mFaces=null;
  if (pMFace.isNotNull()) {
    mFaces=pMFace.fetchData(blenderContext.getInputStream());
    if (mFaces == null || mFaces.size() == 0) {
      return new ArrayList<Geometry>(0);
    }
  }
 else {
    mFaces=new ArrayList<Structure>(0);
  }
  Pointer pMTFace=(Pointer)structure.getFieldValue("mtface");
  List<Structure> mtFaces=null;
  if (pMTFace.isNotNull()) {
    mtFaces=pMTFace.fetchData(blenderContext.getInputStream());
    int facesAmount=((Number)structure.getFieldValue("totface")).intValue();
    if (mtFaces.size() != facesAmount) {
      throw new BlenderFileException("The amount of faces uv coordinates is not equal to faces amount!");
    }
  }
  Vector2f[] uvCoordinatesForFace=new Vector2f[3];
  for (int i=0; i < mFaces.size(); ++i) {
    Structure mFace=mFaces.get(i);
    int materialNumber=((Number)mFace.getFieldValue("mat_nr")).intValue();
    boolean smooth=(((Number)mFace.getFieldValue("flag")).byteValue() & 0x01) != 0x00;
    DynamicArray<Number> uvs=null;
    if (mtFaces != null) {
      Structure mtFace=mtFaces.get(i);
      uvs=(DynamicArray<Number>)mtFace.getFieldValue("uv");
      uvCoordinatesForFace[0]=new Vector2f(uvs.get(0,0).floatValue(),uvs.get(0,1).floatValue());
      uvCoordinatesForFace[1]=new Vector2f(uvs.get(1,0).floatValue(),uvs.get(1,1).floatValue());
      uvCoordinatesForFace[2]=new Vector2f(uvs.get(2,0).floatValue(),uvs.get(2,1).floatValue());
    }
    int v1=((Number)mFace.getFieldValue("v1")).intValue();
    int v2=((Number)mFace.getFieldValue("v2")).intValue();
    int v3=((Number)mFace.getFieldValue("v3")).intValue();
    int v4=((Number)mFace.getFieldValue("v4")).intValue();
    meshBuilder.appendFace(v1,v2,v3,smooth,materialNumber,uvs == null ? null : uvCoordinatesForFace,false,i);
    if (v4 > 0) {
      if (uvs != null) {
        uvCoordinatesForFace[0]=new Vector2f(uvs.get(0,0).floatValue(),uvs.get(0,1).floatValue());
        uvCoordinatesForFace[1]=new Vector2f(uvs.get(2,0).floatValue(),uvs.get(2,1).floatValue());
        uvCoordinatesForFace[2]=new Vector2f(uvs.get(3,0).floatValue(),uvs.get(3,1).floatValue());
      }
      meshBuilder.appendFace(v1,v3,v4,smooth,materialNumber,uvs == null ? null : uvCoordinatesForFace,true,i);
    }
  }
  meshContext.setVertexReferenceMap(meshBuilder.getVertexReferenceMap());
  Structure parent=blenderContext.peekParent();
  Structure defbase=(Structure)parent.getFieldValue("defbase");
  List<Structure> defs=defbase.evaluateListBase(blenderContext);
  String[] verticesGroups=new String[defs.size()];
  int defIndex=0;
  for (  Structure def : defs) {
    verticesGroups[defIndex++]=def.getFieldValue("name").toString();
  }
  geometries=new ArrayList<Geometry>(meshBuilder.getMeshesPartAmount());
  Properties properties=this.loadProperties(structure,blenderContext);
  for (  Entry<Integer,List<Integer>> meshEntry : meshBuilder.getMeshesMap().entrySet()) {
    int materialIndex=meshEntry.getKey();
    Mesh mesh=new Mesh();
    List<Integer> indexList=meshEntry.getValue();
    if (meshBuilder.getVerticesAmount(materialIndex) <= Short.MAX_VALUE) {
      short[] indices=new short[indexList.size()];
      for (int i=0; i < indexList.size(); ++i) {
        indices[i]=indexList.get(i).shortValue();
      }
      mesh.setBuffer(Type.Index,1,indices);
    }
 else {
      int[] indices=new int[indexList.size()];
      for (int i=0; i < indexList.size(); ++i) {
        indices[i]=indexList.get(i).intValue();
      }
      mesh.setBuffer(Type.Index,1,indices);
    }
    VertexBuffer verticesBuffer=new VertexBuffer(Type.Position);
    verticesBuffer.setupData(Usage.Static,3,Format.Float,BufferUtils.createFloatBuffer(meshBuilder.getVertices(materialIndex)));
    VertexBuffer verticesBind=new VertexBuffer(Type.BindPosePosition);
    verticesBind.setupData(Usage.CpuOnly,3,Format.Float,BufferUtils.clone(verticesBuffer.getData()));
    VertexBuffer normalsBuffer=new VertexBuffer(Type.Normal);
    normalsBuffer.setupData(Usage.Static,3,Format.Float,BufferUtils.createFloatBuffer(meshBuilder.getNormals(materialIndex)));
    VertexBuffer normalsBind=new VertexBuffer(Type.BindPoseNormal);
    normalsBind.setupData(Usage.CpuOnly,3,Format.Float,BufferUtils.clone(normalsBuffer.getData()));
    mesh.setBuffer(verticesBuffer);
    meshContext.setBindPoseBuffer(verticesBind);
    if (verticesColors != null) {
      mesh.setBuffer(Type.Color,4,meshBuilder.getVertexColorsBuffer(materialIndex));
      mesh.getBuffer(Type.Color).setNormalized(true);
    }
    mesh.setBuffer(normalsBuffer);
    meshContext.setBindNormalBuffer(normalsBind);
    Geometry geometry=new Geometry(name + (geometries.size() + 1),mesh);
    if (properties != null && properties.getValue() != null) {
      geometry.setUserData("properties",properties);
    }
    geometries.add(geometry);
    meshContext.putGeometry(materialIndex,geometry);
  }
  blenderContext.addLoadedFeatures(structure.getOldMemoryAddress(),structure.getName(),structure,geometries);
  blenderContext.setMeshContext(structure.getOldMemoryAddress(),meshContext);
  if (materials != null) {
    for (    Geometry geometry : geometries) {
      int materialNumber=meshContext.getMaterialIndex(geometry);
      if (materials[materialNumber] != null) {
        List<Vector2f> uvCoordinates=meshBuilder.getUVCoordinates(materialNumber);
        MaterialContext materialContext=materials[materialNumber];
        materialContext.applyMaterial(geometry,structure.getOldMemoryAddress(),uvCoordinates,blenderContext);
      }
    }
  }
 else {
    VertexBuffer uvCoordsBuffer=null;
    if (meshBuilder.hasUVCoordinates()) {
      List<Vector2f> uvs=meshBuilder.getUVCoordinates(0);
      uvCoordsBuffer=new VertexBuffer(Type.TexCoord);
      uvCoordsBuffer.setupData(Usage.Static,2,Format.Float,BufferUtils.createFloatBuffer(uvs.toArray(new Vector2f[uvs.size()])));
    }
    for (    Geometry geometry : geometries) {
      geometry.setMaterial(blenderContext.getDefaultMaterial());
      if (uvCoordsBuffer != null) {
        geometry.getMesh().setBuffer(uvCoordsBuffer);
      }
    }
  }
  return geometries;
}
