def draw(self, context):
    layout = self.layout
    slot = context.texture_slot
    if ((not slot) or (not slot.texture)):
        return
    btype = slot.blend_type
    ex = False
    texop = None
    if (btype in TextureUnit.colour_op):
        if ((btype == 'MIX') and slot.use_map_alpha and (not slot.use_stencil)):
            if (slot.diffuse_color_factor >= 1.0):
                texop = 'alpha_blend'
            else:
                texop = TextureUnit.colour_op_ex[btype]
                ex = True
        elif ((btype == 'MIX') and slot.use_map_alpha and slot.use_stencil):
            texop = 'blend_current_alpha'
            ex = True
        elif ((btype == 'MIX') and (not slot.use_map_alpha) and slot.use_stencil):
            texop = 'blend_texture_alpha'
            ex = True
        else:
            texop = TextureUnit.colour_op[btype]
    elif (btype in TextureUnit.colour_op_ex):
        texop = TextureUnit.colour_op_ex[btype]
        ex = True
    box = layout.box()
    row = box.row()
    if texop:
        if ex:
            row.prop(slot, 'blend_type', text=texop, icon='NEW')
        else:
            row.prop(slot, 'blend_type', text=texop)
    else:
        row.prop(slot, 'blend_type', text='(invalid option)')
    if (btype == 'MIX'):
        row.prop(slot, 'use_stencil', text='')
        row.prop(slot, 'use_map_alpha', text='')
        if (texop == 'blend_manual'):
            row = box.row()
            row.label(text='Alpha:')
            row.prop(slot, 'diffuse_color_factor', text='')
    if (hasattr(slot.texture, 'image') and slot.texture.image):
        row = box.row()
        n = '(invalid option)'
        if (slot.texture.extension in TextureUnit.tex_address_mode):
            n = TextureUnit.tex_address_mode[slot.texture.extension]
        row.prop(slot.texture, 'extension', text=n)
        if (slot.texture.extension == 'CLIP'):
            row.prop(slot, 'color', text='Border Color')
    row = box.row()
    if (slot.texture_coords == 'UV'):
        row.prop(slot, 'texture_coords', text='', icon='GROUP_UVS')
        row.prop(slot, 'uv_layer', text='Layer')
    elif (slot.texture_coords == 'REFLECTION'):
        row.prop(slot, 'texture_coords', text='', icon='MOD_UVPROJECT')
        n = '(invalid option)'
        if (slot.mapping in 'FLAT SPHERE'.split()):
            n = ''
        row.prop(slot, 'mapping', text=n)
    else:
        row.prop(slot, 'texture_coords', text='(invalid mapping option)')
    split = layout.row()
    box = split.box()
    box.prop(slot, 'offset', text='XY=offset,  Z=rotation')
    box = split.box()
    box.prop(slot, 'scale', text='XY=scale (Z ignored)')
    box = layout.box()
    row = box.row()
    row.label(text='scrolling animation')
    row.prop(slot, 'use_map_scatter', text='')
    row = box.row()
    row.prop(slot, 'density_factor', text='X')
    row.prop(slot, 'emission_factor', text='Y')
    box = layout.box()
    row = box.row()
    row.label(text='rotation animation')
    row.prop(slot, 'emission_color_factor', text='')
    row.prop(slot, 'use_from_dupli', text='')
    if (hasattr(slot.texture, 'image') and slot.texture.image):
        img = slot.texture.image
        box = layout.box()
        row = box.row()
        row.prop(img, 'use_convert_format')
        if img.use_convert_format:
            row.prop(img, 'convert_format')
            if (img.convert_format == 'jpg'):
                box.prop(img, 'jpeg_quality')
        row = box.row()
        row.prop(img, 'use_color_quantize', text='Reduce Colors')
        if img.use_color_quantize:
            row.prop(img, 'use_color_quantize_dither', text='dither')
            row.prop(img, 'color_quantize', text='colors')
        row = box.row()
        row.prop(img, 'use_resize_half')
        if (not img.use_resize_half):
            row.prop(img, 'use_resize_absolute')
            if img.use_resize_absolute:
                row = box.row()
                row.prop(img, 'resize_x')
                row.prop(img, 'resize_y')
