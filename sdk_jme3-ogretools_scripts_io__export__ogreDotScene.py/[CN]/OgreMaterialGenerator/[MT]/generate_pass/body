def generate_pass(self, mat, pass_name=None):
    usermat = texnodes = None
    if (mat.use_ogre_parent_material and mat.ogre_parent_material):
        usermat = get_ogre_user_material(mat.ogre_parent_material)
        texnodes = bpyShaders.get_texture_subnodes(self.material, mat)
    M = ''
    if (not pass_name):
        pass_name = mat.name
    if usermat:
        M += indent(2, ('pass %s : %s/PASS0' % (pass_name, usermat.name)), '{')
    else:
        M += indent(2, ('pass %s' % pass_name), '{')
    color = mat.diffuse_color
    alpha = 1.0
    if mat.use_transparency:
        alpha = mat.alpha
    slots = get_image_textures(mat)
    usealpha = False
    for slot in slots:
        if slot.texture.use_alpha:
            usealpha = True
            break
    if mat.use_fixed_pipeline:
        f = mat.ambient
        if mat.use_vertex_color_paint:
            M += indent(3, 'ambient vertexcolour')
        else:
            M += indent(3, ('ambient %s %s %s %s' % ((color.r * f), (color.g * f), (color.b * f), alpha)))
        f = mat.diffuse_intensity
        if mat.use_vertex_color_paint:
            M += indent(3, 'diffuse vertexcolour')
        else:
            M += indent(3, ('diffuse %s %s %s %s' % ((color.r * f), (color.g * f), (color.b * f), alpha)))
        f = mat.specular_intensity
        s = mat.specular_color
        M += indent(3, ('specular %s %s %s %s %s' % ((s.r * f), (s.g * f), (s.b * f), alpha, (mat.specular_hardness / 4.0))))
        f = mat.emit
        if mat.use_shadeless:
            M += indent(3, ('emissive %s %s %s 1.0' % (color.r, color.g, color.b)))
        elif mat.use_vertex_color_light:
            M += indent(3, 'emissive vertexcolour')
        else:
            M += indent(3, ('emissive %s %s %s %s' % ((color.r * f), (color.g * f), (color.b * f), alpha)))
        M += '\n'
    if mat.offset_z:
        M += indent(3, ('depth_bias %s' % mat.offset_z))
    for name in dir(mat):
        if (name.startswith('ogre_') and (name != 'ogre_parent_material')):
            var = getattr(mat, name)
            op = name.replace('ogre_', '')
            val = var
            if (type(var) == bool):
                if var:
                    val = 'on'
                else:
                    val = 'off'
            M += indent(3, ('%s %s' % (op, val)))
    M += '\n'
    if (texnodes and usermat.texture_units):
        for (i, name) in enumerate(usermat.texture_units_order):
            if (i < len(texnodes)):
                node = texnodes[i]
                if node.texture:
                    geo = bpyShaders.get_connected_input_nodes(self.material, node)[0]
                    M += self.generate_texture_unit(node.texture, name=name, uv_layer=geo.uv_layer)
    elif slots:
        for slot in slots:
            M += self.generate_texture_unit(slot.texture, slot=slot)
    M += indent(2, '}')
    return M
