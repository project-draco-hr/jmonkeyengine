def __init__(self, txt, url):
    self.url = url
    self.data = txt.strip()
    self.parent = None
    self.vertex_programs = {}
    self.fragment_programs = {}
    self.texture_units = {}
    self.texture_units_order = []
    self.passes = []
    line = self.data.splitlines()[0]
    assert line.startswith('material')
    if (':' in line):
        (line, self.parent) = line.split(':')
    self.name = line.split()[(-1)]
    print ('new ogre material: %s' % self.name)
    brace = 0
    self.techniques = techs = []
    prog = None
    tex = None
    for line in self.data.splitlines():
        rawline = line
        line = line.split('//')[0]
        line = line.strip()
        if (not line):
            continue
        if (line == '{'):
            brace += 1
        elif (line == '}'):
            brace -= 1
            prog = None
            tex = None
        if line.startswith('technique'):
            tech = {'passes': [], }
            techs.append(tech)
            if (len(line.split()) > 1):
                tech['technique-name'] = line.split()[(-1)]
        elif techs:
            if line.startswith('pass'):
                P = {'texture_units': [], 'vprogram': None, 'fprogram': None, 'body': [], }
                tech['passes'].append(P)
                self.passes.append(P)
            elif tech['passes']:
                P = tech['passes'][(-1)]
                P['body'].append(rawline)
                if ((line == '{') or (line == '}')):
                    continue
                if line.startswith('vertex_program_ref'):
                    prog = P['vprogram'] = {'name': line.split()[(-1)], 'params': {}, }
                    self.vertex_programs[prog['name']] = prog
                elif line.startswith('fragment_program_ref'):
                    prog = P['fprogram'] = {'name': line.split()[(-1)], 'params': {}, }
                    self.fragment_programs[prog['name']] = prog
                elif line.startswith('texture_unit'):
                    prog = None
                    tex = {'name': line.split()[(-1)], 'params': {}, }
                    if (tex['name'] == 'texture_unit'):
                        print ('WARNING: material %s contains unnamed texture_units' % self.name)
                        print '---unnamed texture units will be ignored---'
                    else:
                        P['texture_units'].append(tex)
                        self.texture_units[tex['name']] = tex
                        self.texture_units_order.append(tex['name'])
                elif prog:
                    p = line.split()[0]
                    if (p == 'param_named'):
                        items = line.split()
                        if (len(items) == 4):
                            (p, o, t, v) = items
                        elif (len(items) == 3):
                            (p, o, v) = items
                            t = 'class'
                        elif (len(items) > 4):
                            o = items[1]
                            t = items[2]
                            v = items[3:]
                        opt = {'name': o, 'type': t, 'raw_value': v, }
                        prog['params'][o] = opt
                        if (t == 'float'):
                            opt['value'] = float(v)
                        elif (t in 'float2 float3 float4'.split()):
                            opt['value'] = [float(a) for a in v]
                        else:
                            print ('unknown type:', t)
                elif tex:
                    tex['params'][line.split()[0]] = line.split()[1:]
    for P in self.passes:
        lines = P['body']
        while (lines and (''.join(lines).count('{') != ''.join(lines).count('}'))):
            if (lines[(-1)].strip() == '}'):
                lines.pop()
            else:
                break
        P['body'] = '\n'.join(lines)
        assert (P['body'].count('{') == P['body'].count('}'))
    self.hidden_texture_units = rem = []
    for tex in self.texture_units.values():
        if ('texture' not in tex['params']):
            rem.append(tex)
    for tex in rem:
        print ('WARNING: not using texture_unit because it lacks a "texture" parameter', tex['name'])
        self.texture_units.pop(tex['name'])
    if (len(self.techniques) > 1):
        print ('WARNING: user material %s has more than one technique' % self.url)
