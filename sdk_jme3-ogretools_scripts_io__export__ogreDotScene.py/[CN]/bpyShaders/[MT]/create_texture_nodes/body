@staticmethod
def create_texture_nodes(mat, n=6, geoms=True):
    assert mat.node_tree
    mats = bpyShaders.get_or_create_material_passes(mat)
    r = {}
    x = 400
    for (i, m) in enumerate(mats):
        r['material'] = m
        r['textures'] = []
        r['geoms'] = []
        inputs = []
        for tag in ['Mirror', 'Ambient', 'Emit', 'SpecTra', 'Ray Mirror', 'Translucency']:
            inputs.append(m.inputs[tag])
        for j in range(n):
            tex = mat.node_tree.nodes.new(type='TEXTURE')
            tex.name = ('TEX.%s.%s' % (j, m.name))
            tex.location.x = (x - (j * 16))
            tex.location.y = (- (j * 230))
            input = inputs[j]
            output = tex.outputs['Color']
            link = mat.node_tree.links.new(input, output)
            r['textures'].append(tex)
            if geoms:
                geo = mat.node_tree.nodes.new(type='GEOMETRY')
                link = mat.node_tree.links.new(tex.inputs['Vector'], geo.outputs['UV'])
                geo.location.x = ((x - (j * 16)) - 250)
                geo.location.y = ((- (j * 250)) - 1500)
                r['geoms'].append(geo)
        x += 220
    return r
