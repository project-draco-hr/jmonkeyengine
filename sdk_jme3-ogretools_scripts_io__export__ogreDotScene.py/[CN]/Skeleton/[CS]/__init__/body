def __init__(self, ob):
    if ((ob.location.x != 0) or (ob.location.y != 0) or (ob.location.z != 0)):
        Report.warnings.append(('ERROR: Mesh (%s): is offset from Armature - zero transform is required' % ob.name))
    if ((ob.scale.x != 1) or (ob.scale.y != 1) or (ob.scale.z != 1)):
        Report.warnings.append(('ERROR: Mesh (%s): has been scaled - scale(1,1,1) is required' % ob.name))
    self.object = ob
    self.bones = []
    mats = {}
    self.arm = arm = ob.find_armature()
    arm.hide = False
    self._restore_layers = list(arm.layers)
    for pbone in arm.pose.bones:
        if (pbone.bone.use_deform or (not CONFIG['ONLY_DEFORMABLE_BONES'])):
            mybone = Bone(arm.data.bones[pbone.name], pbone, self)
            self.bones.append(mybone)
    if (arm.name not in Report.armatures):
        Report.armatures.append(arm.name)
    (x, y, z) = arm.matrix_local.to_euler()
    if ((x != 0) or (y != 0) or (z != 0)):
        Report.warnings.append(('ERROR: Armature: %s is rotated - (rotation is ignored)' % arm.name))
    for b in self.bones:
        b.rebuild_tree()
    self.roots = []
    ep = 0.0001
    for b in self.bones:
        if (not b.parent):
            b.compute_rest()
            (loc, rot, scl) = b.ogre_rest_matrix.decompose()
            self.roots.append(b)
