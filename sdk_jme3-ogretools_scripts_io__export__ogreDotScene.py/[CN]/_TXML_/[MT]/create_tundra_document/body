def create_tundra_document(self, context):
    proto = 'local://'
    doc = RDocument()
    scn = doc.createElement('scene')
    doc.appendChild(scn)
    if 0:
        e = doc.createElement('entity')
        doc.documentElement.appendChild(e)
        e.setAttribute('id', (len(doc.documentElement.childNodes) + 1))
        c = doc.createElement('component')
        e.appendChild(c)
        c.setAttribute('type', 'EC_Script')
        c.setAttribute('sync', '1')
        c.setAttribute('name', 'myscript')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Script ref')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Run on load')
        a.setAttribute('value', 'true')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Run mode')
        a.setAttribute('value', '0')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Script application name')
        a.setAttribute('value', 'blender2ogre')
    sun = hemi = None
    if get_lights_by_type('SUN'):
        sun = get_lights_by_type('SUN')[0]
    if get_lights_by_type('HEMI'):
        hemi = get_lights_by_type('HEMI')[0]
    if (bpy.context.scene.world.mist_settings.use_mist or sun or hemi):
        e = doc.createElement('entity')
        doc.documentElement.appendChild(e)
        e.setAttribute('id', (len(doc.documentElement.childNodes) + 1))
        c = doc.createElement('component')
        e.appendChild(c)
        c.setAttribute('type', 'EC_Fog')
        c.setAttribute('sync', '1')
        c.setAttribute('name', 'blender-environment-fog')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Color')
        if bpy.context.scene.world.mist_settings.use_mist:
            A = bpy.context.scene.world.mist_settings.intensity
            (R, G, B) = bpy.context.scene.world.horizon_color
            a.setAttribute('value', ('%s %s %s %s' % (R, G, B, A)))
        else:
            a.setAttribute('value', '0.4 0.4 0.4 1.0')
        if bpy.context.scene.world.mist_settings.use_mist:
            mist = bpy.context.scene.world.mist_settings
            a = doc.createElement('attribute')
            c.appendChild(a)
            a.setAttribute('name', 'Start distance')
            a.setAttribute('value', mist.start)
            a = doc.createElement('attribute')
            c.appendChild(a)
            a.setAttribute('name', 'End distance')
            a.setAttribute('value', (mist.start + mist.depth))
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Exponential density')
        a.setAttribute('value', 0.001)
        c = doc.createElement('component')
        e.appendChild(c)
        c.setAttribute('type', 'EC_EnvironmentLight')
        c.setAttribute('sync', '1')
        c.setAttribute('name', 'blender-environment-light')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Sunlight color')
        if sun:
            (R, G, B) = sun.data.color
            a.setAttribute('value', ('%s %s %s 1' % (R, G, B)))
        else:
            a.setAttribute('value', '0 0 0 1')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Brightness')
        if sun:
            a.setAttribute('value', (sun.data.energy * 10))
        else:
            a.setAttribute('value', '0')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Ambient light color')
        if hemi:
            (R, G, B) = ((hemi.data.color * hemi.data.energy) * 3.0)
            if (R > 1.0):
                R = 1.0
            if (G > 1.0):
                G = 1.0
            if (B > 1.0):
                B = 1.0
            a.setAttribute('value', ('%s %s %s 1' % (R, G, B)))
        else:
            a.setAttribute('value', '0 0 0 1')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Sunlight direction vector')
        a.setAttribute('value', '-0.25 -1.0 -0.25')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Sunlight cast shadows')
        a.setAttribute('value', 'true')
    if context.scene.world.ogre_skyX:
        c = doc.createElement('component')
        e.appendChild(c)
        c.setAttribute('type', 'EC_SkyX')
        c.setAttribute('sync', '1')
        c.setAttribute('name', 'myskyx')
        a = doc.createElement('attribute')
        a.setAttribute('name', 'Weather (volumetric clouds only)')
        den = (context.scene.world.ogre_skyX_cloud_density_x, context.scene.world.ogre_skyX_cloud_density_y)
        a.setAttribute('value', ('%s %s' % den))
        c.appendChild(a)
        config = (('time', 'Time multiplier'), ('volumetric_clouds', 'Volumetric clouds'), ('wind', 'Wind direction'))
        for (bname, aname) in config:
            a = doc.createElement('attribute')
            a.setAttribute('name', aname)
            s = str(getattr(context.scene.world, ('ogre_skyX_' + bname)))
            a.setAttribute('value', s.lower())
            c.appendChild(a)
    return doc
