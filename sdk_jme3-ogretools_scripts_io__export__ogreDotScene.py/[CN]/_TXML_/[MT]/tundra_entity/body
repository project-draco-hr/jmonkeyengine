def tundra_entity(self, doc, ob, path='/tmp', collision_proxies=[], parent=None, matrix=None, visible=True):
    assert (not ob.subcollision)
    if (not matrix):
        matrix = ob.matrix_world.copy()
    proto = ''
    entityid = uid(ob)
    print ('  Creating Tundra Enitity with ID', entityid)
    e = doc.createElement('entity')
    doc.documentElement.appendChild(e)
    e.setAttribute('id', entityid)
    print ('    - EC_Name with', ob.name)
    c = doc.createElement('component')
    e.appendChild(c)
    c.setAttribute('type', 'EC_Name')
    c.setAttribute('sync', '1')
    a = doc.createElement('attribute')
    c.appendChild(a)
    a.setAttribute('name', 'name')
    a.setAttribute('value', ob.name)
    a = doc.createElement('attribute')
    c.appendChild(a)
    a.setAttribute('name', 'description')
    a.setAttribute('value', '')
    print '    - EC_Placeable '
    c = doc.createElement('component')
    e.appendChild(c)
    c.setAttribute('type', 'EC_Placeable')
    c.setAttribute('sync', '1')
    a = doc.createElement('attribute')
    c.appendChild(a)
    a.setAttribute('name', 'Transform')
    (x, y, z) = swap(matrix.to_translation())
    loc = ('%6f,%6f,%6f' % (x, y, z))
    (x, y, z) = swap(matrix.to_euler())
    x = math.degrees(x)
    y = math.degrees(y)
    z = math.degrees(z)
    if (ob.type == 'CAMERA'):
        x -= 90
    elif (ob.type == 'LAMP'):
        x += 90
    rot = ('%6f,%6f,%6f' % (x, y, z))
    (x, y, z) = swap(matrix.to_scale())
    scl = ('%6f,%6f,%6f' % (abs(x), abs(y), abs(z)))
    a.setAttribute('value', ('%s,%s,%s' % (loc, rot, scl)))
    a = doc.createElement('attribute')
    c.appendChild(a)
    a.setAttribute('name', 'Show bounding box')
    a.setAttribute('value', 'false')
    a = doc.createElement('attribute')
    c.appendChild(a)
    a.setAttribute('name', 'Visible')
    if visible:
        a.setAttribute('value', 'true')
    else:
        a.setAttribute('value', 'false')
    a = doc.createElement('attribute')
    c.appendChild(a)
    a.setAttribute('name', 'Selection layer')
    a.setAttribute('value', 1)
    if parent:
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Parent entity ref')
        a.setAttribute('value', parent)
    if (ob.type != 'MESH'):
        c = doc.createElement('component')
        e.appendChild(c)
        c.setAttribute('type', 'EC_Name')
        c.setAttribute('sync', '1')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'name')
        a.setAttribute('value', ob.name)
    if (ob.type == 'SPEAKER'):
        print '    - EC_Sound'
        c = doc.createElement('component')
        e.appendChild(c)
        c.setAttribute('type', 'EC_Sound')
        c.setAttribute('sync', '1')
        if ob.data.sound:
            abspath = bpy.path.abspath(ob.data.sound.filepath)
            (soundpath, soundfile) = os.path.split(abspath)
            soundref = ('%s%s' % (proto, soundfile))
            print ('      Sounds ref:', soundref)
            a = doc.createElement('attribute')
            c.appendChild(a)
            a.setAttribute('name', 'Sound ref')
            a.setAttribute('value', soundref)
            if (not os.path.isfile(os.path.join(path, soundfile))):
                open(os.path.join(path, soundfile), 'wb').write(open(abspath, 'rb').read())
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Sound radius inner')
        a.setAttribute('value', ob.data.cone_angle_inner)
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Sound radius outer')
        a.setAttribute('value', ob.data.cone_angle_outer)
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Sound gain')
        a.setAttribute('value', ob.data.volume)
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Play on load')
        if ob.data.play_on_load:
            a.setAttribute('value', 'true')
        else:
            a.setAttribute('value', 'false')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Loop sound')
        if ob.data.loop:
            a.setAttribute('value', 'true')
        else:
            a.setAttribute('value', 'false')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Spatial')
        if ob.data.use_spatial:
            a.setAttribute('value', 'true')
        else:
            a.setAttribute('value', 'false')
    ' todo: This is really not very helpful. Apps define\n            camera logic in Tundra. By default you will have\n            a freecamera to move around the scene etc. This created\n            camera wont be activated except if a script does so.\n            Best leave camera (creation) logic for the inworld apps.\n            At least remove the default "export cameras" for txml. '
    if (ob.type == 'CAMERA'):
        print '    - EC_Camera'
        c = doc.createElement('component')
        e.appendChild(c)
        c.setAttribute('type', 'EC_Camera')
        c.setAttribute('sync', '1')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Up vector')
        a.setAttribute('value', '0.0 1.0 0.0')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Near plane')
        a.setAttribute('value', '0.01')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Far plane')
        a.setAttribute('value', '2000')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Vertical FOV')
        a.setAttribute('value', '45')
        a = doc.createElement('attribute')
        c.appendChild(a)
        a.setAttribute('name', 'Aspect ratio')
        a.setAttribute('value', '')
    NTF = None
    if ((ob.physics_mode != 'NONE') or (ob.collision_mode != 'NONE')):
        TundraTypes = {'BOX': 0, 'SPHERE': 1, 'CYLINDER': 2, 'CONE': 0, 'CAPSULE': 3, 'TRIANGLE_MESH': 4, 'CONVEX_HULL': 6, }
        com = doc.createElement('component')
        e.appendChild(com)
        com.setAttribute('type', 'EC_RigidBody')
        com.setAttribute('sync', '1')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Mass')
        if (ob.physics_mode == 'RIGID_BODY'):
            a.setAttribute('value', ob.game.mass)
        else:
            a.setAttribute('value', '0.0')
        SHAPE = a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Shape type')
        a.setAttribute('value', TundraTypes[ob.game.collision_bounds_type])
        print ('    - EC_RigidBody with shape type', TundraTypes[ob.game.collision_bounds_type])
        M = ob.game.collision_margin
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Size')
        if (ob.game.collision_bounds_type in 'TRIANGLE_MESH CONVEX_HULL'.split()):
            a.setAttribute('value', ('%s %s %s' % ((1.0 + M), (1.0 + M), (1.0 + M))))
        else:
            (x, y, z) = swap(ob.dimensions)
            a.setAttribute('value', ('%s %s %s' % ((abs(x) + M), (abs(y) + M), (abs(z) + M))))
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Collision mesh ref')
        if (ob.collision_mode == 'DECIMATED'):
            proxy = None
            for child in ob.children:
                if (child.subcollision and child.name.startswith('DECIMATED')):
                    proxy = child
                    break
            if proxy:
                collisionref = ('%s_collision_%s.mesh' % (proto, proxy.data.name))
                a.setAttribute('value', collisionref)
                if (proxy not in collision_proxies):
                    collision_proxies.append(proxy)
            else:
                print '[WARNINIG]: Collision proxy mesh not found'
                assert 0
        elif (ob.collision_mode == 'TERRAIN'):
            NTF = save_terrain_as_NTF(path, ob)
            SHAPE.setAttribute('value', '5')
        elif (ob.type == 'MESH'):
            collisionref = ('%s%s.mesh' % (proto, ob.data.name))
            a.setAttribute('value', collisionref)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Friction')
        a.setAttribute('value', ob.physics_friction)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Restitution')
        a.setAttribute('value', ob.physics_bounce)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Linear damping')
        a.setAttribute('value', ob.game.damping)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Angular damping')
        a.setAttribute('value', ob.game.rotation_damping)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Linear factor')
        a.setAttribute('value', '1.0 1.0 1.0')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Angular factor')
        a.setAttribute('value', '1.0 1.0 1.0')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Kinematic')
        a.setAttribute('value', 'false')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Phantom')
        if (ob.collision_mode == 'NONE'):
            a.setAttribute('value', 'true')
        else:
            a.setAttribute('value', 'false')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Draw Debug')
        a.setAttribute('value', 'false')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Linear velocity')
        a.setAttribute('value', '0.0 0.0 0.0')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Angular velocity')
        a.setAttribute('value', '0.0 0.0 0.0')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Collision Layer')
        a.setAttribute('value', (-1))
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Collision Mask')
        a.setAttribute('value', (-1))
    if NTF:
        xp = NTF['xpatches']
        yp = NTF['ypatches']
        depth = NTF['depth']
        print '    - EC_Terrain'
        com = doc.createElement('component')
        e.appendChild(com)
        com.setAttribute('type', 'EC_Terrain')
        com.setAttribute('sync', '1')
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Transform')
        (x, y, z) = ob.dimensions
        (sx, sy, sz) = ob.scale
        x *= (1.0 / sx)
        y *= (1.0 / sy)
        z *= (1.0 / sz)
        trans = ('%s,%s,%s,' % (((- xp) / 4), (- depth), ((- yp) / 4)))
        nx = (x / (xp * 16))
        ny = (y / (yp * 16))
        trans += ('0,0,0,%s,%s,%s' % (nx, depth, ny))
        a.setAttribute('value', trans)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Grid Width')
        a.setAttribute('value', xp)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Grid Height')
        a.setAttribute('value', yp)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Tex. U scale')
        a.setAttribute('value', 1.0)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Tex. V scale')
        a.setAttribute('value', 1.0)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Material')
        a.setAttribute('value', '')
        for i in range(4):
            a = doc.createElement('attribute')
            com.appendChild(a)
            a.setAttribute('name', ('Texture %s' % i))
            a.setAttribute('value', '')
        heightmapref = ('%s%s' % (proto, NTF['name']))
        print ('      Heightmap ref:', heightmapref)
        a = doc.createElement('attribute')
        com.appendChild(a)
        a.setAttribute('name', 'Heightmap')
        a.setAttribute('value', heightmapref)
    return e
