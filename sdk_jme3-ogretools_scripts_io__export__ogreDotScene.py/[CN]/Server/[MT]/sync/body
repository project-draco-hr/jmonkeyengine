def sync(self):
    LOD = self.multires_lod()
    p = STREAM_PROTO
    i = 0
    msg = []
    for ob in bpy.context.selected_objects:
        if (ob.type not in ('MESH', 'LAMP', 'SPEAKER')):
            continue
        (loc, rot, scale) = ob.matrix_world.decompose()
        loc = swap(loc).to_tuple()
        (x, y, z) = swap(rot.to_euler())
        rot = (x, y, z)
        (x, y, z) = swap(scale)
        scale = (abs(x), abs(y), abs(z))
        d = {p['ID']: uid(ob), p['POSITION']: loc, p['ROTATION']: rot, p['SCALE']: scale, p['TYPE']: p[ob.type], }
        msg.append(d)
        if ((ob.name == bpy.context.active_object.name) and (LOD is not None)):
            d[p['LOD']] = LOD
        if (ob.type == 'MESH'):
            arm = ob.find_armature()
            if (arm and arm.animation_data and arm.animation_data.nla_tracks):
                anim = None
                d[p['ANIMATIONS']] = state = {}
                for nla in arm.animation_data.nla_tracks:
                    for strip in nla.strips:
                        if strip.active:
                            state[strip.name] = strip.influence
            else:
                pass
        elif (ob.type == 'LAMP'):
            d[p['ENERGY']] = ob.data.energy
            d[p['DISTANCE']] = ob.data.distance
        elif (ob.type == 'SPEAKER'):
            d[p['VOLUME']] = ob.data.volume
            d[p['MUTE']] = ob.data.muted
        if (i >= 10):
            break
    return msg
