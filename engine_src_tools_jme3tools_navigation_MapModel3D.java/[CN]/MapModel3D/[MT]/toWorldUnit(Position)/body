{
  double distance=NavCalculator.computeLongDiff(centre.getLongitude(),position.getLongitude());
  double distanceInPixels=(distance / minutesPerWorldUnit);
  double dmp=NavCalculator.computeDMPClarkeSpheroid(centre.getLatitude(),position.getLatitude());
  int x=0;
  int z=0;
  if (centre.getLatitude() == position.getLatitude()) {
    z=zCentre;
  }
  if (centre.getLongitude() == position.getLongitude()) {
    x=xCentre;
  }
  if (centre.getLatitude() > 0 && position.getLatitude() > centre.getLatitude()) {
    z=zCentre - (int)((dmp) / minutesPerWorldUnit);
  }
 else   if (centre.getLatitude() > 0 && position.getLatitude() < centre.getLatitude()) {
    z=zCentre + (int)((dmp) / minutesPerWorldUnit);
  }
 else   if (centre.getLatitude() < 0 && position.getLatitude() > centre.getLatitude()) {
    z=zCentre - (int)((dmp) / minutesPerWorldUnit);
  }
 else   if (centre.getLatitude() < 0 && position.getLatitude() < centre.getLatitude()) {
    z=zCentre + (int)((dmp) / minutesPerWorldUnit);
  }
 else   if (centre.getLatitude() == 0 && position.getLatitude() > centre.getLatitude()) {
    z=zCentre - (int)((dmp) / minutesPerWorldUnit);
  }
 else   if (centre.getLatitude() == 0 && position.getLatitude() < centre.getLatitude()) {
    z=zCentre + (int)((dmp) / minutesPerWorldUnit);
  }
  if (centre.getLongitude() < 0 && position.getLongitude() < centre.getLongitude()) {
    x=xCentre - (int)distanceInPixels;
  }
 else   if (centre.getLongitude() < 0 && position.getLongitude() > centre.getLongitude()) {
    x=xCentre + (int)distanceInPixels;
  }
 else   if (centre.getLongitude() > 0 && position.getLongitude() < centre.getLongitude()) {
    x=xCentre - (int)distanceInPixels;
  }
 else   if (centre.getLongitude() > 0 && position.getLongitude() > centre.getLongitude()) {
    x=xCentre + (int)distanceInPixels;
  }
 else   if (centre.getLongitude() == 0 && position.getLongitude() > centre.getLongitude()) {
    x=xCentre + (int)distanceInPixels;
  }
 else   if (centre.getLongitude() == 0 && position.getLongitude() < centre.getLongitude()) {
    x=xCentre - (int)distanceInPixels;
  }
  return new Vector3f(x,0,z);
}
