{
  Long boneOMA=boneStructure.getOldMemoryAddress();
  bone=new Bone(boneName);
  bones.add(bone);
  blenderContext.addLoadedFeatures(boneOMA,boneName,boneStructure,bone);
  ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
  Structure skeletonOwnerObjectStructure=(Structure)blenderContext.getLoadedFeature(skeletonOwnerOma,LoadedFeatureDataType.LOADED_STRUCTURE);
  Matrix4f invertedObjectOwnerGlobalMatrix=objectHelper.getMatrix(skeletonOwnerObjectStructure,"imat",blenderContext.getBlenderKey().isFixUpAxis());
  if (objectHelper.isParent(skeletonOwnerOma,armatureObjectOMA)) {
    boneMatrixInModelSpace=globalBoneMatrix.mult(invertedObjectOwnerGlobalMatrix);
  }
 else {
    boneMatrixInModelSpace=invertedObjectOwnerGlobalMatrix.mult(globalBoneMatrix);
  }
  Matrix4f boneLocalMatrix=parent == null ? boneMatrixInModelSpace : parent.boneMatrixInModelSpace.invert().multLocal(boneMatrixInModelSpace);
  Vector3f poseLocation=parent == null || !this.is(CONNECTED_TO_PARENT) ? boneLocalMatrix.toTranslationVector() : new Vector3f(0,parent.length,0);
  Quaternion rotation=boneLocalMatrix.toRotationQuat().normalizeLocal();
  Vector3f scale=boneLocalMatrix.toScaleVector();
  bone.setBindTransforms(poseLocation,rotation,scale);
  for (  BoneContext child : children) {
    bone.addChild(child.buildBone(bones,skeletonOwnerOma,blenderContext));
  }
  return bone;
}
