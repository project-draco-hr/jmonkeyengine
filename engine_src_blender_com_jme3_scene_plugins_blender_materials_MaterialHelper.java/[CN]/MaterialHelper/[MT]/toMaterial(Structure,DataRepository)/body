{
  LOGGER.log(Level.INFO,"Loading material.");
  if (structure == null) {
    return dataRepository.getDefaultMaterial();
  }
  Material result=(Material)dataRepository.getLoadedFeature(structure.getOldMemoryAddress(),LoadedFeatureDataType.LOADED_FEATURE);
  if (result != null) {
    return result;
  }
  int mode=((Number)structure.getFieldValue("mode")).intValue();
  boolean shadeless=(mode & 0x4) != 0;
  boolean vertexColor=(mode & 0x16) != 0;
  boolean transparent=(mode & 0x64) != 0;
  if (shadeless) {
    result=new Material(dataRepository.getAssetManager(),"Common/MatDefs/Misc/Unshaded.j3md");
  }
 else {
    result=new Material(dataRepository.getAssetManager(),"Common/MatDefs/Light/Lighting.j3md");
  }
  result.getAdditionalRenderState().setFaceCullMode(faceCullMode);
  if (transparent) {
    result.setTransparent(true);
    result.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);
  }
  String name=structure.getName();
  LOGGER.log(Level.INFO,"Material's name: {0}",name);
  if (vertexColor) {
    result.setBoolean(shadeless ? "VertexColor" : "UseVertexColor",true);
  }
  MaterialHelper materialHelper=dataRepository.getHelper(MaterialHelper.class);
  ColorRGBA diffuseColor=null;
  if (shadeless) {
  }
 else {
    result.setBoolean("UseMaterialColors",Boolean.TRUE);
    DiffuseShader diffuseShader=materialHelper.getDiffuseShader(structure);
    result.setBoolean("Minnaert",diffuseShader == DiffuseShader.MINNAERT);
    diffuseColor=materialHelper.getDiffuseColor(structure,diffuseShader);
    result.setColor("Diffuse",diffuseColor);
    SpecularShader specularShader=materialHelper.getSpecularShader(structure);
    result.setBoolean("WardIso",specularShader == SpecularShader.WARDISO);
    result.setColor("Specular",materialHelper.getSpecularColor(structure,specularShader));
    result.setColor("Ambient",materialHelper.getAmbientColor(structure));
    result.setFloat("Shininess",materialHelper.getShininess(structure));
  }
  if ((dataRepository.getBlenderKey().getFeaturesToLoad() & FeaturesToLoad.TEXTURES) != 0) {
    TextureHelper textureHelper=dataRepository.getHelper(TextureHelper.class);
    DynamicArray<Pointer> mtexs=(DynamicArray<Pointer>)structure.getFieldValue("mtex");
    int separatedTextures=((Number)structure.getFieldValue("septex")).intValue();
    for (int i=0; i < mtexs.getTotalSize(); ++i) {
      Pointer p=mtexs.get(i);
      if (p.isNotNull() && (separatedTextures & (1 << i)) == 0) {
        List<Structure> mtex=p.fetchData(dataRepository.getInputStream());
        if (mtex.size() == 1) {
          Structure textureLink=mtex.get(0);
          int texflag=((Number)textureLink.getFieldValue("texflag")).intValue();
          boolean negateTexture=(texflag & 0x04) == 0;
          int mapto=((Number)textureLink.getFieldValue("mapto")).intValue();
          if (mapto != 0) {
            Pointer pTex=(Pointer)textureLink.getFieldValue("tex");
            Structure tex=pTex.fetchData(dataRepository.getInputStream()).get(0);
            Texture texture=textureHelper.getTexture(tex,dataRepository);
            if (texture != null) {
              texture.setMinFilter(MinFilter.Trilinear);
              if ((mapto & 0x01) != 0) {
                result.setColor("Diffuse",ColorRGBA.White);
                int blendType=((Number)textureLink.getFieldValue("blendtype")).intValue();
                float[] color=new float[]{((Number)textureLink.getFieldValue("r")).floatValue(),((Number)textureLink.getFieldValue("g")).floatValue(),((Number)textureLink.getFieldValue("b")).floatValue()};
                float colfac=((Number)textureLink.getFieldValue("colfac")).floatValue();
                texture=textureHelper.blendTexture(diffuseColor.getColorArray(),texture,color,colfac,blendType,negateTexture,dataRepository);
                texture.setWrap(WrapMode.Repeat);
                if (shadeless) {
                  result.setTexture(TEXTURE_TYPE_COLOR,texture);
                }
 else {
                  result.setTexture(TEXTURE_TYPE_DIFFUSE,texture);
                }
              }
              if ((mapto & 0x02) != 0) {
                Texture normalMapTexture;
                if (texture.getKey() instanceof GeneratedTextureKey) {
                  normalMapTexture=textureHelper.convertToNormalMapTexture(texture,((Number)textureLink.getFieldValue("norfac")).floatValue());
                }
 else {
                  normalMapTexture=texture;
                }
                result.setTexture(TEXTURE_TYPE_NORMAL,normalMapTexture);
                if (vertexColor) {
                  result.setBoolean(shadeless ? "VertexColor" : "UseVertexColor",false);
                }
              }
              if ((mapto & 0x04) != 0) {
                result.setTexture(TEXTURE_TYPE_SPECULAR,texture);
              }
              if ((mapto & 0x40) != 0) {
                result.setTexture(TEXTURE_TYPE_GLOW,texture);
              }
              if ((mapto & 0x80) != 0) {
                result.setTexture(TEXTURE_TYPE_ALPHA,texture);
              }
            }
 else {
              LOGGER.log(Level.WARNING,"Texture not found!");
            }
          }
        }
 else {
          LOGGER.log(Level.WARNING,"Many textures. Not solved yet!");
        }
      }
    }
  }
  dataRepository.addLoadedFeatures(structure.getOldMemoryAddress(),structure.getName(),structure,result);
  return result;
}
