{
  float noisesize=((Number)tex.getFieldValue("noisesize")).floatValue();
  int noisebasis=((Number)tex.getFieldValue("noisebasis")).intValue();
  int noisetype=((Number)tex.getFieldValue("noisetype")).intValue();
  float turbul=((Number)tex.getFieldValue("turbul")).floatValue();
  boolean isHard=noisetype != TEX_NOISESOFT;
  int stype=((Number)tex.getFieldValue("stype")).intValue();
  if (noisesize <= 0.001f) {
    noisesize=0.001f;
  }
  float[] texvec=new float[]{0,0,0};
  TextureResult texres=new TextureResult();
  int halfW=width >> 1, halfH=height >> 1, halfD=depth >> 1, index=0;
  float wDelta=1.0f / halfW, hDelta=1.0f / halfH, dDelta=1.0f / halfD, noiseValue, ofs;
  ;
  float[][] colorBand=this.computeColorband(tex,blenderContext);
  Format format=colorBand != null ? Format.RGB8 : Format.Luminance8;
  int bytesPerPixel=colorBand != null ? 3 : 1;
  byte[] data=new byte[width * height * depth* bytesPerPixel];
  for (int i=-halfW; i < halfW; ++i) {
    texvec[0]=wDelta * i;
    for (int j=-halfH; j < halfH; ++j) {
      texvec[1]=hDelta * j;
      for (int k=-halfD; k < halfD; ++k) {
        texvec[2]=dDelta * k;
        noiseValue=NoiseGenerator.NoiseFunctions.noise(texvec[0],texvec[1],texvec[2],noisesize,0,noisebasis,isHard);
        ofs=turbul / 200.0f;
        if (stype != 0) {
          ofs*=noiseValue * noiseValue;
        }
        texres.intensity=NoiseGenerator.NoiseFunctions.noise(texvec[0],texvec[1],texvec[2] + ofs,noisesize,0,noisebasis,isHard);
        if (colorBand != null) {
          int colorbandIndex=(int)(texres.intensity * 1000.0f);
          texres.red=colorBand[colorbandIndex][0];
          texres.green=colorBand[colorbandIndex][1];
          texres.blue=colorBand[colorbandIndex][2];
        }
        if (stype == NoiseGenerator.TEX_WALLOUT) {
          texres.intensity=1.0f - texres.intensity;
        }
        if (texres.intensity < 0.0f) {
          texres.intensity=0.0f;
        }
        if (colorBand != null) {
          data[index++]=(byte)(texres.red * 255.0f);
          data[index++]=(byte)(texres.green * 255.0f);
          data[index++]=(byte)(texres.blue * 255.0f);
        }
 else {
          data[index++]=(byte)(texres.intensity * 255.0f);
        }
      }
    }
  }
  ArrayList<ByteBuffer> dataArray=new ArrayList<ByteBuffer>(1);
  dataArray.add(BufferUtils.createByteBuffer(data));
  return new Texture3D(new Image(format,width,height,depth,dataArray));
}
