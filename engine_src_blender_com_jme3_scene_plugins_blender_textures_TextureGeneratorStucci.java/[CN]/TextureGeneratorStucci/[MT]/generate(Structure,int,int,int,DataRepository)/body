{
  float noisesize=((Number)tex.getFieldValue("noisesize")).floatValue();
  int noisebasis=((Number)tex.getFieldValue("noisebasis")).intValue();
  int noisetype=((Number)tex.getFieldValue("noisetype")).intValue();
  float turbul=((Number)tex.getFieldValue("turbul")).floatValue();
  boolean isHard=noisetype != NoiseGenerator.TEX_NOISESOFT;
  int stype=((Number)tex.getFieldValue("stype")).intValue();
  float[] texvec=new float[]{0,0,0};
  TexResult texres=new TexResult();
  float wDelta=1.0f / width, hDelta=1.0f / height, dDelta=1.0f / depth, b2, ofs;
  int halfW=width, halfH=height, halfD=depth;
  width<<=1;
  height<<=1;
  depth<<=1;
  ColorBand colorBand=this.readColorband(tex,dataRepository);
  Format format=colorBand != null ? Format.RGB8 : Format.Luminance8;
  int bytesPerPixel=colorBand != null ? 3 : 1;
  ByteBuffer data=BufferUtils.createByteBuffer(width * height * depth* bytesPerPixel);
  for (int i=-halfW; i < halfW; ++i) {
    texvec[0]=wDelta * i;
    for (int j=-halfH; j < halfH; ++j) {
      texvec[1]=hDelta * j;
      for (int k=-halfD; k < halfD; ++k) {
        texvec[2]=dDelta * k;
        b2=noiseGenerator.bliGNoise(noisesize,texvec[0],texvec[1],texvec[2],isHard,noisebasis);
        ofs=turbul / 200.0f;
        if (stype != 0) {
          ofs*=b2 * b2;
        }
        texres.tin=noiseGenerator.bliGNoise(noisesize,texvec[0],texvec[1],texvec[2] + ofs,isHard,noisebasis);
        if (colorBand != null) {
          noiseGenerator.doColorband(colorBand,texres,dataRepository);
          if (texres.nor != null) {
            texres.nor[0]=noiseGenerator.bliGNoise(noisesize,texvec[0] + ofs,texvec[1],texvec[2],isHard,noisebasis);
            texres.nor[1]=noiseGenerator.bliGNoise(noisesize,texvec[0],texvec[1] + ofs,texvec[2],isHard,noisebasis);
            texres.nor[2]=texres.tin;
            noiseGenerator.texNormalDerivate(colorBand,texres,dataRepository);
            if (stype == NoiseGenerator.TEX_WALLOUT) {
              texres.nor[0]=-texres.nor[0];
              texres.nor[1]=-texres.nor[1];
              texres.nor[2]=-texres.nor[2];
            }
          }
        }
        if (stype == NoiseGenerator.TEX_WALLOUT) {
          texres.tin=1.0f - texres.tin;
        }
        if (texres.tin < 0.0f) {
          texres.tin=0.0f;
        }
        if (colorBand != null) {
          data.put((byte)(texres.tr * 255.0f));
          data.put((byte)(texres.tg * 255.0f));
          data.put((byte)(texres.tb * 255.0f));
        }
 else {
          data.put((byte)(texres.tin * 255.0f));
        }
      }
    }
  }
  ArrayList<ByteBuffer> dataArray=new ArrayList<ByteBuffer>(1);
  dataArray.add(data);
  return new Texture3D(new Image(format,width,height,depth,dataArray));
}
