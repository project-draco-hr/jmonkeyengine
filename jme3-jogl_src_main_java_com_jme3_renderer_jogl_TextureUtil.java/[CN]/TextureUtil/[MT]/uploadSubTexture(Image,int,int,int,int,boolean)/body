{
  GL gl=GLContext.getCurrentGL();
  Image.Format fmt=image.getFormat();
  GLImageFormat glFmt=getImageFormatWithError(fmt,image.isSrgb() && linearizeSrgb);
  ByteBuffer data=null;
  if (index >= 0 && image.getData() != null && image.getData().size() > 0) {
    data=image.getData(index);
  }
  int width=image.getWidth();
  int height=image.getHeight();
  int depth=image.getDepth();
  if (data != null) {
    gl.glPixelStorei(GL.GL_UNPACK_ALIGNMENT,1);
  }
  int[] mipSizes=image.getMipMapSizes();
  int pos=0;
  if (mipSizes == null) {
    if (data != null) {
      mipSizes=new int[]{data.capacity()};
    }
 else {
      mipSizes=new int[]{width * height * fmt.getBitsPerPixel() / 8};
    }
  }
  int samples=image.getMultiSamples();
  for (int i=0; i < mipSizes.length; i++) {
    int mipWidth=Math.max(1,width >> i);
    int mipHeight=Math.max(1,height >> i);
    int mipDepth=Math.max(1,depth >> i);
    if (data != null) {
      data.position(pos);
      data.limit(pos + mipSizes[i]);
    }
    pos+=mipSizes[i];
    int glFmtInternal=glFmt.internalFormat;
    int glFmtFormat=glFmt.format;
    int glFmtDataType=glFmt.dataType;
    if (glFmt.compressed && data != null) {
      if (target == GL2ES2.GL_TEXTURE_3D) {
        gl.getGL2ES2().glCompressedTexSubImage3D(target,i,x,y,index,mipWidth,mipHeight,mipDepth,glFmtInternal,data.limit(),data);
        continue;
      }
      gl.getGL2ES2().glCompressedTexSubImage2D(target,i,x,y,mipWidth,mipHeight,glFmtInternal,data.limit(),data);
      continue;
    }
    if (target == GL2ES2.GL_TEXTURE_3D) {
      gl.getGL2ES2().glTexSubImage3D(target,i,x,y,index,mipWidth,mipHeight,mipDepth,glFmtFormat,glFmtDataType,data);
      continue;
    }
    if (samples > 1) {
      throw new IllegalStateException("Cannot update multisample textures");
    }
    gl.glTexSubImage2D(target,i,x,y,mipWidth,mipHeight,glFmtFormat,glFmtDataType,data);
    continue;
  }
}
