{
  Triangle triangle=new Triangle();
  Vector3f x=new Vector3f(1,0,0);
  Vector3f y=new Vector3f(0,1,0);
  Vector3f z=new Vector3f(0,0,1);
  Vector3f min=bb.getMin(null);
  float[] ext=new float[]{bb.getXExtent() * 2.0f,bb.getYExtent() * 2.0f,bb.getZExtent() * 2.0f};
  float[] uvCoordinates=new float[mesh.getTriangleCount() * 6];
  float borderAngle=(float)Math.sqrt(2.0f) / 2.0f;
  for (int i=0, pointIndex=0; i < mesh.getTriangleCount(); ++i) {
    mesh.getTriangle(i,triangle);
    Vector3f n=triangle.getNormal();
    float dotNX=Math.abs(n.dot(x));
    float dorNY=Math.abs(n.dot(y));
    float dotNZ=Math.abs(n.dot(z));
    if (dotNX > borderAngle) {
      if (dotNZ < borderAngle) {
        uvCoordinates[pointIndex++]=(triangle.get1().y - min.y) / ext[1];
        uvCoordinates[pointIndex++]=(triangle.get1().z - min.z) / ext[2];
        uvCoordinates[pointIndex++]=(triangle.get2().y - min.y) / ext[1];
        uvCoordinates[pointIndex++]=(triangle.get2().z - min.z) / ext[2];
        uvCoordinates[pointIndex++]=(triangle.get3().y - min.y) / ext[1];
        uvCoordinates[pointIndex++]=(triangle.get3().z - min.z) / ext[2];
      }
 else {
        uvCoordinates[pointIndex++]=(triangle.get1().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get1().y - min.y) / ext[1];
        uvCoordinates[pointIndex++]=(triangle.get2().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get2().y - min.y) / ext[1];
        uvCoordinates[pointIndex++]=(triangle.get3().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get3().y - min.y) / ext[1];
      }
    }
 else {
      if (dorNY > borderAngle) {
        uvCoordinates[pointIndex++]=(triangle.get1().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get1().z - min.z) / ext[2];
        uvCoordinates[pointIndex++]=(triangle.get2().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get2().z - min.z) / ext[2];
        uvCoordinates[pointIndex++]=(triangle.get3().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get3().z - min.z) / ext[2];
      }
 else {
        uvCoordinates[pointIndex++]=(triangle.get1().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get1().y - min.y) / ext[1];
        uvCoordinates[pointIndex++]=(triangle.get2().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get2().y - min.y) / ext[1];
        uvCoordinates[pointIndex++]=(triangle.get3().x - min.x) / ext[0];
        uvCoordinates[pointIndex++]=(triangle.get3().y - min.y) / ext[1];
      }
    }
    triangle.setNormal(null);
  }
  return uvCoordinates;
}
