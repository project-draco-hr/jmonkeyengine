{
  if (scene.getCullHint() == Spatial.CullHint.Always)   return;
  RenderQueue.ShadowMode shadowMode=scene.getShadowMode();
  if (scene instanceof Geometry) {
    Geometry occluder=(Geometry)scene;
    if (shadowMode != RenderQueue.ShadowMode.Off && shadowMode != RenderQueue.ShadowMode.Receive && !occluder.isGrouped() && occluder.getWorldBound() != null) {
      BoundingVolume bv=occluder.getWorldBound();
      BoundingVolume occBox=bv.transform(viewProjMatrix,vars.bbox);
      boolean intersects=splitBB.intersects(occBox);
      if (!intersects && occBox instanceof BoundingBox) {
        BoundingBox occBB=(BoundingBox)occBox;
        occBB.setZExtent(occBB.getZExtent() + 50);
        occBB.setCenter(occBB.getCenter().addLocal(0,0,25));
        if (splitBB.intersects(occBB)) {
          if (!Float.isNaN(occBox.getCenter().x) && !Float.isInfinite(occBox.getCenter().x)) {
            occBB.setZExtent(occBB.getZExtent() - 50);
            occBB.setCenter(occBB.getCenter().subtractLocal(0,0,25));
            casterBB.mergeLocal(occBox);
            casterCount++;
          }
          if (splitOccluders != null) {
            splitOccluders.add(occluder);
          }
        }
      }
 else       if (intersects) {
        casterBB.mergeLocal(occBox);
        casterCount++;
        if (splitOccluders != null) {
          splitOccluders.add(occluder);
        }
      }
    }
  }
 else   if (scene instanceof Node && ((Node)scene).getWorldBound() != null) {
    Node nodeOcc=(Node)scene;
    boolean intersects=false;
    BoundingVolume bv=nodeOcc.getWorldBound();
    BoundingVolume occBox=bv.transform(viewProjMatrix,vars.bbox);
    intersects=splitBB.intersects(occBox);
    if (!intersects && occBox instanceof BoundingBox) {
      BoundingBox occBB=(BoundingBox)occBox;
      occBB.setZExtent(occBB.getZExtent() + 50);
      occBB.setCenter(occBB.getCenter().addLocal(0,0,25));
      intersects=splitBB.intersects(occBB);
    }
    if (intersects) {
      for (      Spatial child : ((Node)scene).getChildren()) {
        process(child);
      }
    }
  }
}
