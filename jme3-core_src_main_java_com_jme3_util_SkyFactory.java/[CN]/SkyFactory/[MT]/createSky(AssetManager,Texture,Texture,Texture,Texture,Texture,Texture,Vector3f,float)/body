{
  final Sphere sphereMesh=new Sphere(10,10,sphereRadius,false,true);
  Geometry sky=new Geometry("Sky",sphereMesh);
  sky.setQueueBucket(Bucket.Sky);
  sky.setCullHint(Spatial.CullHint.Never);
  sky.setModelBound(new BoundingSphere(Float.POSITIVE_INFINITY,Vector3f.ZERO));
  Image westImg=west.getImage();
  Image eastImg=east.getImage();
  Image northImg=north.getImage();
  Image southImg=south.getImage();
  Image upImg=up.getImage();
  Image downImg=down.getImage();
  checkImagesForCubeMap(westImg,eastImg,northImg,southImg,upImg,downImg);
  Image cubeImage=new Image(westImg.getFormat(),westImg.getWidth(),westImg.getHeight(),null,westImg.getColorSpace());
  cubeImage.addData(westImg.getData(0));
  cubeImage.addData(eastImg.getData(0));
  cubeImage.addData(downImg.getData(0));
  cubeImage.addData(upImg.getData(0));
  cubeImage.addData(southImg.getData(0));
  cubeImage.addData(northImg.getData(0));
  if (westImg.getEfficentData() != null) {
    ArrayList<Object> efficientData=new ArrayList<Object>(6);
    efficientData.add(westImg.getEfficentData());
    efficientData.add(eastImg.getEfficentData());
    efficientData.add(downImg.getEfficentData());
    efficientData.add(upImg.getEfficentData());
    efficientData.add(southImg.getEfficentData());
    efficientData.add(northImg.getEfficentData());
    cubeImage.setEfficentData(efficientData);
  }
  TextureCubeMap cubeMap=new TextureCubeMap(cubeImage);
  cubeMap.setAnisotropicFilter(0);
  cubeMap.setMagFilter(Texture.MagFilter.Bilinear);
  cubeMap.setMinFilter(Texture.MinFilter.BilinearNoMipMaps);
  cubeMap.setWrap(Texture.WrapMode.EdgeClamp);
  Material skyMat=new Material(assetManager,"Common/MatDefs/Misc/Sky.j3md");
  skyMat.setTexture("Texture",cubeMap);
  skyMat.setVector3("NormalScale",normalScale);
  sky.setMaterial(skyMat);
  return sky;
}
