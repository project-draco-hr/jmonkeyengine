{
  if (enabled) {
    targetLocation.set(target.getWorldTranslation()).addLocal(lookAtOffset);
    if (smoothMotion) {
      targetDir.set(targetLocation).subtractLocal(prevPos);
      float dist=targetDir.length();
      if (offsetDistance < dist) {
        chasing=true;
        if (trailingEnabled) {
          trailing=true;
        }
        targetMoves=true;
      }
 else {
        if (targetMoves && !canRotate) {
          if (targetRotation - rotation > trailingRotationInertia) {
            targetRotation=rotation + trailingRotationInertia;
          }
 else           if (targetRotation - rotation < -trailingRotationInertia) {
            targetRotation=rotation - trailingRotationInertia;
          }
        }
        targetMoves=false;
      }
      if (canRotate) {
        trailingLerpFactor=0;
        trailing=false;
      }
      if (trailingEnabled && trailing) {
        if (targetMoves) {
          Vector3f a=targetDir.negate().normalizeLocal();
          Vector3f b=Vector3f.UNIT_X;
          a.y=0;
          if (targetDir.z > 0) {
            targetRotation=FastMath.TWO_PI - FastMath.acos(a.dot(b));
          }
 else {
            targetRotation=FastMath.acos(a.dot(b));
          }
          if (targetRotation - rotation > FastMath.PI || targetRotation - rotation < -FastMath.PI) {
            targetRotation-=FastMath.TWO_PI;
          }
          if (targetRotation != previousTargetRotation && FastMath.abs(targetRotation - previousTargetRotation) > FastMath.PI / 8) {
            trailingLerpFactor=0;
          }
          previousTargetRotation=targetRotation;
        }
        trailingLerpFactor=Math.min(trailingLerpFactor + tpf * tpf * trailingSensitivity,1);
        rotation=FastMath.interpolateLinear(trailingLerpFactor,rotation,targetRotation);
        if (targetRotation + 0.01f >= rotation && targetRotation - 0.01f <= rotation) {
          trailing=false;
          trailingLerpFactor=0;
        }
      }
      if (chasing) {
        distance=temp.set(targetLocation).subtractLocal(cam.getLocation()).length();
        distanceLerpFactor=Math.min(distanceLerpFactor + (tpf * tpf * chasingSensitivity* 0.05f),1);
        distance=FastMath.interpolateLinear(distanceLerpFactor,distance,targetDistance);
        if (targetDistance + 0.01f >= distance && targetDistance - 0.01f <= distance) {
          distanceLerpFactor=0;
          chasing=false;
        }
      }
      if (zooming) {
        distanceLerpFactor=Math.min(distanceLerpFactor + (tpf * tpf * zoomSensitivity),1);
        distance=FastMath.interpolateLinear(distanceLerpFactor,distance,targetDistance);
        if (targetDistance + 0.1f >= distance && targetDistance - 0.1f <= distance) {
          zooming=false;
          distanceLerpFactor=0;
        }
      }
      if (rotating) {
        rotationLerpFactor=Math.min(rotationLerpFactor + tpf * tpf * rotationSensitivity,1);
        rotation=FastMath.interpolateLinear(rotationLerpFactor,rotation,targetRotation);
        if (targetRotation + 0.01f >= rotation && targetRotation - 0.01f <= rotation) {
          rotating=false;
          rotationLerpFactor=0;
        }
      }
      if (vRotating) {
        vRotationLerpFactor=Math.min(vRotationLerpFactor + tpf * tpf * rotationSensitivity,1);
        vRotation=FastMath.interpolateLinear(vRotationLerpFactor,vRotation,targetVRotation);
        if (targetVRotation + 0.01f >= vRotation && targetVRotation - 0.01f <= vRotation) {
          vRotating=false;
          vRotationLerpFactor=0;
        }
      }
      computePosition();
      cam.setLocation(pos.addLocal(lookAtOffset));
    }
 else {
      vRotation=targetVRotation;
      rotation=targetRotation;
      distance=targetDistance;
      computePosition();
      cam.setLocation(pos.addLocal(lookAtOffset));
    }
    prevPos.set(targetLocation);
    cam.lookAt(targetLocation,initialUpVec);
  }
}
