{
  VertexBuffer pvb=getBuffer(VertexBuffer.Type.Position);
  FloatBuffer positions=(FloatBuffer)pvb.getData();
  VertexBuffer cvb=getBuffer(VertexBuffer.Type.Color);
  ByteBuffer colors=(ByteBuffer)cvb.getData();
  VertexBuffer svb=getBuffer(VertexBuffer.Type.Size);
  FloatBuffer sizes=(FloatBuffer)svb.getData();
  VertexBuffer tvb=getBuffer(VertexBuffer.Type.TexCoord);
  FloatBuffer texcoords=(FloatBuffer)tvb.getData();
  float sizeScale=emitter.getWorldScale().x;
  positions.rewind();
  colors.rewind();
  sizes.rewind();
  texcoords.rewind();
  for (int i=0; i < particles.length; i++) {
    Particle p=particles[i];
    positions.put(p.position.x).put(p.position.y).put(p.position.z);
    sizes.put(p.size * sizeScale);
    colors.putInt(p.color.asIntABGR());
    int imgX=p.imageIndex % imagesX;
    int imgY=(p.imageIndex - imgX) / imagesY;
    float startX=((float)imgX) / imagesX;
    float startY=((float)imgY) / imagesY;
    float endX=startX + (1f / imagesX);
    float endY=startY + (1f / imagesY);
    texcoords.put(startX).put(startY).put(endX).put(endY);
  }
  positions.flip();
  colors.flip();
  sizes.flip();
  texcoords.flip();
  pvb.updateData(positions);
  cvb.updateData(colors);
  svb.updateData(sizes);
  tvb.updateData(texcoords);
}
