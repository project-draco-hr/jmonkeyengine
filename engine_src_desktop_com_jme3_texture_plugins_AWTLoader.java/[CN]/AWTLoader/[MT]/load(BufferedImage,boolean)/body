{
  int width=img.getWidth();
  int height=img.getHeight();
switch (img.getType()) {
case BufferedImage.TYPE_3BYTE_BGR:
    byte[] dataBuf=extractImageData(img);
  if (flipY)   flipImage(dataBuf,width,height,24);
ByteBuffer data=BufferUtils.createByteBuffer(img.getWidth() * img.getHeight() * 3);
data.put(dataBuf);
return new Image(Format.BGR8,width,height,data);
case BufferedImage.TYPE_BYTE_GRAY:
byte[] dataBuf2=extractImageData(img);
if (flipY) flipImage(dataBuf2,width,height,8);
ByteBuffer data2=BufferUtils.createByteBuffer(img.getWidth() * img.getHeight());
data2.put(dataBuf2);
return new Image(Format.Luminance8,width,height,data2);
default :
break;
}
if (img.getTransparency() == Transparency.OPAQUE) {
ByteBuffer data=BufferUtils.createByteBuffer(img.getWidth() * img.getHeight() * 3);
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
int ny=y;
if (flipY) {
ny=height - y - 1;
}
int rgb=img.getRGB(x,ny);
byte r=(byte)((rgb & 0x00FF0000) >> 16);
byte g=(byte)((rgb & 0x0000FF00) >> 8);
byte b=(byte)((rgb & 0x000000FF));
data.put(r).put(g).put(b);
}
}
data.flip();
return new Image(Format.RGB8,width,height,data);
}
 else {
ByteBuffer data=BufferUtils.createByteBuffer(img.getWidth() * img.getHeight() * 4);
for (int y=0; y < height; y++) {
for (int x=0; x < width; x++) {
int ny=y;
if (flipY) {
ny=height - y - 1;
}
int rgb=img.getRGB(x,ny);
byte a=(byte)((rgb & 0xFF000000) >> 24);
byte r=(byte)((rgb & 0x00FF0000) >> 16);
byte g=(byte)((rgb & 0x0000FF00) >> 8);
byte b=(byte)((rgb & 0x000000FF));
data.put(r).put(g).put(b).put(a);
}
}
data.flip();
return new Image(Format.RGBA8,width,height,data);
}
}
