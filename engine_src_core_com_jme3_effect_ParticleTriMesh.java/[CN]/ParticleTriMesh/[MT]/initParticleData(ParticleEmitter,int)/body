{
  setMode(Mode.Triangles);
  this.emitter=emitter;
  particlesCopy=new Particle[numParticles];
  FloatBuffer pb=BufferUtils.createVector3Buffer(numParticles * 4);
  VertexBuffer pvb=new VertexBuffer(VertexBuffer.Type.Position);
  pvb.setupData(Usage.Stream,3,Format.Float,pb);
  setBuffer(pvb);
  ByteBuffer cb=BufferUtils.createByteBuffer(numParticles * 4 * 4);
  VertexBuffer cvb=new VertexBuffer(VertexBuffer.Type.Color);
  cvb.setupData(Usage.Stream,4,Format.UnsignedByte,cb);
  cvb.setNormalized(true);
  setBuffer(cvb);
  VertexBuffer tvb=new VertexBuffer(VertexBuffer.Type.TexCoord);
  FloatBuffer tb=BufferUtils.createVector2Buffer(numParticles * 4);
  uniqueTexCoords=false;
  for (int i=0; i < numParticles; i++) {
    tb.put(0f).put(1f);
    tb.put(1f).put(1f);
    tb.put(0f).put(0f);
    tb.put(1f).put(0f);
  }
  tb.flip();
  tvb.setupData(Usage.Static,2,Format.Float,tb);
  setBuffer(tvb);
  ShortBuffer ib=BufferUtils.createShortBuffer(numParticles * 6);
  for (int i=0; i < numParticles; i++) {
    int startIdx=(i * 4);
    ib.put((short)(startIdx + 1)).put((short)(startIdx + 0)).put((short)(startIdx + 2));
    ib.put((short)(startIdx + 1)).put((short)(startIdx + 2)).put((short)(startIdx + 3));
  }
  ib.flip();
  VertexBuffer ivb=new VertexBuffer(VertexBuffer.Type.Index);
  ivb.setupData(Usage.Static,3,Format.UnsignedShort,ib);
  setBuffer(ivb);
}
