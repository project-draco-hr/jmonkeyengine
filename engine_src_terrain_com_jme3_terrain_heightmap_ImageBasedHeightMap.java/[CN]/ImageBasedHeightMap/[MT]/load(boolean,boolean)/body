{
  BufferedImage colorBufferedImage=ImageConverter.toBufferedImage(colorImage,BufferedImage.TYPE_3BYTE_BGR);
  boolean hasAlpha=colorBufferedImage.getColorModel().hasAlpha();
  int imageWidth=colorBufferedImage.getWidth();
  int imageHeight=colorBufferedImage.getHeight();
  if (imageWidth != imageHeight)   throw new RuntimeException("imageWidth: " + imageWidth + " != imageHeight: "+ imageHeight);
  size=imageWidth;
  byte data[]=(byte[])colorBufferedImage.getRaster().getDataElements(0,0,imageWidth,imageHeight,null);
  int bytesPerPixel=3;
  int blueBase=0;
  if (hasAlpha) {
    bytesPerPixel=4;
    blueBase=1;
  }
  heightData=new float[(imageWidth * imageHeight)];
  int startW=0;
  int endW=imageWidth - 1;
  if (flipX) {
    startW=imageWidth - 1;
    endW=0;
  }
  int startH=imageHeight - 1;
  int endH=0;
  if (flipY) {
    startH=0;
    endH=imageHeight - 1;
  }
  int index=0;
  if (flipY) {
    for (int h=0; h < imageHeight; ++h) {
      if (flipX) {
        for (int w=imageWidth - 1; w >= 0; --w) {
          int baseIndex=(h * imageWidth * bytesPerPixel) + (w * bytesPerPixel) + blueBase;
          float blue=data[baseIndex] >= 0 ? data[baseIndex] : (256 + (data[baseIndex]));
          float green=data[baseIndex + 1] >= 0 ? data[baseIndex + 1] : (256 + (data[baseIndex + 1]));
          float red=data[baseIndex + 2] >= 0 ? data[baseIndex + 2] : (256 + (data[baseIndex + 2]));
          heightData[index++]=calculateHeight(red,green,blue);
        }
      }
 else {
        for (int w=0; w < imageWidth; ++w) {
          int baseIndex=(h * imageWidth * bytesPerPixel) + (w * bytesPerPixel) + blueBase;
          float blue=data[baseIndex] >= 0 ? data[baseIndex] : (256 + (data[baseIndex]));
          float green=data[baseIndex + 1] >= 0 ? data[baseIndex + 1] : (256 + (data[baseIndex + 1]));
          float red=data[baseIndex + 2] >= 0 ? data[baseIndex + 2] : (256 + (data[baseIndex + 2]));
          heightData[index++]=calculateHeight(red,green,blue);
        }
      }
    }
  }
 else {
    for (int h=imageHeight - 1; h >= 0; --h) {
      if (flipX) {
        for (int w=imageWidth - 1; w >= 0; --w) {
          int baseIndex=(h * imageWidth * bytesPerPixel) + (w * bytesPerPixel) + blueBase;
          float blue=data[baseIndex] >= 0 ? data[baseIndex] : (256 + (data[baseIndex]));
          float green=data[baseIndex + 1] >= 0 ? data[baseIndex + 1] : (256 + (data[baseIndex + 1]));
          float red=data[baseIndex + 2] >= 0 ? data[baseIndex + 2] : (256 + (data[baseIndex + 2]));
          heightData[index++]=calculateHeight(red,green,blue);
        }
      }
 else {
        for (int w=0; w < imageWidth; ++w) {
          int baseIndex=(h * imageWidth * bytesPerPixel) + (w * bytesPerPixel) + blueBase;
          float blue=data[baseIndex] >= 0 ? data[baseIndex] : (256 + (data[baseIndex]));
          float green=data[baseIndex + 1] >= 0 ? data[baseIndex + 1] : (256 + (data[baseIndex + 1]));
          float red=data[baseIndex + 2] >= 0 ? data[baseIndex + 2] : (256 + (data[baseIndex + 2]));
          heightData[index++]=calculateHeight(red,green,blue);
        }
      }
    }
  }
  return true;
}
