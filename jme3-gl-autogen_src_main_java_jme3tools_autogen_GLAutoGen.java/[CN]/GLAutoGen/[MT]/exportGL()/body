{
  StringBuilder sb=new StringBuilder();
  sb.append("package jme3tools.autogen;\n");
  sb.append("\n");
  sb.append("import java.nio.ByteBuffer;\n");
  sb.append("import java.nio.DoubleBuffer;\n");
  sb.append("import java.nio.FloatBuffer;\n");
  sb.append("import java.nio.IntBuffer;\n");
  sb.append("import java.nio.ShortBuffer;\n");
  sb.append("\n");
  sb.append("/**\n");
  sb.append(" * Auto-generated interface\n");
  sb.append(" */\n");
  sb.append("public interface GL {\n");
  sb.append("\n");
  sb.append("// -- begin constants\n");
  for (  String constant : usedConstants) {
    ConstantInfo info=constantMap.get(constant);
    if (info == null) {
      throw new IllegalStateException("Cannot find required constant: " + constant);
    }
    String typeStr=info.constantType.toString();
    String valueStr=null;
    if (info.constantType == int.class) {
      valueStr="0x" + Integer.toHexString((Integer)info.constantValue).toUpperCase();
    }
 else     if (info.constantType == long.class) {
      valueStr="0x" + Long.toHexString((Long)info.constantValue).toUpperCase();
    }
    sb.append("\tpublic static final ").append(typeStr).append(" ").append(info.constantName).append(" = ").append(valueStr).append(";\n");
  }
  sb.append("// -- end constants\n");
  sb.append("\n");
  sb.append("// -- begin methods\n");
  for (  String method : usedMethods) {
    List<MethodInfo> infos=methodMap.get(method);
    if (infos == null) {
      throw new IllegalStateException("Cannot find required method: " + method);
    }
    for (    MethodInfo info : infos) {
      String retTypeStr=info.returnType.getSimpleName();
      sb.append("\tpublic ").append(retTypeStr).append(" ").append(method).append("(");
      for (int i=0; i < info.paramTypes.length; i++) {
        sb.append(info.paramTypes[i].getSimpleName()).append(" param").append(i + 1);
        if (i != info.paramTypes.length - 1) {
          sb.append(", ");
        }
      }
      sb.append(");\n");
    }
  }
  sb.append("// -- end methods\n");
  sb.append("// -- begin custom methods\n");
  sb.append("\tpublic GLCaps getGLCaps();\n");
  sb.append("// -- end custom methods\n");
  sb.append("\n");
  sb.append("}\n");
  return sb.toString();
}
