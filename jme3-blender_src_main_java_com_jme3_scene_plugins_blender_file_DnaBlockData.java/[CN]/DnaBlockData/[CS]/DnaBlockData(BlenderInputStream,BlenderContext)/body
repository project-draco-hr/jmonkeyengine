{
  int identifier;
  identifier=inputStream.readByte() << 24 | inputStream.readByte() << 16 | inputStream.readByte() << 8 | inputStream.readByte();
  if (identifier != SDNA_ID) {
    throw new BlenderFileException("Invalid identifier! '" + this.toString(SDNA_ID) + "' expected and found: "+ this.toString(identifier));
  }
  identifier=inputStream.readByte() << 24 | inputStream.readByte() << 16 | inputStream.readByte() << 8 | inputStream.readByte();
  if (identifier != NAME_ID) {
    throw new BlenderFileException("Invalid identifier! '" + this.toString(NAME_ID) + "' expected and found: "+ this.toString(identifier));
  }
  int amount=inputStream.readInt();
  if (amount <= 0) {
    throw new BlenderFileException("The names amount number should be positive!");
  }
  String[] names=new String[amount];
  for (int i=0; i < amount; ++i) {
    names[i]=inputStream.readString();
  }
  inputStream.alignPosition(4);
  identifier=inputStream.readByte() << 24 | inputStream.readByte() << 16 | inputStream.readByte() << 8 | inputStream.readByte();
  if (identifier != TYPE_ID) {
    throw new BlenderFileException("Invalid identifier! '" + this.toString(TYPE_ID) + "' expected and found: "+ this.toString(identifier));
  }
  amount=inputStream.readInt();
  if (amount <= 0) {
    throw new BlenderFileException("The types amount number should be positive!");
  }
  String[] types=new String[amount];
  for (int i=0; i < amount; ++i) {
    types[i]=inputStream.readString();
  }
  inputStream.alignPosition(4);
  identifier=inputStream.readByte() << 24 | inputStream.readByte() << 16 | inputStream.readByte() << 8 | inputStream.readByte();
  if (identifier != TLEN_ID) {
    throw new BlenderFileException("Invalid identifier! '" + this.toString(TLEN_ID) + "' expected and found: "+ this.toString(identifier));
  }
  int[] lengths=new int[amount];
  for (int i=0; i < amount; ++i) {
    lengths[i]=inputStream.readShort();
  }
  inputStream.alignPosition(4);
  identifier=inputStream.readByte() << 24 | inputStream.readByte() << 16 | inputStream.readByte() << 8 | inputStream.readByte();
  if (identifier != STRC_ID) {
    throw new BlenderFileException("Invalid identifier! '" + this.toString(STRC_ID) + "' expected and found: "+ this.toString(identifier));
  }
  amount=inputStream.readInt();
  if (amount <= 0) {
    throw new BlenderFileException("The structures amount number should be positive!");
  }
  structures=new Structure[amount];
  structuresMap=new HashMap<String,Structure>(amount);
  for (int i=0; i < amount; ++i) {
    structures[i]=new Structure(inputStream,names,types,blenderContext);
    if (structuresMap.containsKey(structures[i].getType())) {
      throw new BlenderFileException("Blend file seems to be corrupted! The type " + structures[i].getType() + " is defined twice!");
    }
    structuresMap.put(structures[i].getType(),structures[i]);
  }
}
