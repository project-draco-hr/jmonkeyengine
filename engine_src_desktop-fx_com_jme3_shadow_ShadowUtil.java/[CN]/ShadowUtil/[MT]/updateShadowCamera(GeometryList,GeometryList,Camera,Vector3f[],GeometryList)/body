{
  boolean ortho=shadowCam.isParallelProjection();
  shadowCam.setProjectionMatrix(null);
  if (ortho) {
    shadowCam.setFrustum(-1,1,-1,1,1,-1);
  }
 else {
    shadowCam.setFrustumPerspective(45,1,1,150);
  }
  Matrix4f viewProjMatrix=shadowCam.getViewProjectionMatrix();
  BoundingBox splitBB=computeBoundForPoints(points,viewProjMatrix);
  ArrayList<BoundingVolume> visRecvList=new ArrayList<BoundingVolume>();
  for (int i=0; i < receivers.size(); i++) {
    Geometry receiver=receivers.get(i);
    BoundingVolume bv=receiver.getWorldBound();
    BoundingVolume recvBox=bv.transform(viewProjMatrix,null);
    if (splitBB.intersects(recvBox)) {
      visRecvList.add(recvBox);
    }
  }
  ArrayList<BoundingVolume> visOccList=new ArrayList<BoundingVolume>();
  for (int i=0; i < occluders.size(); i++) {
    Geometry occluder=occluders.get(i);
    BoundingVolume bv=occluder.getWorldBound();
    BoundingVolume occBox=bv.transform(viewProjMatrix,null);
    boolean intersects=splitBB.intersects(occBox);
    if (!intersects && occBox instanceof BoundingBox) {
      BoundingBox occBB=(BoundingBox)occBox;
      occBB.setZExtent(occBB.getZExtent() + 50);
      occBB.setCenter(occBB.getCenter().addLocal(0,0,25));
      if (splitBB.intersects(occBB)) {
        occBB.setZExtent(occBB.getZExtent() - 50);
        occBB.setCenter(occBB.getCenter().subtractLocal(0,0,25));
        visOccList.add(occBox);
        if (splitOccluders != null) {
          splitOccluders.add(occluder);
        }
      }
    }
 else     if (intersects) {
      visOccList.add(occBox);
      if (splitOccluders != null) {
        splitOccluders.add(occluder);
      }
    }
  }
  BoundingBox casterBB=computeUnionBound(visOccList);
  BoundingBox receiverBB=computeUnionBound(visRecvList);
  if (visOccList.size() != visRecvList.size()) {
    casterBB.setXExtent(casterBB.getXExtent() + 2.0f);
    casterBB.setYExtent(casterBB.getYExtent() + 2.0f);
    casterBB.setZExtent(casterBB.getZExtent() + 2.0f);
  }
  Vector3f casterMin=casterBB.getMin(null);
  Vector3f casterMax=casterBB.getMax(null);
  Vector3f receiverMin=receiverBB.getMin(null);
  Vector3f receiverMax=receiverBB.getMax(null);
  Vector3f splitMin=splitBB.getMin(null);
  Vector3f splitMax=splitBB.getMax(null);
  splitMin.z=0;
  if (!ortho)   shadowCam.setFrustumPerspective(45,1,1,splitMax.z);
  Matrix4f projMatrix=shadowCam.getProjectionMatrix();
  Vector3f cropMin=new Vector3f();
  Vector3f cropMax=new Vector3f();
  cropMin.x=max(max(casterMin.x,receiverMin.x),splitMin.x);
  cropMax.x=min(min(casterMax.x,receiverMax.x),splitMax.x);
  cropMin.y=max(max(casterMin.y,receiverMin.y),splitMin.y);
  cropMax.y=min(min(casterMax.y,receiverMax.y),splitMax.y);
  cropMin.z=min(casterMin.z,splitMin.z);
  cropMax.z=min(receiverMax.z,splitMax.z);
  float scaleX, scaleY, scaleZ;
  float offsetX, offsetY, offsetZ;
  scaleX=(2.0f) / (cropMax.x - cropMin.x);
  scaleY=(2.0f) / (cropMax.y - cropMin.y);
  offsetX=-0.5f * (cropMax.x + cropMin.x) * scaleX;
  offsetY=-0.5f * (cropMax.y + cropMin.y) * scaleY;
  scaleZ=1.0f / (cropMax.z - cropMin.z);
  offsetZ=-cropMin.z * scaleZ;
  Matrix4f cropMatrix=new Matrix4f(scaleX,0f,0f,offsetX,0f,scaleY,0f,offsetY,0f,0f,scaleZ,offsetZ,0f,0f,0f,1f);
  Matrix4f result=new Matrix4f();
  result.set(cropMatrix);
  result.multLocal(projMatrix);
  shadowCam.setProjectionMatrix(result);
}
