{
  worldPickRay.set(worldPick);
  List<TerrainPickData> pickData=new ArrayList<TerrainPickData>();
  root.findPick(worldPick.clone(),pickData);
  Collections.sort(pickData);
  if (pickData.isEmpty())   return null;
  workRay.set(worldPick);
  for (  TerrainPickData pd : pickData) {
    TerrainPatch patch=pd.targetPatch;
    tracer.getGridSpacing().set(patch.getWorldScale());
    tracer.setGridOrigin(patch.getWorldTranslation());
    workRay.getOrigin().set(worldPick.getDirection()).multLocal(pd.cr.getDistance() - .1f).addLocal(worldPick.getOrigin());
    tracer.startWalk(workRay);
    final Vector3f intersection=new Vector3f();
    final Vector2f loc=tracer.getGridLocation();
    if (tracer.isRayPerpendicularToGrid()) {
      Triangle hit=new Triangle();
      checkTriangles(loc.x,loc.y,workRay,intersection,patch,hit);
      float distance=worldPickRay.origin.distance(intersection);
      CollisionResult cr=new CollisionResult(intersection,distance);
      cr.setGeometry(patch);
      cr.setContactNormal(hit.getNormal());
      results.addCollision(cr);
      return intersection;
    }
    while (loc.x >= -1 && loc.x <= patch.getSize() && loc.y >= -1 && loc.y <= patch.getSize()) {
      Triangle hit=new Triangle();
      if (checkTriangles(loc.x,loc.y,workRay,intersection,patch,hit)) {
        float distance=worldPickRay.origin.distance(intersection);
        CollisionResult cr=new CollisionResult(intersection,distance);
        cr.setGeometry(patch);
        results.addCollision(cr);
        cr.setContactNormal(hit.getNormal());
        return intersection;
      }
      int dx=0, dz=0;
      Direction d=tracer.getLastStepDirection();
switch (d) {
case PositiveX:
case NegativeX:
        dx=0;
      dz=1;
    break;
case PositiveZ:
case NegativeZ:
  dx=1;
dz=0;
break;
}
if (checkTriangles(loc.x + dx,loc.y + dz,workRay,intersection,patch,hit)) {
float distance=worldPickRay.origin.distance(intersection);
CollisionResult cr=new CollisionResult(intersection,distance);
results.addCollision(cr);
cr.setGeometry(patch);
cr.setContactNormal(hit.getNormal());
return intersection;
}
tracer.next();
}
}
return null;
}
