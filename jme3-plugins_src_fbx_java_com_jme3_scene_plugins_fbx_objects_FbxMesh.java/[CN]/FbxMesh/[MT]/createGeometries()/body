{
  Mesh mesh=new Mesh();
  mesh.setMode(Mode.Triangles);
  if (indices != null) {
    iCount=indices.length;
    srcVertexCount=vertices.length / 3;
    vCount=0;
    int polyVertCount=0;
    for (int i=0; i < iCount; ++i) {
      int index=indices[i];
      polyVertCount++;
      if (index < 0) {
        if (polyVertCount == 3) {
          vCount+=3;
        }
 else         if (polyVertCount == 4) {
          vCount+=6;
        }
 else {
          throw new AssetLoadException("Unsupported PolygonVertexIndex stride");
        }
        polyVertCount=0;
      }
    }
    vertexMap=new ArrayList<>(vCount);
    indexMap=new ArrayList<>(vCount);
    polyVertCount=0;
    for (int i=0; i < iCount; ++i) {
      int index=indices[i];
      polyVertCount++;
      if (index < 0) {
        int lastIndex=-(index + 1);
        if (polyVertCount == 3) {
          vertexMap.add(indices[i - 2]);
          vertexMap.add(indices[i - 1]);
          vertexMap.add(lastIndex);
          indexMap.add(i - 2);
          indexMap.add(i - 1);
          indexMap.add(i - 0);
        }
 else         if (polyVertCount == 4) {
          vertexMap.add(indices[i - 3]);
          vertexMap.add(indices[i - 2]);
          vertexMap.add(indices[i - 1]);
          vertexMap.add(indices[i - 3]);
          vertexMap.add(indices[i - 1]);
          vertexMap.add(lastIndex);
          indexMap.add(i - 3);
          indexMap.add(i - 2);
          indexMap.add(i - 1);
          indexMap.add(i - 3);
          indexMap.add(i - 1);
          indexMap.add(i - 0);
        }
        polyVertCount=0;
      }
    }
    reverseVertexMap=new ArrayList<>(srcVertexCount);
    for (int i=0; i < srcVertexCount; ++i)     reverseVertexMap.add(new ArrayList<Integer>());
    for (int i=0; i < vCount; ++i) {
      int index=vertexMap.get(i);
      reverseVertexMap.get(index).add(i);
    }
  }
 else {
    iCount=vCount=srcVertexCount;
    vertexMap=new ArrayList<>(vCount);
    indexMap=new ArrayList<>(vCount);
    reverseVertexMap=new ArrayList<>(vCount);
    for (int i=0; i < vCount; ++i) {
      vertexMap.set(i,i);
      indexMap.set(i,i);
      List<Integer> l=new ArrayList<Integer>(1);
      l.add(i);
      reverseVertexMap.add(l);
    }
  }
  if (vertices != null) {
    FloatBuffer posBuf=BufferUtils.createFloatBuffer(vCount * 3);
    mesh.setBuffer(VertexBuffer.Type.Position,3,posBuf);
    int srcCount=vertices.length / 3;
    for (int i=0; i < vCount; ++i) {
      int index=vertexMap.get(i);
      if (index > srcCount)       throw new AssetLoadException("Invalid vertex mapping. Unexpected lookup vertex " + index + " from "+ srcCount);
      float x=(float)vertices[3 * index + 0] / scene.unitSize * scene.xAxis;
      float y=(float)vertices[3 * index + 1] / scene.unitSize * scene.yAxis;
      float z=(float)vertices[3 * index + 2] / scene.unitSize * scene.zAxis;
      posBuf.put(x).put(y).put(z);
    }
  }
  if (normals != null) {
    FloatBuffer normBuf=BufferUtils.createFloatBuffer(vCount * 3);
    mesh.setBuffer(VertexBuffer.Type.Normal,3,normBuf);
    List<Integer> mapping=null;
    if (normalsMapping.equals("ByVertice"))     mapping=vertexMap;
 else     if (normalsMapping.equals("ByPolygonVertex"))     mapping=indexMap;
 else     throw new IOException("Unknown normals mapping type: " + normalsMapping);
    int srcCount=normals.length / 3;
    for (int i=0; i < vCount; ++i) {
      int index=mapping.get(i);
      if (index > srcCount)       throw new AssetLoadException("Invalid normal mapping. Unexpected lookup normal " + index + " from "+ srcCount);
      float x=(float)normals[3 * index + 0] * scene.xAxis;
      float y=(float)normals[3 * index + 1] * scene.yAxis;
      float z=(float)normals[3 * index + 2] * scene.zAxis;
      normBuf.put(x).put(y).put(z);
    }
  }
  if (tangents != null) {
    FloatBuffer tanBuf=BufferUtils.createFloatBuffer(vCount * 4);
    mesh.setBuffer(VertexBuffer.Type.Tangent,4,tanBuf);
    List<Integer> mapping=null;
    if (tangentsMapping.equals("ByVertice"))     mapping=vertexMap;
 else     if (tangentsMapping.equals("ByPolygonVertex"))     mapping=indexMap;
 else     throw new IOException("Unknown tangents mapping type: " + tangentsMapping);
    int srcCount=tangents.length / 3;
    for (int i=0; i < vCount; ++i) {
      int index=mapping.get(i);
      if (index > srcCount)       throw new AssetLoadException("Invalid tangent mapping. Unexpected lookup tangent " + index + " from "+ srcCount);
      float x=(float)tangents[3 * index + 0] * scene.xAxis;
      float y=(float)tangents[3 * index + 1] * scene.yAxis;
      float z=(float)tangents[3 * index + 2] * scene.zAxis;
      tanBuf.put(x).put(y).put(z).put(-1.0f);
    }
  }
  if (binormals != null) {
    FloatBuffer binormBuf=BufferUtils.createFloatBuffer(vCount * 3);
    mesh.setBuffer(VertexBuffer.Type.Binormal,3,binormBuf);
    List<Integer> mapping=null;
    if (binormalsMapping.equals("ByVertice"))     mapping=vertexMap;
 else     if (binormalsMapping.equals("ByPolygonVertex"))     mapping=indexMap;
 else     throw new IOException("Unknown binormals mapping type: " + binormalsMapping);
    int srcCount=binormals.length / 3;
    for (int i=0; i < vCount; ++i) {
      int index=mapping.get(i);
      if (index > srcCount)       throw new AssetLoadException("Invalid binormal mapping. Unexpected lookup binormal " + index + " from "+ srcCount);
      float x=(float)binormals[3 * index + 0] * scene.xAxis;
      float y=(float)binormals[3 * index + 1] * scene.yAxis;
      float z=(float)binormals[3 * index + 2] * scene.zAxis;
      binormBuf.put(x).put(y).put(z);
    }
  }
  for (int uvLayer=0; uvLayer < uvs.size(); ++uvLayer) {
    double[] uv=uvs.get(uvLayer);
    int[] uvIndex=uvIndexes.size() > uvLayer ? uvIndexes.get(uvLayer) : null;
    List<Integer> unIndexMap=vertexMap;
    if (uvIndex != null) {
      int uvIndexSrcCount=uvIndex.length;
      if (uvIndexSrcCount != iCount)       throw new AssetLoadException("Invalid number of texcoord index data " + uvIndexSrcCount + " expected "+ iCount);
      unIndexMap=new ArrayList<>(vCount);
      int polyVertCount=0;
      for (int i=0; i < iCount; ++i) {
        int index=indices[i];
        polyVertCount++;
        if (index < 0) {
          if (polyVertCount == 3) {
            unIndexMap.add(uvIndex[i - 2]);
            unIndexMap.add(uvIndex[i - 1]);
            unIndexMap.add(uvIndex[i - 0]);
          }
 else           if (polyVertCount == 4) {
            unIndexMap.add(uvIndex[i - 3]);
            unIndexMap.add(uvIndex[i - 2]);
            unIndexMap.add(uvIndex[i - 1]);
            unIndexMap.add(uvIndex[i - 3]);
            unIndexMap.add(uvIndex[i - 1]);
            unIndexMap.add(uvIndex[i - 0]);
          }
          polyVertCount=0;
        }
      }
    }
    FloatBuffer tcBuf=BufferUtils.createFloatBuffer(vCount * 2);
    VertexBuffer.Type type=VertexBuffer.Type.TexCoord;
switch (uvLayer) {
case 1:
      type=VertexBuffer.Type.TexCoord2;
    break;
case 2:
  type=VertexBuffer.Type.TexCoord3;
break;
case 3:
type=VertexBuffer.Type.TexCoord4;
break;
case 4:
type=VertexBuffer.Type.TexCoord5;
break;
case 5:
type=VertexBuffer.Type.TexCoord6;
break;
case 6:
type=VertexBuffer.Type.TexCoord7;
break;
case 7:
type=VertexBuffer.Type.TexCoord8;
break;
}
mesh.setBuffer(type,2,tcBuf);
int srcCount=uv.length / 2;
for (int i=0; i < vCount; ++i) {
int index=unIndexMap.get(i);
if (index > srcCount) throw new AssetLoadException("Invalid texcoord mapping. Unexpected lookup texcoord " + index + " from "+ srcCount);
float u=(index >= 0) ? (float)uv[2 * index + 0] : 0;
float v=(index >= 0) ? (float)uv[2 * index + 1] : 0;
tcBuf.put(u).put(v);
}
}
List<Geometry> geometries=new ArrayList<Geometry>();
if (materialsReference.equals("IndexToDirect") && materialsMapping.equals("ByPolygon")) {
IntMap<List<Integer>> indexBuffers=new IntMap<>();
for (int polygon=0; polygon < materials.length; ++polygon) {
int material=materials[polygon];
List<Integer> list=indexBuffers.get(material);
if (list == null) {
list=new ArrayList<>();
indexBuffers.put(material,list);
}
list.add(polygon * 3 + 0);
list.add(polygon * 3 + 1);
list.add(polygon * 3 + 2);
}
Iterator<Entry<List<Integer>>> iterator=indexBuffers.iterator();
while (iterator.hasNext()) {
Entry<List<Integer>> e=iterator.next();
int materialId=e.getKey();
List<Integer> indexes=e.getValue();
Mesh newMesh=mesh.clone();
newMesh.setBuffer(VertexBuffer.Type.Index,3,toArray(indexes.toArray(new Integer[indexes.size()])));
newMesh.setStatic();
newMesh.updateBound();
newMesh.updateCounts();
Geometry geom=new Geometry();
geom.setMesh(newMesh);
geometries.add(geom);
geom.setUserData("FBXMaterial",materialId);
}
}
 else {
mesh.setStatic();
mesh.updateBound();
mesh.updateCounts();
Geometry geom=new Geometry();
geom.setMesh(mesh);
geometries.add(geom);
}
return geometries;
}
