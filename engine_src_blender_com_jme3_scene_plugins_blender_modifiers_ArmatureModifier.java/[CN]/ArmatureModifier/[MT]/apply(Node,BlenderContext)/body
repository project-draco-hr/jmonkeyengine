{
  if (invalid) {
    LOGGER.log(Level.WARNING,"Armature modifier is invalid! Cannot be applied to: {0}",node.getName());
  }
  if (animData == null) {
    return node;
  }
  List<Geometry> geomList=(List<Geometry>)blenderContext.getLoadedFeature(this.meshOMA,LoadedFeatureDataType.LOADED_FEATURE);
  for (  Geometry geom : geomList) {
    Mesh mesh=geom.getMesh();
    if (this.verticesWeights != null) {
      mesh.setMaxNumWeights(this.boneGroups);
      mesh.setBuffer(this.verticesWeights);
      mesh.setBuffer(this.verticesWeightsIndices);
    }
  }
  ArmatureHelper armatureHelper=blenderContext.getHelper(ArmatureHelper.class);
  for (int i=0; i < animData.skeleton.getBoneCount(); ++i) {
    Long boneOMA=armatureHelper.getBoneOMA(animData.skeleton.getBone(i));
    List<Constraint> constraints=blenderContext.getConstraints(boneOMA);
    if (constraints != null && constraints.size() > 0) {
      for (      Constraint constraint : constraints) {
        constraint.bakeDynamic();
        constraint.bakeStatic();
      }
    }
  }
  AnimControl control=new AnimControl(animData.skeleton);
  ArrayList<Animation> animList=animData.anims;
  if (animList != null && animList.size() > 0) {
    HashMap<String,Animation> anims=new HashMap<String,Animation>(animList.size());
    for (int i=0; i < animList.size(); ++i) {
      Animation animation=animList.get(i);
      anims.put(animation.getName(),animation);
    }
    control.setAnimations(anims);
  }
  node.addControl(control);
  node.addControl(new SkeletonControl(animData.skeleton));
  return node;
}
