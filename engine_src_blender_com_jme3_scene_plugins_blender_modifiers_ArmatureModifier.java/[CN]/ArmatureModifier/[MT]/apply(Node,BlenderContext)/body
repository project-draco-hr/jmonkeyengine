{
  if (invalid) {
    LOGGER.log(Level.WARNING,"Armature modifier is invalid! Cannot be applied to: {0}",node.getName());
  }
  if (animationData != null && skeleton != null) {
    List<Geometry> geomList=(List<Geometry>)blenderContext.getLoadedFeature(meshOMA,LoadedFeatureDataType.LOADED_FEATURE);
    MeshContext meshContext=blenderContext.getMeshContext(meshOMA);
    int[] bonesGroups=new int[]{0};
    for (    Geometry geom : geomList) {
      int materialIndex=meshContext.getMaterialIndex(geom);
      Mesh mesh=geom.getMesh();
      try {
        VertexBuffer[] buffers=this.readVerticesWeightsData(objectStructure,meshStructure,skeleton,materialIndex,bonesGroups,blenderContext);
        if (buffers != null) {
          mesh.setMaxNumWeights(bonesGroups[0]);
          mesh.setBuffer(buffers[0]);
          mesh.setBuffer(buffers[1]);
          LOGGER.fine("Generating bind pose and normal buffers.");
          mesh.generateBindPose(true);
          mesh.getBuffer(Type.Position).setUsage(Usage.Stream);
          mesh.getBuffer(Type.Normal).setUsage(Usage.Stream);
          VertexBuffer verticesWeightsHW=new VertexBuffer(Type.HWBoneWeight);
          VertexBuffer verticesWeightsIndicesHW=new VertexBuffer(Type.HWBoneIndex);
          mesh.setBuffer(verticesWeightsHW);
          mesh.setBuffer(verticesWeightsIndicesHW);
        }
      }
 catch (      BlenderFileException e) {
        LOGGER.log(Level.SEVERE,e.getLocalizedMessage(),e);
        invalid=true;
      }
    }
    if (!invalid) {
      AnimControl control=new AnimControl(animationData.skeleton);
      List<Animation> animList=animationData.anims;
      if (animList != null && animList.size() > 0) {
        HashMap<String,Animation> anims=new HashMap<String,Animation>(animList.size());
        for (int i=0; i < animList.size(); ++i) {
          Animation animation=animList.get(i);
          anims.put(animation.getName(),animation);
        }
        control.setAnimations(anims);
      }
      node.addControl(control);
      node.addControl(new SkeletonControl(animationData.skeleton));
      blenderContext.setNodeForSkeleton(skeleton,node);
      TempVars tempVars=TempVars.get();
      try {
        Pointer pPose=(Pointer)armatureObject.getFieldValue("pose");
        if (pPose.isNotNull()) {
          LOGGER.fine("Loading the pose of the armature.");
          ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
          ConstraintHelper constraintHelper=blenderContext.getHelper(ConstraintHelper.class);
          Structure pose=pPose.fetchData().get(0);
          Structure chanbase=(Structure)pose.getFieldValue("chanbase");
          List<Structure> chans=chanbase.evaluateListBase();
          Transform transform=new Transform();
          for (          Structure poseChannel : chans) {
            Pointer pBone=(Pointer)poseChannel.getFieldValue("bone");
            if (pBone.isNull()) {
              throw new BlenderFileException("Cannot find bone for pose channel named: " + poseChannel.getName());
            }
            BoneContext boneContext=blenderContext.getBoneContext(pBone.getOldMemoryAddress());
            LOGGER.log(Level.FINEST,"Getting the global pose transformation for bone: {0}",boneContext);
            Matrix4f poseMat=objectHelper.getMatrix(poseChannel,"pose_mat",blenderContext.getBlenderKey().isFixUpAxis());
            poseMat.multLocal(BoneContext.BONE_ARMATURE_TRANSFORMATION_MATRIX);
            Matrix4f armatureWorldMat=objectHelper.getMatrix(armatureObject,"obmat",blenderContext.getBlenderKey().isFixUpAxis());
            Matrix4f boneWorldMat=armatureWorldMat.multLocal(poseMat);
            boneWorldMat.toTranslationVector(tempVars.vect1);
            boneWorldMat.toRotationQuat(tempVars.quat1);
            boneWorldMat.toScaleVector(tempVars.vect2);
            transform.setTranslation(tempVars.vect1);
            transform.setRotation(tempVars.quat1);
            transform.setScale(tempVars.vect2);
            constraintHelper.applyTransform(boneContext.getArmatureObjectOMA(),boneContext.getBone().getName(),Space.CONSTRAINT_SPACE_WORLD,transform);
          }
        }
      }
 catch (      BlenderFileException e) {
        LOGGER.log(Level.WARNING,"Problems occured during pose loading: {0}.",e.getLocalizedMessage());
      }
 finally {
        tempVars.release();
      }
      node.updateModelBound();
    }
  }
}
