{
  if (invalid) {
    LOGGER.log(Level.WARNING,"Armature modifier is invalid! Cannot be applied to: {0}",node.getName());
  }
  if (skeleton != null) {
    List<Geometry> geomList=(List<Geometry>)blenderContext.getLoadedFeature(meshOMA,LoadedFeatureDataType.LOADED_FEATURE);
    MeshContext meshContext=blenderContext.getMeshContext(meshOMA);
    int[] bonesGroups=new int[]{0};
    for (    Geometry geom : geomList) {
      int materialIndex=meshContext.getMaterialIndex(geom);
      Mesh mesh=geom.getMesh();
      try {
        VertexBuffer[] buffers=this.readVerticesWeightsData(objectStructure,meshStructure,skeleton,materialIndex,bonesGroups,blenderContext);
        if (buffers != null) {
          mesh.setMaxNumWeights(bonesGroups[0]);
          mesh.setBuffer(buffers[0]);
          mesh.setBuffer(buffers[1]);
          LOGGER.fine("Generating bind pose and normal buffers.");
          mesh.generateBindPose(true);
          mesh.getBuffer(Type.Position).setUsage(Usage.Stream);
          mesh.getBuffer(Type.Normal).setUsage(Usage.Stream);
          VertexBuffer verticesWeightsHW=new VertexBuffer(Type.HWBoneWeight);
          VertexBuffer verticesWeightsIndicesHW=new VertexBuffer(Type.HWBoneIndex);
          mesh.setBuffer(verticesWeightsHW);
          mesh.setBuffer(verticesWeightsIndicesHW);
        }
      }
 catch (      BlenderFileException e) {
        LOGGER.log(Level.SEVERE,e.getLocalizedMessage(),e);
        invalid=true;
      }
    }
    AnimationHelper animationHelper=blenderContext.getHelper(AnimationHelper.class);
    animationHelper.applyAnimations(node,skeleton,blenderContext.getBlenderKey().getSkeletonAnimationNames(node.getName()));
    node.updateModelBound();
  }
}
