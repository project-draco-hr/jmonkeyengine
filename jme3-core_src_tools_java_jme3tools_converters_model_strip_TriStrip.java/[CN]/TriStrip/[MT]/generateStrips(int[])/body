{
  int numGroups=0;
  PrimitiveGroup[] primGroups;
  IntVec tempIndices=new IntVec();
  int maxIndex=0;
  for (int i=0; i < in_indices.length; i++) {
    tempIndices.add(in_indices[i]);
    if (in_indices[i] > maxIndex)     maxIndex=in_indices[i];
  }
  StripInfoVec tempStrips=new StripInfoVec();
  FaceInfoVec tempFaces=new FaceInfoVec();
  Stripifier stripifier=new Stripifier();
  stripifier.stripify(tempIndices,cacheSize,minStripSize,maxIndex,tempStrips,tempFaces);
  IntVec stripIndices=new IntVec();
  int numSeparateStrips=0;
  if (bListsOnly) {
    numGroups=1;
    primGroups=new PrimitiveGroup[numGroups];
    primGroups[0]=new PrimitiveGroup();
    PrimitiveGroup[] primGroupArray=primGroups;
    int numIndices=0;
    for (int i=0; i < tempStrips.size(); i++) {
      numIndices+=tempStrips.at(i).m_faces.size() * 3;
    }
    numIndices+=tempFaces.size() * 3;
    primGroupArray[0].type=PrimitiveGroup.PT_LIST;
    primGroupArray[0].indices=new int[numIndices];
    primGroupArray[0].numIndices=numIndices;
    int indexCtr=0;
    for (int i=0; i < tempStrips.size(); i++) {
      for (int j=0; j < tempStrips.at(i).m_faces.size(); j++) {
        if (!Stripifier.isDegenerate(tempStrips.at(i).m_faces.at(j))) {
          primGroupArray[0].indices[indexCtr++]=tempStrips.at(i).m_faces.at(j).m_v0;
          primGroupArray[0].indices[indexCtr++]=tempStrips.at(i).m_faces.at(j).m_v1;
          primGroupArray[0].indices[indexCtr++]=tempStrips.at(i).m_faces.at(j).m_v2;
        }
 else {
          primGroupArray[0].numIndices-=3;
        }
      }
    }
    for (int i=0; i < tempFaces.size(); i++) {
      primGroupArray[0].indices[indexCtr++]=tempFaces.at(i).m_v0;
      primGroupArray[0].indices[indexCtr++]=tempFaces.at(i).m_v1;
      primGroupArray[0].indices[indexCtr++]=tempFaces.at(i).m_v2;
    }
  }
 else {
    numSeparateStrips=stripifier.createStrips(tempStrips,stripIndices,bStitchStrips);
    numGroups=numSeparateStrips;
    if (tempFaces.size() != 0)     numGroups++;
    primGroups=new PrimitiveGroup[numGroups];
    for (int i=0; i < primGroups.length; i++) {
      primGroups[i]=new PrimitiveGroup();
    }
    PrimitiveGroup[] primGroupArray=primGroups;
    int startingLoc=0;
    for (int stripCtr=0; stripCtr < numSeparateStrips; stripCtr++) {
      int stripLength=0;
      if (!bStitchStrips) {
        int i;
        for (i=startingLoc; i < stripIndices.size(); i++) {
          if (stripIndices.get(i) == -1)           break;
        }
        stripLength=i - startingLoc;
      }
 else       stripLength=stripIndices.size();
      primGroupArray[stripCtr].type=PrimitiveGroup.PT_STRIP;
      primGroupArray[stripCtr].indices=new int[stripLength];
      primGroupArray[stripCtr].numIndices=stripLength;
      int indexCtr=0;
      for (int i=startingLoc; i < stripLength + startingLoc; i++)       primGroupArray[stripCtr].indices[indexCtr++]=stripIndices.get(i);
      startingLoc+=stripLength + 1;
    }
    if (tempFaces.size() != 0) {
      int faceGroupLoc=numGroups - 1;
      primGroupArray[faceGroupLoc].type=PrimitiveGroup.PT_LIST;
      primGroupArray[faceGroupLoc].indices=new int[tempFaces.size() * 3];
      primGroupArray[faceGroupLoc].numIndices=tempFaces.size() * 3;
      int indexCtr=0;
      for (int i=0; i < tempFaces.size(); i++) {
        primGroupArray[faceGroupLoc].indices[indexCtr++]=tempFaces.at(i).m_v0;
        primGroupArray[faceGroupLoc].indices[indexCtr++]=tempFaces.at(i).m_v1;
        primGroupArray[faceGroupLoc].indices[indexCtr++]=tempFaces.at(i).m_v2;
      }
    }
  }
  return primGroups;
}
