{
  bone.setUserControl(true);
  Vector3f pos=bone.getModelSpacePosition().add(model.getLocalTranslation());
  Quaternion rot=bone.getModelSpaceRotation().mult(initRotation);
  PhysicsRigidBody shapeNode=new PhysicsRigidBody(makeShape(bone,model),10.0f / (float)reccount);
  shapeNode.setPhysicsLocation(pos);
  PhysicsBoneLink link=new PhysicsBoneLink();
  link.bone=bone;
  link.rigidBody=shapeNode;
  link.initalWorldRotation=bone.getModelSpaceRotation().clone();
  if (parent != null) {
    Vector3f posToParent=new Vector3f();
    if (bone.getParent() != null) {
      bone.getModelSpacePosition().subtract(bone.getParent().getModelSpacePosition(),posToParent);
    }
    link.pivotA=posToParent;
    link.pivotB=new Vector3f(0,0,0f);
    ConeJoint joint=new ConeJoint(parent,shapeNode,link.pivotA,link.pivotB);
    joint.setLimit(FastMath.HALF_PI,FastMath.HALF_PI,0.01f);
    link.joint=joint;
    joint.setCollisionBetweenLinkedBodys(false);
  }
  list.add(link);
  for (Iterator<Bone> it=bone.getChildren().iterator(); it.hasNext(); ) {
    Bone childBone=it.next();
    boneRecursion(model,childBone,shapeNode,list,reccount++);
  }
  return list;
}
