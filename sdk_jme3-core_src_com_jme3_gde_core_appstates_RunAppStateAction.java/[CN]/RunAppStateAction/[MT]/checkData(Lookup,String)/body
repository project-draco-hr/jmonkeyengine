{
  source=null;
  className=null;
  try {
    DataObject dObj=actionContext.lookup(DataObject.class);
    if (dObj == null) {
      logger.log(Level.FINE,"No DataObject");
      return;
    }
    FileObject fObj=dObj.getPrimaryFile();
    if (fObj == null) {
      logger.log(Level.FINE,"No FileObject");
      return;
    }
    final JavaSource src=JavaSource.forFileObject(fObj);
    if (src == null) {
      logger.log(Level.FINE,"No JavaSource");
      return;
    }
    CancellableTask task=new CancellableTask<CompilationController>(){
      public void run(      CompilationController controller) throws IOException {
        controller.toPhase(JavaSource.Phase.PARSED);
        CompilationUnitTree cut=controller.getCompilationUnit();
        TypeElement appStateElement=controller.getElements().getTypeElement(name);
        if (appStateElement == null) {
          logger.log(Level.FINE,"No {0} found in classpath",name);
          return;
        }
        TypeMirror appState=appStateElement.asType();
        if (appState == null) {
          logger.log(Level.FINE,"No TypeMirror for {0}",appStateElement);
          return;
        }
        for (        Tree typeDecl : cut.getTypeDecls()) {
          if (Tree.Kind.CLASS == typeDecl.getKind()) {
            ClassTree clazz=(ClassTree)typeDecl;
            String elementName=cut.getPackageName().toString() + "." + clazz.getSimpleName();
            TypeElement myElement=controller.getElements().getTypeElement(elementName);
            if (myElement != null) {
              TypeMirror elementType=myElement.asType();
              logger.log(Level.FINE,"Check {0} against {1}",new Object[]{elementType,appState});
              if (elementType != null && SourceUtils.checkTypesAssignable(controller,elementType,appState)) {
                source=src;
                className=elementName;
              }
            }
          }
        }
      }
      public void cancel(){
      }
    }
;
    src.runUserActionTask(task,true);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
}
