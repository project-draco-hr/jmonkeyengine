{
  Float value=null;
  try {
    value=new Float(numberBuilder.toString());
  }
 catch (  NumberFormatException e) {
    return;
  }
  if (currentState == State.translate) {
    float x=0, y=0, z=0;
    if (currentAxis == Axis.x)     x=value;
 else     if (currentAxis == Axis.y)     y=value;
 else     if (currentAxis == Axis.z)     z=value;
    Vector3f before=selected.getLocalTranslation().clone();
    Vector3f after=selected.getLocalTranslation().addLocal(x,y,z);
    selected.setLocalTranslation(after);
    actionPerformed(new MoveUndo(selected,before,after));
  }
 else   if (currentState == State.scale) {
    float x=1, y=1, z=1;
    if (currentAxis == Axis.x)     x=value;
 else     if (currentAxis == Axis.y)     y=value;
 else     if (currentAxis == Axis.z)     z=value;
 else     if (currentAxis == null) {
      x=value;
      y=value;
      z=value;
    }
    Vector3f before=selected.getLocalScale().clone();
    Vector3f after=selected.getLocalScale().multLocal(x,y,z);
    selected.setLocalScale(after);
    actionPerformed(new ScaleUndo(selected,before,after));
  }
 else   if (currentState == State.rotate) {
    float x=0, y=0, z=0;
    if (currentAxis == Axis.x)     x=1;
 else     if (currentAxis == Axis.y)     y=1;
 else     if (currentAxis == Axis.z)     z=1;
    Vector3f axis=new Vector3f(x,y,z);
    Quaternion initialRot=selected.getLocalRotation().clone();
    Quaternion rot=new Quaternion();
    rot=rot.fromAngleAxis(value * FastMath.DEG_TO_RAD,axis);
    selected.setLocalRotation(selected.getLocalRotation().mult(rot));
    RotateUndo undo=new RotateUndo(selected,initialRot,rot);
    actionPerformed(undo);
    toolController.updateSelection(null);
    toolController.updateSelection(selected);
  }
}
