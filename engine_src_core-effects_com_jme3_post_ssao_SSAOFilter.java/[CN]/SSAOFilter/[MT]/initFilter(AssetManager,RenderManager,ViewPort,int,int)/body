{
  this.renderManager=renderManager;
  this.viewPort=vp;
  int screenWidth=w;
  int screenHeight=h;
  postRenderPasses=new ArrayList<Pass>();
  normalPass=new Pass();
  normalPass.init(renderManager.getRenderer(),(int)(screenWidth / downSampleFactor),(int)(screenHeight / downSampleFactor),Format.RGBA8,Format.Depth);
  frustumNearFar=new Vector2f();
  float farY=(vp.getCamera().getFrustumTop() / vp.getCamera().getFrustumNear()) * vp.getCamera().getFrustumFar();
  float farX=farY * ((float)screenWidth / (float)screenHeight);
  frustumCorner=new Vector3f(farX,farY,vp.getCamera().getFrustumFar());
  frustumNearFar.x=vp.getCamera().getFrustumNear();
  frustumNearFar.y=vp.getCamera().getFrustumFar();
  ssaoMat=new Material(manager,"Common/MatDefs/SSAO/ssao.j3md");
  ssaoMat.setTexture("Normals",normalPass.getRenderedTexture());
  Texture random=manager.loadTexture("Common/MatDefs/SSAO/Textures/random.png");
  random.setWrap(Texture.WrapMode.Repeat);
  ssaoMat.setTexture("RandomMap",random);
  ssaoPass=new Pass(){
    @Override public boolean requiresDepthAsTexture(){
      return true;
    }
  }
;
  ssaoPass.init(renderManager.getRenderer(),(int)(screenWidth / downSampleFactor),(int)(screenHeight / downSampleFactor),Format.RGBA8,Format.Depth,1,ssaoMat);
  ssaoPass.getRenderedTexture().setMinFilter(Texture.MinFilter.Trilinear);
  ssaoPass.getRenderedTexture().setMagFilter(Texture.MagFilter.Bilinear);
  postRenderPasses.add(ssaoPass);
  material=new Material(manager,"Common/MatDefs/SSAO/ssaoBlur.j3md");
  material.setTexture("SSAOMap",ssaoPass.getRenderedTexture());
  ssaoMat.setVector3("FrustumCorner",frustumCorner);
  ssaoMat.setFloat("SampleRadius",sampleRadius);
  ssaoMat.setFloat("Intensity",intensity);
  ssaoMat.setFloat("Scale",scale);
  ssaoMat.setFloat("Bias",bias);
  material.setBoolean("UseAo",useAo);
  material.setBoolean("UseOnlyAo",useOnlyAo);
  ssaoMat.setVector2("FrustumNearFar",frustumNearFar);
  material.setVector2("FrustumNearFar",frustumNearFar);
  ssaoMat.setParam("Samples",VarType.Vector2Array,samples);
  float xScale=1.0f / w;
  float yScale=1.0f / h;
  float blurScale=2f;
  material.setFloat("XScale",blurScale * xScale);
  material.setFloat("YScale",blurScale * yScale);
}
