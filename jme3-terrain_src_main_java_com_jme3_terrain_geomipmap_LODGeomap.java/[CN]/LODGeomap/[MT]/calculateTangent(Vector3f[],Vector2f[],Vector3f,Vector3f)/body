{
  Vector3f edge1=new Vector3f();
  Vector3f edge2=new Vector3f();
  Vector2f edge1uv=new Vector2f();
  Vector2f edge2uv=new Vector2f();
  t[2].subtract(t[0],edge2uv);
  t[1].subtract(t[0],edge1uv);
  float det=edge1uv.x * edge2uv.y;
  boolean normalize=true;
  if (Math.abs(det) < 0.0000001f) {
    det=1;
    normalize=true;
  }
  v[1].subtract(v[0],edge1);
  v[2].subtract(v[0],edge2);
  tangent.set(edge1);
  tangent.normalizeLocal();
  binormal.set(edge2);
  binormal.normalizeLocal();
  float factor=1 / det;
  tangent.x=(edge2uv.y * edge1.x) * factor;
  tangent.y=0;
  tangent.z=(edge2uv.y * edge1.z) * factor;
  if (normalize) {
    tangent.normalizeLocal();
  }
  binormal.x=0;
  binormal.y=(edge1uv.x * edge2.y) * factor;
  binormal.z=(edge1uv.x * edge2.z) * factor;
  if (normalize) {
    binormal.normalizeLocal();
  }
  return tangent;
}
