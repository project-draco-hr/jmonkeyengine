{
  Set<String> alreadyReadModifiers=new HashSet<String>();
  Collection<Modifier> result=new ArrayList<Modifier>();
  Structure modifiersListBase=(Structure)objectStructure.getFieldValue("modifiers");
  List<Structure> modifiers=modifiersListBase.evaluateListBase();
  for (  Structure modifierStructure : modifiers) {
    String modifierType=modifierStructure.getType();
    if (!Modifier.canBeAppliedMultipleTimes(modifierType) && alreadyReadModifiers.contains(modifierType)) {
      LOGGER.log(Level.WARNING,"Modifier {0} can only be applied once to object: {1}",new Object[]{modifierType,objectStructure.getName()});
    }
 else {
      Modifier modifier=null;
      if (Modifier.ARRAY_MODIFIER_DATA.equals(modifierStructure.getType())) {
        modifier=new ArrayModifier(modifierStructure,blenderContext);
      }
 else       if (Modifier.MIRROR_MODIFIER_DATA.equals(modifierStructure.getType())) {
        modifier=new MirrorModifier(modifierStructure,blenderContext);
      }
 else       if (Modifier.ARMATURE_MODIFIER_DATA.equals(modifierStructure.getType())) {
        modifier=new ArmatureModifier(objectStructure,modifierStructure,blenderContext);
      }
 else       if (Modifier.PARTICLE_MODIFIER_DATA.equals(modifierStructure.getType())) {
        modifier=new ParticlesModifier(modifierStructure,blenderContext);
      }
      if (modifier != null) {
        if (modifier.isModifying()) {
          result.add(modifier);
          alreadyReadModifiers.add(modifierType);
        }
 else {
          LOGGER.log(Level.WARNING,"The modifier {0} will cause no changes in the model. It will be ignored!",modifierStructure.getName());
        }
      }
 else {
        LOGGER.log(Level.WARNING,"Unsupported modifier type: {0}",modifierStructure.getType());
      }
    }
  }
  return result;
}
