{
  int index=0;
  for (int i=1; i < targetTimes.length; ++i) {
    if (targetTimes[i] < currentTime) {
      ++index;
    }
 else {
      break;
    }
  }
  if (index >= targetTimes.length - 1) {
    result.set(targetQuaternions[targetTimes.length - 1]);
  }
 else {
    float delta=targetTimes[index + 1] - targetTimes[index];
    if (delta == 0.0f) {
      result.set(targetQuaternions[index + 1]);
    }
 else {
      float scale=(currentTime - targetTimes[index]) / (targetTimes[index + 1] - targetTimes[index]);
      result.slerp(targetQuaternions[index],targetQuaternions[index + 1],scale);
    }
  }
}
