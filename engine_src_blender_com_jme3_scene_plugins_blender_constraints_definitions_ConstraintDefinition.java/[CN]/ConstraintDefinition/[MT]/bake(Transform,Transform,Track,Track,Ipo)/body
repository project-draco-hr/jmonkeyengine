{
  TrackWrapper ownerWrapperTrack=ownerTrack != null ? new TrackWrapper(ownerTrack) : null;
  TrackWrapper targetWrapperTrack=targetTrack != null ? new TrackWrapper(targetTrack) : null;
  this.bake(ownerTransform,targetTransform,influenceIpo.calculateValue(0));
  if (ownerWrapperTrack != null) {
    float[] ownerTimes=ownerWrapperTrack.getTimes();
    Vector3f[] translations=ownerWrapperTrack.getTranslations();
    Quaternion[] rotations=ownerWrapperTrack.getRotations();
    Vector3f[] scales=ownerWrapperTrack.getScales();
    float[] targetTimes=targetWrapperTrack == null ? null : targetWrapperTrack.getTimes();
    Vector3f[] targetTranslations=targetWrapperTrack == null ? null : targetWrapperTrack.getTranslations();
    Quaternion[] targetRotations=targetWrapperTrack == null ? null : targetWrapperTrack.getRotations();
    Vector3f[] targetScales=targetWrapperTrack == null ? null : targetWrapperTrack.getScales();
    Vector3f translation=new Vector3f(), scale=new Vector3f();
    Quaternion rotation=new Quaternion();
    Transform ownerTemp=new Transform(), targetTemp=new Transform();
    for (int i=0; i < ownerTimes.length; ++i) {
      float t=ownerTimes[i];
      ownerTemp.setTranslation(translations[i]);
      ownerTemp.setRotation(rotations[i]);
      ownerTemp.setScale(scales[i]);
      if (targetWrapperTrack == null) {
        this.bake(ownerTemp,targetTransform,influenceIpo.calculateValue(i));
      }
 else {
        this.interpolate(targetTranslations,targetTimes,t,translation);
        this.interpolate(targetRotations,targetTimes,t,rotation);
        this.interpolate(targetScales,targetTimes,t,scale);
        targetTemp.setTranslation(translation);
        targetTemp.setRotation(rotation);
        targetTemp.setScale(scale);
        this.bake(ownerTemp,targetTemp,influenceIpo.calculateValue(i));
      }
      translations[i]=ownerTemp.getTranslation().clone();
      rotations[i]=ownerTemp.getRotation().clone();
      scales[i]=ownerTemp.getScale().clone();
    }
    ownerWrapperTrack.setKeyframes(ownerTimes,translations,rotations,scales);
  }
}
