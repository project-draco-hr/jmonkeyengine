{
  for (  SceneExplorerNode di : Lookup.getDefault().lookupAll(SceneExplorerNode.class)) {
    if (di.getExplorerObjectClass().getName().equals(key.getClass().getName())) {
      Logger.getLogger(this.getClass().getName()).log(Level.FINE,"Found {0}",di.getExplorerNodeClass());
      Node[] ret=di.createNodes(key,dataObject,readOnly);
      if (ret != null) {
        return ret;
      }
    }
  }
  if (key instanceof Spatial) {
    JmeSpatialChildren children=new JmeSpatialChildren((Spatial)key);
    children.setReadOnly(readOnly);
    children.setDataObject(dataObject);
    if (key instanceof com.jme3.audio.AudioNode) {
      return new Node[]{new JmeAudioNode((com.jme3.audio.AudioNode)key,children).setReadOnly(readOnly)};
    }
    if (key instanceof com.jme3.scene.Node) {
      return new Node[]{new JmeNode((com.jme3.scene.Node)key,children).setReadOnly(readOnly)};
    }
    if (key instanceof BitmapText) {
      return new Node[]{new JmeBitmapText((BitmapText)key,children).setReadOnly(readOnly)};
    }
    if (key instanceof Picture) {
      return new Node[]{new JmePicture((Picture)key,children).setReadOnly(readOnly)};
    }
    if (key instanceof ParticleEmitter) {
      return new Node[]{new JmeParticleEmitter((ParticleEmitter)key,children).setReadOnly(readOnly)};
    }
    if (key instanceof com.jme3.scene.Geometry) {
      return new Node[]{new JmeGeometry((Geometry)key,children).setReadOnly(readOnly)};
    }
    return new Node[]{new JmeSpatial((Spatial)key,children).setReadOnly(readOnly)};
  }
 else   if (key instanceof LightSpatialPair) {
    LightSpatialPair pair=(LightSpatialPair)key;
    if (pair.getLight() instanceof PointLight) {
      return new Node[]{new JmePointLight(pair.getSpatial(),(PointLight)pair.getLight()).setReadOnly(readOnly)};
    }
    if (pair.getLight() instanceof SpotLight) {
      return new Node[]{new JmeSpotLight(pair.getSpatial(),(SpotLight)pair.getLight()).setReadOnly(readOnly)};
    }
    if (pair.getLight() instanceof DirectionalLight) {
      return new Node[]{new JmeDirectionalLight(pair.getSpatial(),(DirectionalLight)pair.getLight()).setReadOnly(readOnly)};
    }
    if (pair.getLight() instanceof AmbientLight) {
      return new Node[]{new JmeAmbientLight(pair.getSpatial(),(AmbientLight)pair.getLight()).setReadOnly(readOnly)};
    }
    if (pair.getLight() instanceof LightProbe) {
      return new Node[]{new JmeLightProbe(pair.getSpatial(),(LightProbe)pair.getLight()).setReadOnly(readOnly)};
    }
    return new Node[]{new JmeLight(pair.getSpatial(),pair.getLight()).setReadOnly(readOnly)};
  }
 else   if (key instanceof MeshGeometryPair) {
    MeshGeometryPair pair=(MeshGeometryPair)key;
    return new Node[]{new JmeMesh(pair.getGeometry(),pair.getMesh()).setReadOnly(readOnly)};
  }
 else   if (key instanceof Control && dataObject != null) {
    return new Node[]{new JmeGenericControl((Control)key,dataObject)};
  }
  return new Node[]{Node.EMPTY};
}
