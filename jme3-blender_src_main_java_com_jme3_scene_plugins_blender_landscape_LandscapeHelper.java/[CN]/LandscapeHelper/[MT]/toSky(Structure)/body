{
  int skytype=((Number)worldStructure.getFieldValue("skytype")).intValue();
  if (skytype == 0) {
    return null;
  }
  LOGGER.fine("Loading sky.");
  ColorRGBA horizontalColor=this.toBackgroundColor(worldStructure);
  float zenr=((Number)worldStructure.getFieldValue("zenr")).floatValue();
  float zeng=((Number)worldStructure.getFieldValue("zeng")).floatValue();
  float zenb=((Number)worldStructure.getFieldValue("zenb")).floatValue();
  ColorRGBA zenithColor=new ColorRGBA(zenr,zeng,zenb,1);
  boolean loadGeneratedTextures=blenderContext.getBlenderKey().isLoadGeneratedTextures();
  blenderContext.getBlenderKey().setLoadGeneratedTextures(true);
  TextureHelper textureHelper=blenderContext.getHelper(TextureHelper.class);
  List<CombinedTexture> loadedTextures=null;
  try {
    loadedTextures=textureHelper.readTextureData(worldStructure,new float[]{horizontalColor.r,horizontalColor.g,horizontalColor.b,horizontalColor.a},true);
  }
  finally {
    blenderContext.getBlenderKey().setLoadGeneratedTextures(loadGeneratedTextures);
  }
  TextureCubeMap texture=null;
  if (loadedTextures != null && loadedTextures.size() > 0) {
    if (loadedTextures.size() > 1) {
      throw new IllegalStateException("There should be only one combined texture for sky!");
    }
    CombinedTexture combinedTexture=loadedTextures.get(0);
    texture=combinedTexture.generateSkyTexture(horizontalColor,zenithColor,blenderContext);
  }
 else {
    LOGGER.fine("Preparing colors for colorband.");
    int colorbandType=ColorBand.IPO_CARDINAL;
    List<ColorRGBA> colorbandColors=new ArrayList<ColorRGBA>(3);
    colorbandColors.add(horizontalColor);
    if ((skytype & SKYTYPE_BLEND) != 0) {
      if ((skytype & SKYTYPE_PAPER) != 0) {
        colorbandType=ColorBand.IPO_LINEAR;
      }
      if ((skytype & SKYTYPE_REAL) != 0) {
        colorbandColors.add(0,zenithColor);
      }
      colorbandColors.add(zenithColor);
    }
    int size=blenderContext.getBlenderKey().getSkyGeneratedTextureSize();
    List<Integer> positions=new ArrayList<Integer>(colorbandColors.size());
    positions.add(0);
    if (colorbandColors.size() == 2) {
      positions.add(size - 1);
    }
 else     if (colorbandColors.size() == 3) {
      positions.add(size / 2);
      positions.add(size - 1);
    }
    LOGGER.fine("Generating sky texture.");
    float[][] values=new ColorBand(colorbandType,colorbandColors,positions,size).computeValues();
    Image image=ImageUtils.createEmptyImage(Format.RGB8,size,size,6);
    PixelInputOutput pixelIO=PixelIOFactory.getPixelIO(image.getFormat());
    TexturePixel pixel=new TexturePixel();
    LOGGER.fine("Creating side textures.");
    int[] sideImagesIndexes=new int[]{0,1,4,5};
    for (    int i : sideImagesIndexes) {
      for (int y=0; y < size; ++y) {
        pixel.red=values[y][0];
        pixel.green=values[y][1];
        pixel.blue=values[y][2];
        for (int x=0; x < size; ++x) {
          pixelIO.write(image,i,pixel,x,y);
        }
      }
    }
    LOGGER.fine("Creating top texture.");
    pixelIO.read(image,0,pixel,0,image.getHeight() - 1);
    for (int y=0; y < size; ++y) {
      for (int x=0; x < size; ++x) {
        pixelIO.write(image,3,pixel,x,y);
      }
    }
    LOGGER.fine("Creating bottom texture.");
    pixelIO.read(image,0,pixel,0,0);
    for (int y=0; y < size; ++y) {
      for (int x=0; x < size; ++x) {
        pixelIO.write(image,2,pixel,x,y);
      }
    }
    texture=new TextureCubeMap(image);
  }
  LOGGER.fine("Sky texture created. Creating sky.");
  return SkyFactory.createSky(blenderContext.getAssetManager(),texture,false);
}
