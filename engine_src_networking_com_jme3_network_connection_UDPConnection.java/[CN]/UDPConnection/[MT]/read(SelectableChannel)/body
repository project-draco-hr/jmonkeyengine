{
  DatagramChannel socketChannel=(DatagramChannel)channel;
  InetSocketAddress address=(InetSocketAddress)datagramChannel.receive(readBuffer);
  if (address == null) {
    socketChannel.close();
    return;
  }
  String reason=shouldFilterConnector(address);
  if (reason != null) {
    log.log(Level.INFO,"[Server][UDP] Client with address {0} got filtered with reason: {1}",new Object[]{address,reason});
    socketChannel.close();
    return;
  }
  SelectionKey key=socketChannel.keyFor(selector);
  if ((key.attachment() == null || ((Client)key.attachment()).getDatagramReceiver() != address) && target == null) {
    Client client=new Client(true);
    client.setDatagramReceiver(address);
    client.setUDPConnection(this);
    client.setDatagramChannel(socketChannel);
synchronized (connections) {
      connections.add(client);
    }
    key.attach(client);
  }
  readBuffer.flip();
  Object object=Serializer.readClassAndObject(readBuffer);
  log.log(Level.FINE,"[{0}][UDP] Read full object: {1}",new Object[]{label,object});
  if (object instanceof Message) {
    Message message=(Message)object;
    if (message instanceof DiscoverHostMessage) {
synchronized (connections) {
        connections.remove((Client)key.attachment());
      }
      log.log(Level.FINE,"[{0}][UDP] Responded to a discover host message by {1}.",new Object[]{label,address});
      send(address,message);
      return;
    }
    Object attachment=socketChannel.keyFor(selector).attachment();
    if (attachment instanceof Client)     message.setClient((Client)attachment);
    message.setConnection(this);
    this.fireMessageReceived(message);
  }
 else {
    this.fireObjectReceived(object);
  }
  readBuffer.clear();
}
