{
  RenderImageJme jmeImage=(RenderImageJme)image;
  Texture2D texture=jmeImage.getTexture();
  unshadedMat.setColor("Color",convertColor(color,tempColor));
  unshadedMat.setTexture("ColorMap",texture);
  unshadedMat.setBoolean("VertexColor",false);
  float imageWidth=jmeImage.getWidth();
  float imageHeight=jmeImage.getHeight();
  FloatBuffer texCoords=(FloatBuffer)quadModTC.getData();
  float startX=srcX / imageWidth;
  float startY=srcY / imageHeight;
  float endX=startX + (srcW / imageWidth);
  float endY=startY + (srcH / imageHeight);
  startY=1f - startY;
  endY=1f - endY;
  texCoords.rewind();
  texCoords.put(startX).put(startY);
  texCoords.put(endX).put(startY);
  texCoords.put(endX).put(endY);
  texCoords.put(startX).put(endY);
  texCoords.flip();
  quadModTC.updateData(texCoords);
  quad.clearBuffer(Type.TexCoord);
  quad.setBuffer(quadModTC);
  float x0=centerX + (x - centerX) * scale;
  float y0=centerY + (y - centerY) * scale;
  tempMat.loadIdentity();
  tempMat.setTranslation(x0,getHeight() - y0,0);
  tempMat.setScale(w * scale,h * scale,0);
  rm.setWorldMatrix(tempMat);
  rm.setForcedRenderState(renderState);
  unshadedMat.render(quadGeom,rm);
}
