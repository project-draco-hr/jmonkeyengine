{
  if (object == null) {
    return null;
  }
  if (log.isLoggable(Level.FINER)) {
    log.finer("cloning:" + object.getClass() + "@"+ System.identityHashCode(object));
  }
  Class<T> type=objectClass(object);
  Object clone=index.get(object);
  if (clone != null || index.containsKey(object)) {
    if (log.isLoggable(Level.FINER)) {
      log.finer("cloned:" + object.getClass() + "@"+ System.identityHashCode(object)+ " as cached:"+ (clone == null ? "null" : (clone.getClass() + "@" + System.identityHashCode(clone))));
    }
    return type.cast(clone);
  }
  CloneFunction<T> f=getCloneFunction(type);
  if (f != null) {
    T result=f.cloneObject(this,object);
    index.put(object,result);
    f.cloneFields(this,result,object);
    if (log.isLoggable(Level.FINER)) {
      if (result == null) {
        log.finer("cloned:" + object.getClass() + "@"+ System.identityHashCode(object)+ " as transformed:null");
      }
 else {
        log.finer("clone:" + object.getClass() + "@"+ System.identityHashCode(object)+ " as transformed:"+ result.getClass()+ "@"+ System.identityHashCode(result));
      }
    }
    return result;
  }
  if (object.getClass().isArray()) {
    clone=arrayClone(object);
  }
 else   if (object instanceof JmeCloneable) {
    clone=((JmeCloneable)object).jmeClone();
    index.put(object,clone);
    ((JmeCloneable)clone).cloneFields(this,object);
  }
 else   if (object instanceof Cloneable) {
    try {
      clone=javaClone(object);
    }
 catch (    CloneNotSupportedException e) {
      throw new IllegalArgumentException("Object is not cloneable, type:" + type,e);
    }
    index.put(object,clone);
  }
 else {
    throw new IllegalArgumentException("Object is not cloneable, type:" + type);
  }
  if (log.isLoggable(Level.FINER)) {
    log.finer("cloned:" + object.getClass() + "@"+ System.identityHashCode(object)+ " as "+ clone.getClass()+ "@"+ System.identityHashCode(clone));
  }
  return type.cast(clone);
}
