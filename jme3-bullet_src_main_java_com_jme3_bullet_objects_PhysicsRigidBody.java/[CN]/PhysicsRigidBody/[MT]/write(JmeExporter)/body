{
  super.write(e);
  OutputCapsule capsule=e.getCapsule(this);
  capsule.write(getMass(),"mass",1.0f);
  capsule.write(getGravity(),"gravity",Vector3f.ZERO);
  capsule.write(getFriction(),"friction",0.5f);
  capsule.write(getRestitution(),"restitution",0);
  Vector3f angularFactor=getAngularFactor(null);
  if (angularFactor.x == angularFactor.y && angularFactor.y == angularFactor.z) {
    capsule.write(getAngularFactor(),"angularFactor",1);
  }
 else {
    capsule.write(getAngularFactor(null),"angularFactor",Vector3f.UNIT_XYZ);
    capsule.write(getLinearFactor(),"linearFactor",Vector3f.UNIT_XYZ);
  }
  capsule.write(kinematic,"kinematic",false);
  capsule.write(getLinearDamping(),"linearDamping",0);
  capsule.write(getAngularDamping(),"angularDamping",0);
  capsule.write(getLinearSleepingThreshold(),"linearSleepingThreshold",0.8f);
  capsule.write(getAngularSleepingThreshold(),"angularSleepingThreshold",1.0f);
  capsule.write(getCcdMotionThreshold(),"ccdMotionThreshold",0);
  capsule.write(getCcdSweptSphereRadius(),"ccdSweptSphereRadius",0);
  capsule.write(getPhysicsLocation(new Vector3f()),"physicsLocation",new Vector3f());
  capsule.write(getPhysicsRotationMatrix(new Matrix3f()),"physicsRotation",new Matrix3f());
  capsule.writeSavableArrayList(joints,"joints",null);
}
