{
  LOGGER.info("[" + btd.bone.getName() + "]  additionalRootBoneTransformation =\n"+ additionalRootBoneTransformation);
  Matrix4f totalInverseParentMatrix=btd.parent != null ? btd.parent.totalInverseBoneParentMatrix : Matrix4f.IDENTITY;
  LOGGER.info("[" + btd.bone.getName() + "]  totalInverseParentMatrix =\n"+ totalInverseParentMatrix);
  Matrix4f restMatrix=additionalRootBoneTransformation.mult(btd.boneArmatureMatrix);
  LOGGER.info("[" + btd.bone.getName() + "]  restMatrix =\n"+ restMatrix);
  btd.totalInverseBoneParentMatrix=restMatrix.clone().invert();
  restMatrix=totalInverseParentMatrix.mult(restMatrix);
  LOGGER.info("[" + btd.bone.getName() + "]  resultMatrix =\n"+ restMatrix);
  btd.bone.setBindTransforms(restMatrix.toTranslationVector(),restMatrix.toRotationQuat(),btd.size);
  boneList.add(btd.bone);
  bonesMap.put(btd.bone.getName(),Integer.valueOf(boneList.size() - 1));
  if (btd.children != null && btd.children.size() > 0) {
    for (    BoneTransformationData child : btd.children) {
      this.assignBonesMatrices(child,additionalRootBoneTransformation,boneList);
      btd.bone.addChild(child.bone);
    }
  }
}
