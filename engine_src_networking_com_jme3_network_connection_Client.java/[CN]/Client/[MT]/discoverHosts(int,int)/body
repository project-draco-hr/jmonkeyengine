{
  ArrayList<InetAddress> addresses=new ArrayList<InetAddress>();
  DatagramSocket socket=new DatagramSocket();
  ByteBuffer buffer=ByteBuffer.allocate(4);
  Serializer.writeClass(buffer,DiscoverHostMessage.class);
  buffer.flip();
  byte[] data=new byte[buffer.limit()];
  buffer.get(data);
  for (  NetworkInterface iface : Collections.list(NetworkInterface.getNetworkInterfaces())) {
    for (    InetAddress address : Collections.list(iface.getInetAddresses())) {
      if (address instanceof Inet6Address || address.isLoopbackAddress())       continue;
      byte[] ip=address.getAddress();
      ip[3]=-1;
      socket.send(new DatagramPacket(data,data.length,InetAddress.getByAddress(ip),port));
      ip[2]=-1;
      socket.send(new DatagramPacket(data,data.length,InetAddress.getByAddress(ip),port));
    }
  }
  log.log(Level.FINE,"[{0}][UDP] Started discovery on port {1}.",new Object[]{label,port});
  long targetTime=System.currentTimeMillis() + timeout;
  DatagramPacket packet=new DatagramPacket(new byte[0],0);
  socket.setSoTimeout(1000);
  while (System.currentTimeMillis() < targetTime) {
    try {
      socket.receive(packet);
      if (addresses.contains(packet.getAddress()))       continue;
      addresses.add(packet.getAddress());
      log.log(Level.FINE,"[{0}][UDP] Discovered server on {1}.",new Object[]{label,packet.getAddress()});
    }
 catch (    SocketTimeoutException ste) {
    }
  }
  return addresses;
}
