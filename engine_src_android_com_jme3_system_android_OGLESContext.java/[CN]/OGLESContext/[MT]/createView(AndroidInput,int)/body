{
  EGL10 egl=(EGL10)EGLContext.getEGL();
  EGLDisplay display=egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
  int[] version=new int[2];
  if (egl.eglInitialize(display,version) == true) {
    logger.info("Display EGL Version: " + version[0] + "."+ version[1]);
  }
  int[] num_conf=new int[1];
  egl.eglGetConfigs(display,null,0,num_conf);
  int configurations=num_conf[0];
  EGLConfig[] conf=new EGLConfig[configurations];
  egl.eglGetConfigs(display,conf,configurations,num_conf);
  EGLConfig bestConfig=null;
  int[] value=new int[1];
  int EGL_OPENGL_ES2_BIT=4;
  for (int i=0; i < configurations; i++) {
    if (conf[i] != null) {
      egl.eglGetConfigAttrib(display,conf[i],EGL10.EGL_RENDERABLE_TYPE,value);
      if ((value[0] & EGL_OPENGL_ES2_BIT) != 0) {
        clientOpenGLESVersion=2;
        bestConfig=better(bestConfig,conf[i],egl,display);
      }
    }
 else {
      break;
    }
  }
  if (clientOpenGLESVersion < 2) {
    logger.severe("OpenGL ES 2.0 is not supported on this device");
  }
  this.view=view;
  view.setEGLContextClientVersion(clientOpenGLESVersion);
  if (bestConfig != null) {
    logger.info("JME3 using best EGL configuration available here: ");
    logEGLConfig(bestConfig,display,egl);
    egl.eglGetConfigAttrib(display,bestConfig,EGL10.EGL_RED_SIZE,value);
    int redSize=value[0];
    egl.eglGetConfigAttrib(display,bestConfig,EGL10.EGL_GREEN_SIZE,value);
    int greenSize=value[0];
    egl.eglGetConfigAttrib(display,bestConfig,EGL10.EGL_BLUE_SIZE,value);
    int blueSize=value[0];
    egl.eglGetConfigAttrib(display,bestConfig,EGL10.EGL_ALPHA_SIZE,value);
    int alphaSize=value[0];
    egl.eglGetConfigAttrib(display,bestConfig,EGL10.EGL_DEPTH_SIZE,value);
    int depthSize=value[0];
    egl.eglGetConfigAttrib(display,bestConfig,EGL10.EGL_STENCIL_SIZE,value);
    int stencilSize=value[0];
    view.setEGLConfigChooser(redSize,greenSize,blueSize,alphaSize,depthSize,stencilSize);
  }
 else {
    logger.info("JME3 best EGL configuration not found using default: RGB565, Depth16, Alpha0, Stencil0");
    view.setEGLConfigChooser(5,6,5,0,16,0);
  }
  view.setFocusableInTouchMode(true);
  view.setFocusable(true);
  view.getHolder().setType(SurfaceHolder.SURFACE_TYPE_GPU);
  view.setRenderer(this);
  return view;
}
