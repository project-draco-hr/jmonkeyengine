{
  float[] uvCoordinates=new float[positions.length / 3 * 2];
  Vector3f v=new Vector3f();
  float cx=bs.getCenter().x, cy=bs.getCenter().y, cz=bs.getCenter().z;
  Vector3f uBase=new Vector3f(0,-1,0);
  Vector3f vBase=new Vector3f(0,0,-1);
  for (int i=0, j=0; i < positions.length; i+=3, j+=2) {
    v.set(positions[i] - cx,positions[i + 1] - cy,0);
    v.normalizeLocal();
    float angle=v.angleBetween(uBase);
    if (v.x < 0) {
      angle=FastMath.TWO_PI - angle;
    }
    uvCoordinates[j]=angle / FastMath.TWO_PI;
    v.set(positions[i] - cx,positions[i + 1] - cy,positions[i + 2] - cz);
    v.normalizeLocal();
    angle=v.angleBetween(vBase);
    uvCoordinates[j + 1]=angle / FastMath.PI;
  }
  Triangle triangle=new Triangle();
  for (int i=0; i < positions.length; i+=9) {
    triangle.set(0,positions[i],positions[i + 1],positions[i + 2]);
    triangle.set(1,positions[i + 3],positions[i + 4],positions[i + 5]);
    triangle.set(2,positions[i + 6],positions[i + 7],positions[i + 8]);
    float sgn1=Math.signum(triangle.get1().x - cx);
    float sgn2=Math.signum(triangle.get2().x - cx);
    float sgn3=Math.signum(triangle.get3().x - cx);
    float xSideFactor=sgn1 + sgn2 + sgn3;
    float ySideFactor=Math.signum(triangle.get1().y - cy) + Math.signum(triangle.get2().y - cy) + Math.signum(triangle.get3().y - cy);
    if ((xSideFactor > -3 || xSideFactor < 3) && ySideFactor < 0) {
      if (sgn1 == 1.0f) {
        uvCoordinates[i / 3 * 2]+=1.0f;
      }
      if (sgn2 == 1.0f) {
        uvCoordinates[(i / 3 + 1) * 2]+=1.0f;
      }
      if (sgn3 == 1.0f) {
        uvCoordinates[(i / 3 + 2) * 2]+=1.0f;
      }
    }
  }
  return uvCoordinates;
}
