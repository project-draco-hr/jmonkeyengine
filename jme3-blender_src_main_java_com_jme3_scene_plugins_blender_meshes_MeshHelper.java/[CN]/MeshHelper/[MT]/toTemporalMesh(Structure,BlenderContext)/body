{
  LOGGER.log(Level.FINE,"Loading temporal mesh named: {0}.",meshStructure.getName());
  TemporalMesh temporalMesh=(TemporalMesh)blenderContext.getLoadedFeature(meshStructure.getOldMemoryAddress(),LoadedDataType.TEMPORAL_MESH);
  if (temporalMesh != null) {
    LOGGER.fine("The mesh is already loaded. Returning its clone.");
    return temporalMesh.clone();
  }
  if ("ID".equals(meshStructure.getType())) {
    LOGGER.fine("Loading mesh from external blend file.");
    return (TemporalMesh)this.loadLibrary(meshStructure);
  }
  String name=meshStructure.getName();
  LOGGER.log(Level.FINE,"Reading mesh: {0}.",name);
  temporalMesh=new TemporalMesh(meshStructure,blenderContext);
  LOGGER.fine("Loading materials.");
  MaterialHelper materialHelper=blenderContext.getHelper(MaterialHelper.class);
  temporalMesh.setMaterials(materialHelper.getMaterials(meshStructure,blenderContext));
  LOGGER.fine("Reading custom properties.");
  Properties properties=this.loadProperties(meshStructure,blenderContext);
  temporalMesh.setProperties(properties);
  blenderContext.addLoadedFeatures(meshStructure.getOldMemoryAddress(),LoadedDataType.STRUCTURE,meshStructure);
  blenderContext.addLoadedFeatures(meshStructure.getOldMemoryAddress(),LoadedDataType.TEMPORAL_MESH,temporalMesh);
  return temporalMesh.clone();
}
