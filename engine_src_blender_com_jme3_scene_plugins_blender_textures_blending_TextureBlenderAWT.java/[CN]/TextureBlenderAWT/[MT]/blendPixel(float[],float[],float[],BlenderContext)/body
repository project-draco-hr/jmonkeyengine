{
  float blendFactor=this.blendFactor * pixelColor[3];
  float oneMinusFactor=1.0f - blendFactor, col;
switch (blendType) {
case MTEX_BLEND:
    result[0]=blendFactor * pixelColor[0] + oneMinusFactor * materialColor[0];
  result[1]=blendFactor * pixelColor[1] + oneMinusFactor * materialColor[1];
result[2]=blendFactor * pixelColor[2] + oneMinusFactor * materialColor[2];
break;
case MTEX_MUL:
result[0]=(oneMinusFactor + blendFactor * materialColor[0]) * pixelColor[0];
result[1]=(oneMinusFactor + blendFactor * materialColor[1]) * pixelColor[1];
result[2]=(oneMinusFactor + blendFactor * materialColor[2]) * pixelColor[2];
break;
case MTEX_DIV:
if (pixelColor[0] != 0.0) {
result[0]=(oneMinusFactor * materialColor[0] + blendFactor * materialColor[0] / pixelColor[0]) * 0.5f;
}
if (pixelColor[1] != 0.0) {
result[1]=(oneMinusFactor * materialColor[1] + blendFactor * materialColor[1] / pixelColor[1]) * 0.5f;
}
if (pixelColor[2] != 0.0) {
result[2]=(oneMinusFactor * materialColor[2] + blendFactor * materialColor[2] / pixelColor[2]) * 0.5f;
}
break;
case MTEX_SCREEN:
result[0]=1.0f - (oneMinusFactor + blendFactor * (1.0f - materialColor[0])) * (1.0f - pixelColor[0]);
result[1]=1.0f - (oneMinusFactor + blendFactor * (1.0f - materialColor[1])) * (1.0f - pixelColor[1]);
result[2]=1.0f - (oneMinusFactor + blendFactor * (1.0f - materialColor[2])) * (1.0f - pixelColor[2]);
break;
case MTEX_OVERLAY:
if (materialColor[0] < 0.5f) {
result[0]=pixelColor[0] * (oneMinusFactor + 2.0f * blendFactor * materialColor[0]);
}
 else {
result[0]=1.0f - (oneMinusFactor + 2.0f * blendFactor * (1.0f - materialColor[0])) * (1.0f - pixelColor[0]);
}
if (materialColor[1] < 0.5f) {
result[1]=pixelColor[1] * (oneMinusFactor + 2.0f * blendFactor * materialColor[1]);
}
 else {
result[1]=1.0f - (oneMinusFactor + 2.0f * blendFactor * (1.0f - materialColor[1])) * (1.0f - pixelColor[1]);
}
if (materialColor[2] < 0.5f) {
result[2]=pixelColor[2] * (oneMinusFactor + 2.0f * blendFactor * materialColor[2]);
}
 else {
result[2]=1.0f - (oneMinusFactor + 2.0f * blendFactor * (1.0f - materialColor[2])) * (1.0f - pixelColor[2]);
}
break;
case MTEX_SUB:
result[0]=materialColor[0] - blendFactor * pixelColor[0];
result[1]=materialColor[1] - blendFactor * pixelColor[1];
result[2]=materialColor[2] - blendFactor * pixelColor[2];
result[0]=FastMath.clamp(result[0],0.0f,1.0f);
result[1]=FastMath.clamp(result[1],0.0f,1.0f);
result[2]=FastMath.clamp(result[2],0.0f,1.0f);
break;
case MTEX_ADD:
result[0]=(blendFactor * pixelColor[0] + materialColor[0]) * 0.5f;
result[1]=(blendFactor * pixelColor[1] + materialColor[1]) * 0.5f;
result[2]=(blendFactor * pixelColor[2] + materialColor[2]) * 0.5f;
break;
case MTEX_DIFF:
result[0]=oneMinusFactor * materialColor[0] + blendFactor * Math.abs(materialColor[0] - pixelColor[0]);
result[1]=oneMinusFactor * materialColor[1] + blendFactor * Math.abs(materialColor[1] - pixelColor[1]);
result[2]=oneMinusFactor * materialColor[2] + blendFactor * Math.abs(materialColor[2] - pixelColor[2]);
break;
case MTEX_DARK:
col=blendFactor * pixelColor[0];
result[0]=col < materialColor[0] ? col : materialColor[0];
col=blendFactor * pixelColor[1];
result[1]=col < materialColor[1] ? col : materialColor[1];
col=blendFactor * pixelColor[2];
result[2]=col < materialColor[2] ? col : materialColor[2];
break;
case MTEX_LIGHT:
col=blendFactor * pixelColor[0];
result[0]=col > materialColor[0] ? col : materialColor[0];
col=blendFactor * pixelColor[1];
result[1]=col > materialColor[1] ? col : materialColor[1];
col=blendFactor * pixelColor[2];
result[2]=col > materialColor[2] ? col : materialColor[2];
break;
case MTEX_BLEND_HUE:
case MTEX_BLEND_SAT:
case MTEX_BLEND_VAL:
case MTEX_BLEND_COLOR:
System.arraycopy(materialColor,0,result,0,3);
this.blendHSV(blendType,result,blendFactor,pixelColor,blenderContext);
break;
default :
throw new IllegalStateException("Unknown blend type: " + blendType);
}
}
