{
  Vector3f rootPoint=new Vector3f();
  Vector3f rightPoint=new Vector3f();
  Vector3f leftPoint=new Vector3f();
  Vector3f topPoint=new Vector3f();
  Vector3f bottomPoint=new Vector3f();
  Vector3f tangent=new Vector3f();
  Vector3f binormal=new Vector3f();
  Vector3f normal=new Vector3f();
  int s=this.getSize() - 1;
  if (right != null) {
    for (int i=0; i < s + 1; i++) {
      rootPoint.set(s,this.getHeightmapHeight(s,i),i);
      leftPoint.set(s - 1,this.getHeightmapHeight(s - 1,i),i);
      rightPoint.set(s + 1,right.getHeightmapHeight(1,i),i);
      if (i == 0) {
        if (top == null) {
          bottomPoint.set(s,this.getHeightmapHeight(s,i + 1),i + 1);
          averageNormalsTangents(null,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
          VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
          VertexBuffer rightNB=right.getMesh().getBuffer(Type.Normal);
          BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),s);
          BufferUtils.setInBuffer(normal,(FloatBuffer)rightNB.getData(),0);
        }
 else {
          topPoint.set(s,top.getHeightmapHeight(s,s - 1),i - 1);
          bottomPoint.set(s,this.getHeightmapHeight(s,i + 1),i + 1);
          averageNormalsTangents(topPoint,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
          VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
          VertexBuffer rightNB=right.getMesh().getBuffer(Type.Normal);
          BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),s);
          BufferUtils.setInBuffer(normal,(FloatBuffer)rightNB.getData(),0);
          if (topRight != null) {
            VertexBuffer topRightNB=topRight.getMesh().getBuffer(Type.Normal);
            BufferUtils.setInBuffer(normal,(FloatBuffer)topRightNB.getData(),(s + 1) * s);
            topRightNB.setUpdateNeeded();
          }
        }
      }
 else       if (i == s) {
        if (bottom == null) {
          topPoint.set(s,this.getHeightmapHeight(s,i - 1),i - 1);
          averageNormalsTangents(topPoint,rootPoint,leftPoint,null,rightPoint,null,null,null,null,null,normal,tangent,binormal);
          VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
          VertexBuffer rightNB=right.getMesh().getBuffer(Type.Normal);
          BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),(s + 1) * (i + 1) - 1);
          BufferUtils.setInBuffer(normal,(FloatBuffer)rightNB.getData(),(s + 1) * (s));
        }
 else {
          topPoint.set(s,this.getHeightmapHeight(s,i - 1),i - 1);
          bottomPoint.set(s,bottom.getHeightmapHeight(s,1),i + 1);
          averageNormalsTangents(topPoint,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
          VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
          VertexBuffer rightNB=right.getMesh().getBuffer(Type.Normal);
          VertexBuffer downNB=bottom.getMesh().getBuffer(Type.Normal);
          BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),(s + 1) * (s + 1) - 1);
          BufferUtils.setInBuffer(normal,(FloatBuffer)rightNB.getData(),(s + 1) * s);
          BufferUtils.setInBuffer(normal,(FloatBuffer)downNB.getData(),s);
          if (bottomRight != null) {
            VertexBuffer bottomRightNB=bottomRight.getMesh().getBuffer(Type.Normal);
            BufferUtils.setInBuffer(normal,(FloatBuffer)bottomRightNB.getData(),0);
            bottomRightNB.setUpdateNeeded();
          }
          downNB.setUpdateNeeded();
        }
      }
 else {
        topPoint.set(s,this.getHeightmapHeight(s,i - 1),i - 1);
        bottomPoint.set(s,this.getHeightmapHeight(s,i + 1),i + 1);
        averageNormalsTangents(topPoint,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
        VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
        VertexBuffer rightNB=right.getMesh().getBuffer(Type.Normal);
        BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),(s + 1) * (i + 1) - 1);
        BufferUtils.setInBuffer(normal,(FloatBuffer)rightNB.getData(),(s + 1) * (i));
      }
    }
    right.getMesh().getBuffer(Type.Normal).setUpdateNeeded();
  }
  if (left != null) {
    for (int i=0; i < s + 1; i++) {
      rootPoint.set(0,this.getHeightmapHeight(0,i),i);
      leftPoint.set(-1,left.getHeightmapHeight(s - 1,i),i);
      rightPoint.set(1,this.getHeightmapHeight(1,i),i);
      if (i == 0) {
        if (top == null) {
          bottomPoint.set(0,this.getHeightmapHeight(0,i + 1),i + 1);
          averageNormalsTangents(null,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
          VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
          VertexBuffer leftNB=left.getMesh().getBuffer(Type.Normal);
          BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),0);
          BufferUtils.setInBuffer(normal,(FloatBuffer)leftNB.getData(),s);
        }
 else {
          topPoint.set(0,top.getHeightmapHeight(0,s - 1),i - 1);
          bottomPoint.set(0,this.getHeightmapHeight(0,i + 1),i + 1);
          averageNormalsTangents(topPoint,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
          VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
          VertexBuffer leftNB=left.getMesh().getBuffer(Type.Normal);
          BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),0);
          BufferUtils.setInBuffer(normal,(FloatBuffer)leftNB.getData(),s);
          if (topLeft != null) {
            VertexBuffer topLeftNB=topLeft.getMesh().getBuffer(Type.Normal);
            BufferUtils.setInBuffer(normal,(FloatBuffer)topLeftNB.getData(),(s + 1) * (s + 1) - 1);
            topLeftNB.setUpdateNeeded();
          }
        }
      }
 else       if (i == s) {
        if (bottom == null) {
          topPoint.set(0,this.getHeightmapHeight(0,i - 1),i - 1);
          averageNormalsTangents(topPoint,rootPoint,leftPoint,null,rightPoint,null,null,null,null,null,normal,tangent,binormal);
          VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
          VertexBuffer leftNB=left.getMesh().getBuffer(Type.Normal);
          BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),(s + 1) * (s));
          BufferUtils.setInBuffer(normal,(FloatBuffer)leftNB.getData(),(s + 1) * (i + 1) - 1);
        }
 else {
          topPoint.set(0,this.getHeightmapHeight(0,i - 1),i - 1);
          bottomPoint.set(0,bottom.getHeightmapHeight(0,1),i + 1);
          averageNormalsTangents(topPoint,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
          VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
          VertexBuffer leftNB=left.getMesh().getBuffer(Type.Normal);
          VertexBuffer downNB=bottom.getMesh().getBuffer(Type.Normal);
          BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),(s + 1) * (s));
          BufferUtils.setInBuffer(normal,(FloatBuffer)leftNB.getData(),(s + 1) * (i + 1) - 1);
          BufferUtils.setInBuffer(normal,(FloatBuffer)downNB.getData(),0);
          if (bottomLeft != null) {
            VertexBuffer bottomLeftNB=bottomLeft.getMesh().getBuffer(Type.Normal);
            BufferUtils.setInBuffer(normal,(FloatBuffer)bottomLeftNB.getData(),s);
            bottomLeftNB.setUpdateNeeded();
          }
          downNB.setUpdateNeeded();
        }
      }
 else {
        topPoint.set(0,this.getHeightmapHeight(0,i - 1),i - 1);
        bottomPoint.set(0,this.getHeightmapHeight(0,i + 1),i + 1);
        averageNormalsTangents(topPoint,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
        VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
        VertexBuffer leftNB=left.getMesh().getBuffer(Type.Normal);
        BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),(s + 1) * (i));
        BufferUtils.setInBuffer(normal,(FloatBuffer)leftNB.getData(),(s + 1) * (i + 1) - 1);
      }
    }
    left.getMesh().getBuffer(Type.Normal).setUpdateNeeded();
  }
  if (top != null) {
    for (int i=0; i < s + 1; i++) {
      rootPoint.set(i,this.getHeightmapHeight(i,0),0);
      topPoint.set(i,top.getHeightmapHeight(i,s - 1),-1);
      bottomPoint.set(i,this.getHeightmapHeight(i,1),1);
      if (i == 0) {
      }
 else       if (i == s) {
      }
 else {
        leftPoint.set(i - 1,this.getHeightmapHeight(i - 1,0),0);
        rightPoint.set(i + 1,this.getHeightmapHeight(i + 1,0),0);
        averageNormalsTangents(topPoint,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
        VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
        BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),i);
        VertexBuffer topNB=top.getMesh().getBuffer(Type.Normal);
        BufferUtils.setInBuffer(normal,(FloatBuffer)topNB.getData(),(s + 1) * (s) + i);
      }
    }
    top.getMesh().getBuffer(Type.Normal).setUpdateNeeded();
  }
  if (bottom != null) {
    for (int i=0; i < s + 1; i++) {
      rootPoint.set(i,this.getHeightmapHeight(i,s),s);
      topPoint.set(i,this.getHeightmapHeight(i,s - 1),s - 1);
      bottomPoint.set(i,bottom.getHeightmapHeight(i,1),s + 1);
      if (i == 0) {
      }
 else       if (i == s) {
      }
 else {
        leftPoint.set(i - 1,this.getHeightmapHeight(i - 1,s),s);
        rightPoint.set(i + 1,this.getHeightmapHeight(i + 1,s),s);
        averageNormalsTangents(topPoint,rootPoint,leftPoint,bottomPoint,rightPoint,null,null,null,null,null,normal,tangent,binormal);
        VertexBuffer tpNB=this.getMesh().getBuffer(Type.Normal);
        BufferUtils.setInBuffer(normal,(FloatBuffer)tpNB.getData(),(s + 1) * (s) + i);
        VertexBuffer downNB=bottom.getMesh().getBuffer(Type.Normal);
        BufferUtils.setInBuffer(normal,(FloatBuffer)downNB.getData(),i);
      }
    }
    bottom.getMesh().getBuffer(Type.Normal).setUpdateNeeded();
  }
  this.getMesh().getBuffer(Type.Normal).setUpdateNeeded();
  this.getMesh().getBuffer(Type.Tangent).setUpdateNeeded();
  this.getMesh().getBuffer(Type.Binormal).setUpdateNeeded();
}
