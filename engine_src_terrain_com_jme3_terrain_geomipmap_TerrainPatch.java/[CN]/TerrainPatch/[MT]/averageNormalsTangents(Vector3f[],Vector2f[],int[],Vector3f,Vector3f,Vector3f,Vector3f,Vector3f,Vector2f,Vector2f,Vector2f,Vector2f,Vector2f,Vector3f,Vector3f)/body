{
  Vector3f scale=Vector3f.UNIT_XYZ;
  v[0]=topPoint;
  v[1]=rootPoint;
  v[2]=leftPoint;
  t[0]=topTex;
  t[1]=rootTex;
  t[2]=leftTex;
  Vector3f n1=Vector3f.ZERO;
  Vector3f t1=Vector3f.ZERO;
  if (topPoint != null && leftPoint != null) {
    TriangleData td1=TangentBinormalGenerator.processTriangle(indexes,v,t);
    n1=getNormal(topPoint.mult(scale),rootPoint.mult(scale),leftPoint.mult(scale));
    t1=td1.tangent;
  }
  v[0]=leftPoint;
  v[1]=rootPoint;
  v[2]=bottomPoint;
  t[0]=leftTex;
  t[1]=rootTex;
  t[2]=bottomTex;
  Vector3f n2=Vector3f.ZERO;
  Vector3f t2=Vector3f.ZERO;
  if (leftPoint != null && bottomPoint != null) {
    TriangleData td2=TangentBinormalGenerator.processTriangle(indexes,v,t);
    n2=getNormal(leftPoint.mult(scale),rootPoint.mult(scale),bottomPoint.mult(scale));
    t2=td2.tangent;
  }
  v[0]=bottomPoint;
  v[1]=rootPoint;
  v[2]=rightPoint;
  t[0]=bottomTex;
  t[1]=rootTex;
  t[2]=rightTex;
  Vector3f n3=Vector3f.ZERO;
  Vector3f t3=Vector3f.ZERO;
  if (rightPoint != null && bottomPoint != null) {
    TriangleData td3=TangentBinormalGenerator.processTriangle(indexes,v,t);
    n3=getNormal(bottomPoint.mult(scale),rootPoint.mult(scale),rightPoint.mult(scale));
    t3=td3.tangent;
  }
  v[0]=rightPoint;
  v[1]=rootPoint;
  v[2]=topPoint;
  t[0]=rightTex;
  t[1]=rootTex;
  t[2]=topTex;
  Vector3f n4=Vector3f.ZERO;
  Vector3f t4=Vector3f.ZERO;
  if (rightPoint != null && topPoint != null) {
    TriangleData td4=TangentBinormalGenerator.processTriangle(indexes,v,t);
    n4=getNormal(rightPoint.mult(scale),rootPoint.mult(scale),topPoint.mult(scale));
    t4=td4.tangent;
  }
  normal.set(n1.add(n2).add(n3).add(n4).normalizeLocal());
  tangent.set(t1.add(t2).add(t3).add(t4)).normalizeLocal();
}
