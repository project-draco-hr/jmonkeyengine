{
  Logger.getLogger("com.jme3").setLevel(Level.SEVERE);
  flyCam.setMoveSpeed(50);
  flyCam.setEnabled(false);
  viewPort.setBackgroundColor(ColorRGBA.DarkGray);
  cam.setLocation(new Vector3f(-53.952988f,27.15874f,-32.875023f));
  cam.setRotation(new Quaternion(0.1564309f,0.6910534f,-0.15713608f,0.6879555f));
  cam.setFrustumFar(500);
  mat=assetManager.loadMaterial("Textures/Terrain/Pond/Pond.j3m");
  Box b=new Box(Vector3f.ZERO,800,1,700);
  b.scaleTextureCoordinates(new Vector2f(50,50));
  Geometry ground=new Geometry("ground",b);
  ground.setMaterial(mat);
  rootNode.attachChild(ground);
  ground.setShadowMode(ShadowMode.Receive);
  Sphere sphMesh=new Sphere(32,32,1);
  sphMesh.setTextureMode(Sphere.TextureMode.Projected);
  sphMesh.updateGeometry(32,32,1,false,false);
  TangentBinormalGenerator.generate(sphMesh);
  sphere=new Geometry("Rock Ball",sphMesh);
  sphere.setLocalTranslation(0,5,0);
  sphere.setMaterial(mat);
  sphere.setShadowMode(ShadowMode.CastAndReceive);
  rootNode.attachChild(sphere);
  DirectionalLight dl=new DirectionalLight();
  dl.setDirection(new Vector3f(0,-1,0).normalizeLocal());
  dl.setColor(ColorRGBA.White);
  rootNode.addLight(dl);
  AmbientLight al=new AmbientLight();
  al.setColor(ColorRGBA.White.mult(0.7f));
  rootNode.addLight(al);
  createballs();
  final DirectionalLightShadowRenderer pssmRenderer=new DirectionalLightShadowRenderer(assetManager,1024,4);
  viewPort.addProcessor(pssmRenderer);
  pssmRenderer.setLight(dl);
  pssmRenderer.setLambda(0.55f);
  pssmRenderer.setShadowIntensity(0.55f);
  pssmRenderer.setShadowCompareMode(com.jme3.shadow.CompareMode.Software);
  pssmRenderer.setEdgeFilteringMode(EdgeFilteringMode.PCF4);
  inputManager.addListener(new ActionListener(){
    public void onAction(    String name,    boolean isPressed,    float tpf){
      if (name.equals("display") && isPressed) {
        System.out.println("tetetetet");
      }
      if (name.equals("add") && isPressed) {
        createballs();
      }
    }
  }
,"display","add");
  inputManager.addMapping("display",new KeyTrigger(KeyInput.KEY_SPACE));
  inputManager.addMapping("add",new KeyTrigger(KeyInput.KEY_RETURN));
}
