{
  Vector2f texuv=new Vector2f();
  ColorRGBA color=ColorRGBA.Black;
  float width=image.getWidth();
  float height=image.getHeight();
  int minx=(int)(uv.x * width - radius * width);
  int maxx=(int)(uv.x * width + radius * width);
  int miny=(int)(uv.y * height - radius * height);
  int maxy=(int)(uv.y * height + radius * height);
  float radiusSquared=radius * radius;
  float radiusFalloff=radius * fadeFalloff;
  for (int y=miny; y < maxy; y++) {
    for (int x=minx; x < maxx; x++) {
      texuv.set((float)x / width,(float)y / height);
      float dist=texuv.distanceSquared(uv);
      if (dist < radiusSquared) {
        manipulatePixel(image,x,y,color,false);
        float intensity=0.1f;
        if (dist > radiusFalloff) {
          float dr=radius - radiusFalloff;
          float d2=dist - radiusFalloff;
          d2=d2 / dr;
          intensity=1 - d2;
        }
        if (erase) {
switch (texIndex) {
case 0:
            color.r-=intensity;
          break;
case 1:
        color.g-=intensity;
      break;
case 2:
    color.b-=intensity;
  break;
case 3:
color.a-=intensity;
break;
}
}
 else {
switch (texIndex) {
case 0:
color.r+=intensity;
break;
case 1:
color.g+=intensity;
break;
case 2:
color.b+=intensity;
break;
case 3:
color.a+=intensity;
break;
}
}
color.clamp();
manipulatePixel(image,x,y,color,true);
}
}
}
image.getData(0).rewind();
}
