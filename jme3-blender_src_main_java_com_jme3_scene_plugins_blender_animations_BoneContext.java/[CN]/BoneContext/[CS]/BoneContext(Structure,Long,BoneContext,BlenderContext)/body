{
  this.parent=parent;
  this.blenderContext=blenderContext;
  this.boneStructure=boneStructure;
  this.armatureObjectOMA=armatureObjectOMA;
  boneName=boneStructure.getFieldValue("name").toString();
  flag=((Number)boneStructure.getFieldValue("flag")).intValue();
  length=((Number)boneStructure.getFieldValue("length")).floatValue();
  ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
  globalBoneMatrix=objectHelper.getMatrix(boneStructure,"arm_mat",blenderContext.getBlenderKey().isFixUpAxis());
  if (blenderContext.getBlenderKey().isFixUpAxis()) {
    globalBoneMatrix.multLocal(BONE_ARMATURE_TRANSFORMATION_MATRIX);
  }
  Spatial armature=(Spatial)objectHelper.toObject(blenderContext.getFileBlock(armatureObjectOMA).getStructure(blenderContext),blenderContext);
  ConstraintHelper constraintHelper=blenderContext.getHelper(ConstraintHelper.class);
  Matrix4f armatureWorldMatrix=constraintHelper.toMatrix(armature.getWorldTransform(),new Matrix4f());
  globalBoneMatrix=armatureWorldMatrix.mult(globalBoneMatrix);
  List<Structure> childbase=((Structure)boneStructure.getFieldValue("childbase")).evaluateListBase();
  for (  Structure child : childbase) {
    children.add(new BoneContext(child,armatureObjectOMA,this,blenderContext));
  }
  blenderContext.setBoneContext(boneStructure.getOldMemoryAddress(),this);
}
