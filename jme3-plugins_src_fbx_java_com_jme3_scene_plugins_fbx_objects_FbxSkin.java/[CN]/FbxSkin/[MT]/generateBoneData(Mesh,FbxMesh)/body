{
  FloatBuffer boneWeightData=BufferUtils.createFloatBuffer(fbxMesh.vCount * 4);
  ByteBuffer boneIndicesData=BufferUtils.createByteBuffer(fbxMesh.vCount * 4);
  mesh.setBuffer(VertexBuffer.Type.BoneWeight,4,boneWeightData);
  mesh.setBuffer(VertexBuffer.Type.BoneIndex,4,boneIndicesData);
  mesh.getBuffer(VertexBuffer.Type.BoneWeight).setUsage(Usage.CpuOnly);
  mesh.getBuffer(VertexBuffer.Type.BoneIndex).setUsage(Usage.CpuOnly);
  VertexBuffer weightsHW=new VertexBuffer(Type.HWBoneWeight);
  VertexBuffer indicesHW=new VertexBuffer(Type.HWBoneIndex);
  indicesHW.setUsage(Usage.CpuOnly);
  weightsHW.setUsage(Usage.CpuOnly);
  mesh.setBuffer(weightsHW);
  mesh.setBuffer(indicesHW);
  int bonesLimitExceeded=0;
  for (  FbxNode limb : bones) {
    FbxCluster cluster=limb.skinToCluster.get(id);
    if (cluster == null || cluster.indexes == null || cluster.weights == null || cluster.indexes.length != cluster.weights.length)     continue;
    if (limb.boneIndex > 255)     throw new AssetLoadException("Bone index can't be packed into byte");
    for (int i=0; i < cluster.indexes.length; ++i) {
      int vertexIndex=cluster.indexes[i];
      if (vertexIndex >= fbxMesh.reverseVertexMap.size())       throw new AssetLoadException("Invalid skinning vertex index. Unexpected index lookup " + vertexIndex + " from "+ fbxMesh.reverseVertexMap.size());
      List<Integer> dstVertices=fbxMesh.reverseVertexMap.get(vertexIndex);
      for (int j=0; j < dstVertices.size(); ++j) {
        int v=dstVertices.get(j);
        int offset;
        int smalestOffset=0;
        float w=0;
        float smalestW=Float.MAX_VALUE;
        for (offset=v * 4; offset < v * 4 + 4; ++offset) {
          w=boneWeightData.get(offset);
          if (w == 0)           break;
          if (w < smalestW) {
            smalestW=w;
            smalestOffset=offset;
          }
        }
        if (w == 0) {
          boneWeightData.put(offset,(float)cluster.weights[i]);
          boneIndicesData.put(offset,(byte)limb.boneIndex);
        }
 else {
          if ((float)cluster.weights[i] > smalestW) {
            boneWeightData.put(smalestOffset,(float)cluster.weights[i]);
            boneIndicesData.put(smalestOffset,(byte)limb.boneIndex);
          }
          bonesLimitExceeded++;
        }
      }
    }
  }
  if (bonesLimitExceeded > 0)   scene.warning("Skinning support max 4 bone per vertex. Exceeding data of " + bonesLimitExceeded + " weights in mesh bones will be discarded");
  int maxWeightsPerVert=0;
  boneWeightData.rewind();
  for (int v=0; v < fbxMesh.vCount; v++) {
    float w0=boneWeightData.get();
    float w1=boneWeightData.get();
    float w2=boneWeightData.get();
    float w3=boneWeightData.get();
    if (w3 != 0) {
      maxWeightsPerVert=Math.max(maxWeightsPerVert,4);
    }
 else     if (w2 != 0) {
      maxWeightsPerVert=Math.max(maxWeightsPerVert,3);
    }
 else     if (w1 != 0) {
      maxWeightsPerVert=Math.max(maxWeightsPerVert,2);
    }
 else     if (w0 != 0) {
      maxWeightsPerVert=Math.max(maxWeightsPerVert,1);
    }
    float sum=w0 + w1 + w2+ w3;
    if (sum != 1f) {
      float mult=(sum != 0) ? (1f / sum) : 0;
      boneWeightData.position(v * 4);
      boneWeightData.put(w0 * mult);
      boneWeightData.put(w1 * mult);
      boneWeightData.put(w2 * mult);
      boneWeightData.put(w3 * mult);
    }
  }
  return maxWeightsPerVert;
}
