{
  int count=0;
  int max=off + len;
  int i=off;
  while (i < max) {
    int c=b[i++] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    break;
case 12:
case 13:
  if ((int)(b[i++] & 0xc0) != 0x80) {
    throw new IllegalArgumentException();
  }
count++;
break;
case 14:
if (((int)(b[i++] & 0xc0) != 0x80) || ((int)(b[i++] & 0xc0) != 0x80)) {
throw new IllegalArgumentException();
}
count++;
break;
default :
throw new IllegalArgumentException();
}
}
if (i != max) {
throw new IllegalArgumentException();
}
char[] cs=new char[count];
i=0;
while (off < max) {
int c=b[off++] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
cs[i++]=(char)c;
break;
case 12:
case 13:
cs[i++]=(char)(((c & 0x1f) << 6) | (b[off++] & 0x3f));
break;
case 14:
int t=(b[off++] & 0x3f) << 6;
cs[i++]=(char)(((c & 0x0f) << 12) | t | (b[off++] & 0x3f));
break;
default :
throw new IllegalArgumentException();
}
}
return new String(cs,0,count);
}
