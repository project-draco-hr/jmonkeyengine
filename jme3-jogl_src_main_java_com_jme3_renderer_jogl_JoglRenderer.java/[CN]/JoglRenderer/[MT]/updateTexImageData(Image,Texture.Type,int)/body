{
  int texId=img.getId();
  GL gl=GLContext.getCurrentGL();
  if (texId == -1) {
    gl.glGenTextures(1,intBuf1);
    texId=intBuf1.get(0);
    img.setId(texId);
    objManager.registerObject(img);
    statistics.onNewTexture();
  }
  int target=convertTextureType(type,img.getMultiSamples(),-1);
  if (context.boundTextureUnit != unit) {
    gl.glActiveTexture(GL.GL_TEXTURE0 + unit);
    context.boundTextureUnit=unit;
  }
  if (context.boundTextures[unit] != img) {
    gl.glBindTexture(target,texId);
    context.boundTextures[unit]=img;
    statistics.onTextureUse(img,true);
  }
  if (!img.hasMipmaps() && img.isGeneratedMipmapsRequired()) {
    if (!gl.isExtensionAvailable("GL_VERSION_3_0")) {
      if (gl.isGL2ES1()) {
        gl.glTexParameteri(target,GL2ES1.GL_GENERATE_MIPMAP,GL.GL_TRUE);
      }
      img.setMipmapsGenerated(true);
    }
  }
 else {
    if (img.getMipMapSizes() != null) {
      if (gl.isGL2GL3()) {
        gl.glTexParameteri(target,GL2GL3.GL_TEXTURE_MAX_LEVEL,img.getMipMapSizes().length - 1);
      }
    }
  }
  int imageSamples=img.getMultiSamples();
  if (imageSamples > 1) {
    if (img.getFormat().isDepthFormat()) {
      img.setMultiSamples(Math.min(maxDepthTexSamples,imageSamples));
    }
 else {
      img.setMultiSamples(Math.min(maxColorTexSamples,imageSamples));
    }
  }
  if (!gl.isExtensionAvailable("GL_ARB_texture_non_power_of_two")) {
    if (img.getWidth() != 0 && img.getHeight() != 0) {
      if (!FastMath.isPowerOfTwo(img.getWidth()) || !FastMath.isPowerOfTwo(img.getHeight())) {
        if (img.getData(0) == null) {
          throw new RendererException("non-power-of-2 framebuffer textures are not supported by the video hardware");
        }
 else {
          MipMapGenerator.resizeToPowerOf2(img);
        }
      }
    }
  }
  if (!gl.isExtensionAvailable("GL_ARB_texture_multisample")) {
    if (img.getMultiSamples() > 1) {
      throw new RendererException("Multisample textures not supported by graphics hardware");
    }
  }
  if (target == GL.GL_TEXTURE_CUBE_MAP) {
    if (img.getWidth() > maxCubeTexSize || img.getHeight() > maxCubeTexSize) {
      throw new RendererException("Cannot upload cubemap " + img + ". The maximum supported cubemap resolution is "+ maxCubeTexSize);
    }
  }
 else {
    if (img.getWidth() > maxTexSize || img.getHeight() > maxTexSize) {
      throw new RendererException("Cannot upload texture " + img + ". The maximum supported texture resolution is "+ maxTexSize);
    }
  }
  if (target == GL.GL_TEXTURE_CUBE_MAP) {
    List<ByteBuffer> data=img.getData();
    if (data.size() != 6) {
      logger.log(Level.WARNING,"Invalid texture: {0}\n" + "Cubemap textures must contain 6 data units.",img);
      return;
    }
    for (int i=0; i < 6; i++) {
      TextureUtil.uploadTexture(img,GL.GL_TEXTURE_CUBE_MAP_POSITIVE_X + i,i,0,linearizeSrgbImages);
    }
  }
 else   if (target == GL.GL_TEXTURE_2D_ARRAY) {
    List<ByteBuffer> data=img.getData();
    TextureUtil.uploadTexture(img,target,-1,0,linearizeSrgbImages);
    for (int i=0; i < data.size(); i++) {
      TextureUtil.uploadTexture(img,target,i,0,linearizeSrgbImages);
    }
  }
 else {
    TextureUtil.uploadTexture(img,target,0,0,linearizeSrgbImages);
  }
  if (img.getMultiSamples() != imageSamples) {
    img.setMultiSamples(imageSamples);
  }
  if (gl.isExtensionAvailable("GL_VERSION_3_0")) {
    if (!img.hasMipmaps() && img.isGeneratedMipmapsRequired() && img.getData() != null) {
      gl.glEnable(target);
      gl.glGenerateMipmap(target);
      gl.glDisable(target);
      img.setMipmapsGenerated(true);
    }
  }
  img.clearUpdateNeeded();
}
