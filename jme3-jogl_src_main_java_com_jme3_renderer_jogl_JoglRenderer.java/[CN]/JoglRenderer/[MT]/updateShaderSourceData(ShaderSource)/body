{
  int id=source.getId();
  GL gl=GLContext.getCurrentGL();
  if (id == -1) {
    id=gl.getGL2ES2().glCreateShader(convertShaderType(source.getType()));
    if (id <= 0) {
      throw new RendererException("Invalid ID received when trying to create shader.");
    }
    source.setId(id);
  }
 else {
    throw new RendererException("Cannot recompile shader source");
  }
  String language=source.getLanguage();
  stringBuf.setLength(0);
  if (language.startsWith("GLSL")) {
    int version=Integer.parseInt(language.substring(4));
    if (version > 100) {
      stringBuf.append("#version ");
      stringBuf.append(language.substring(4));
      if (version >= 150) {
        stringBuf.append(" core");
      }
      stringBuf.append("\n");
    }
  }
  updateNameBuffer();
  byte[] definesCodeData=source.getDefines().getBytes();
  byte[] sourceCodeData=source.getSource().getBytes();
  ByteBuffer codeBuf=BufferUtils.createByteBuffer(nameBuf.limit() + definesCodeData.length + sourceCodeData.length);
  codeBuf.put(nameBuf);
  codeBuf.put(definesCodeData);
  codeBuf.put(sourceCodeData);
  codeBuf.flip();
  byte[] array=new byte[codeBuf.limit()];
  codeBuf.rewind();
  codeBuf.get(array);
  codeBuf.rewind();
  gl.getGL2ES2().glShaderSource(id,1,new String[]{new String(array)},new int[]{array.length},0);
  gl.getGL2ES2().glCompileShader(id);
  gl.getGL2ES2().glGetShaderiv(id,GL2ES2.GL_COMPILE_STATUS,intBuf1);
  boolean compiledOK=intBuf1.get(0) == GL.GL_TRUE;
  String infoLog=null;
  if (VALIDATE_SHADER || !compiledOK) {
    gl.getGL2ES2().glGetShaderiv(id,GL2ES2.GL_INFO_LOG_LENGTH,intBuf1);
    int length=intBuf1.get(0);
    if (length > 3) {
      ByteBuffer logBuf=BufferUtils.createByteBuffer(length);
      gl.getGL2ES2().glGetShaderInfoLog(id,length,null,logBuf);
      byte[] logBytes=new byte[length];
      logBuf.get(logBytes,0,length);
      infoLog=new String(logBytes);
    }
  }
  if (compiledOK) {
    if (infoLog != null) {
      logger.log(Level.FINE,"{0} compile success\n{1}",new Object[]{source.getName(),infoLog});
    }
 else {
      logger.log(Level.FINE,"{0} compile success",source.getName());
    }
    source.clearUpdateNeeded();
  }
 else {
    logger.log(Level.WARNING,"Bad compile of:\n{0}",new Object[]{ShaderDebug.formatShaderSource(source.getDefines(),source.getSource(),stringBuf.toString())});
    if (infoLog != null) {
      throw new RendererException("compile error in: " + source + "\n"+ infoLog);
    }
 else {
      throw new RendererException("compile error in: " + source + "\nerror: <not provided>");
    }
  }
}
