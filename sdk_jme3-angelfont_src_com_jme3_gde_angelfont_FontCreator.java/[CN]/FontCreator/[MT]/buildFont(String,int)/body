{
  BufferedImage fontImage;
  Font font;
  int bitmapSize=512;
  boolean sizeFound=false;
  boolean directionSet=false;
  int delta=0;
  int fontSize=24;
  String charLocs="";
  while (!sizeFound) {
    font=new Font(fontName,Font.PLAIN,fontSize);
    fontImage=new BufferedImage(bitmapSize,bitmapSize,BufferedImage.TYPE_4BYTE_ABGR);
    Graphics2D g=(Graphics2D)fontImage.getGraphics();
    g.setFont(font);
    FontMetrics fm=g.getFontMetrics();
    int width=fm.stringWidth("W");
    int height=fm.getHeight();
    int lineWidth=(width > height) ? width * 16 : height * 16;
    if (!directionSet) {
      if (lineWidth > bitmapSize) {
        delta=-2;
      }
 else {
        delta=2;
      }
      directionSet=true;
    }
    if (delta > 0) {
      if (lineWidth < bitmapSize) {
        fontSize+=delta;
      }
 else {
        sizeFound=true;
        fontSize-=delta;
      }
    }
 else     if (delta < 0) {
      if (lineWidth > bitmapSize) {
        fontSize+=delta;
      }
 else {
        sizeFound=true;
        fontSize-=delta;
      }
    }
  }
  font=new Font(fontName,Font.BOLD,fontSize);
  fontImage=new BufferedImage(bitmapSize,bitmapSize,BufferedImage.TYPE_4BYTE_ABGR);
  Graphics2D g=(Graphics2D)fontImage.getGraphics();
  g.setFont(font);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g.setColor(OPAQUE_WHITE);
  g.setBackground(TRANSPARENT_BLACK);
  FontMetrics fm=g.getFontMetrics();
  for (int i=0; i < 256; i++) {
    int x=i % 16;
    int y=i / 16;
    char ch[]={(char)i};
    String temp=new String(ch);
    Rectangle2D bounds=fm.getStringBounds(temp,g);
    int xPos=(int)((x * 32) + (16 - (bounds.getWidth() / 2)));
    int yPos=(y * 32) + fm.getAscent() - offset;
    g.drawString(temp,xPos,yPos);
  }
  return fontImage;
}
