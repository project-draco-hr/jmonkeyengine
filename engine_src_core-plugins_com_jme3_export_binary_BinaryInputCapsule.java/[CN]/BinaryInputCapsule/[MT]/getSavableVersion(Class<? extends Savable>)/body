{
  Class thisClass=savable.getClass();
  int count=0;
  while (thisClass != null && thisClass != desiredClass) {
    thisClass=thisClass.getSuperclass();
    count++;
  }
  if (thisClass == null) {
    throw new IllegalArgumentException(savable.getClass().getName() + " does not extend " + desiredClass.getName()+ "!");
  }
 else   if (count > cObj.classHierarchyVersions.length) {
    throw new IllegalArgumentException(savable.getClass().getName() + " cannot access version of " + desiredClass.getName()+ " because it doesn't implement Savable");
  }
  return cObj.classHierarchyVersions[count];
}
