{
  super.write(e);
  OutputCapsule oc=e.getCapsule(this);
  oc.write(fps,"fps",DEFAULT_FPS);
  oc.write(featuresToLoad,"features-to-load",FeaturesToLoad.ALL);
  oc.write(loadUnlinkedAssets,"load-unlinked-assets",false);
  oc.write(assetRootPath,"asset-root-path",null);
  oc.write(fixUpAxis,"fix-up-axis",true);
  oc.write(generatedTexturePPU,"generated-texture-ppu",128);
  oc.write(usedWorld,"used-world",null);
  oc.write(defaultMaterial,"default-material",null);
  oc.write(faceCullMode,"face-cull-mode",FaceCullMode.Off);
  oc.write(layersToLoad,"layers-to-load",-1);
  oc.write(mipmapGenerationMethod,"mipmap-generation-method",MipmapGenerationMethod.GENERATE_WHEN_NEEDED);
  oc.write(skyGeneratedTextureSize,"sky-generated-texture-size",1000);
  oc.write(skyGeneratedTextureRadius,"sky-generated-texture-radius",1f);
  oc.write(skyGeneratedTextureShape,"sky-generated-texture-shape",SkyGeneratedTextureShape.SPHERE);
  oc.write(optimiseTextures,"optimise-textures",false);
  if (nodeAnimationMap == null) {
    oc.write(0,"node-anims-map-size",0);
  }
 else {
    oc.write(nodeAnimationMap.size(),"node-anims-map-size",0);
    int counter=0;
    for (    Entry<String,List<String>> entry : nodeAnimationMap.entrySet()) {
      oc.write(entry.getKey(),"node-anim-" + counter,null);
      oc.write(entry.getValue().toArray(new String[entry.getValue().size()]),"node-anims-" + counter,null);
      ++counter;
    }
  }
  if (skeletonAnimationMap == null) {
    oc.write(0,"skeleton-anims-map-size",0);
  }
 else {
    oc.write(skeletonAnimationMap.size(),"skeleton-anims-map-size",0);
    int counter=0;
    for (    Entry<String,List<String>> entry : skeletonAnimationMap.entrySet()) {
      oc.write(entry.getKey(),"skeleton-anim-" + counter,null);
      oc.write(entry.getValue().toArray(new String[entry.getValue().size()]),"skeleton-anims-" + counter,null);
      ++counter;
    }
  }
}
