{
  IntBuffer buffer2=store;
  int numIndexes=calculateNumIndexesLodDiff(lod);
  if (store == null) {
    buffer2=BufferUtils.createIntBuffer(numIndexes);
  }
  VerboseIntBuffer buffer=new VerboseIntBuffer(buffer2);
  for (int r=lod; r < getWidth() - (2 * lod); r+=lod) {
    int rowIdx=r * getWidth();
    int nextRowIdx=(r + 1 * lod) * getWidth();
    for (int c=lod; c < getWidth() - (1 * lod); c+=lod) {
      int idx=rowIdx + c;
      buffer.put(idx);
      idx=nextRowIdx + c;
      buffer.put(idx);
    }
    if (r < getWidth() - (3 * lod)) {
      int idx=nextRowIdx + getWidth() - (1 * lod) - 1;
      buffer.put(idx);
      idx=nextRowIdx + (1 * lod);
      buffer.put(idx);
    }
  }
  int br=getWidth() * (getWidth() - lod) - 1 - lod;
  buffer.put(br);
  int corner=getWidth() * getWidth() - 1;
  buffer.put(corner);
  if (rightLod > lod) {
    int idx=corner;
    int it=(getWidth() - 1) / rightLod;
    int lodDiff=rightLod / lod;
    for (int i=it; i > 0; i--) {
      idx=getWidth() * (i * rightLod + 1) - 1;
      for (int j=1; j <= lodDiff; j++) {
        int idxB=idx - (getWidth() * (j * lod)) - lod;
        if (j == lodDiff && i == 1) {
          buffer.put(getWidth() - 1);
        }
 else         if (j == lodDiff) {
          buffer.put(idxB);
          buffer.put(idxB + lod);
        }
 else {
          buffer.put(idxB);
          buffer.put(idx);
        }
      }
    }
    buffer.put(getWidth() * (lod + 1) - lod - 1);
    buffer.put(getWidth() - 1);
  }
 else {
    buffer.put(corner);
    for (int row=getWidth() - lod; row > lod; row-=lod) {
      int idx=row * getWidth() - 1;
      buffer.put(idx);
      buffer.put(idx - lod);
    }
    buffer.put(getWidth() - 1);
  }
  if (topLod > lod) {
    if (rightLod > lod) {
      buffer.put(getWidth() - 1);
      buffer.put(getWidth() * lod - 1);
      buffer.put(getWidth() - 1);
    }
    int idx=getWidth() - 1;
    int it=(getWidth() - 1) / topLod;
    int lodDiff=topLod / lod;
    for (int i=it; i > 0; i--) {
      idx=(i * topLod);
      for (int j=1; j <= lodDiff; j++) {
        int idxB=lod * getWidth() + (i * topLod) - (j * lod);
        if (j == lodDiff && i == 1) {
          buffer.put(0);
        }
 else         if (j == lodDiff) {
          buffer.put(idxB);
          buffer.put(idx - topLod);
        }
 else {
          buffer.put(idxB);
          buffer.put(idx);
        }
      }
    }
  }
 else {
    if (rightLod > lod) {
      buffer.put(getWidth() - 1);
    }
    for (int col=getWidth() - 1 - lod; col > 0; col-=lod) {
      int idx=col + (lod * getWidth());
      buffer.put(idx);
      idx=col;
      buffer.put(idx);
    }
    buffer.put(0);
  }
  buffer.put(0);
  if (leftLod > lod) {
    int idx=0;
    int it=(getWidth() - 1) / leftLod;
    int lodDiff=leftLod / lod;
    for (int i=0; i < it; i++) {
      idx=getWidth() * (i * leftLod);
      for (int j=1; j <= lodDiff; j++) {
        int idxB=idx + (getWidth() * (j * lod)) + lod;
        if (j == lodDiff && i == it - 1) {
          buffer.put(getWidth() * getWidth() - getWidth());
        }
 else         if (j == lodDiff) {
          buffer.put(idxB);
          buffer.put(idxB - lod);
        }
 else {
          buffer.put(idxB);
          buffer.put(idx);
        }
      }
    }
  }
 else {
    buffer.put(0);
    buffer.put(getWidth() * lod + lod);
    buffer.put(0);
    for (int row=lod; row < getWidth() - lod; row+=lod) {
      int idx=row * getWidth();
      buffer.put(idx);
      idx=row * getWidth() + lod;
      buffer.put(idx);
    }
    buffer.put(getWidth() * (getWidth() - 1));
  }
  if (bottomLod > lod) {
    if (leftLod > lod) {
      buffer.put(getWidth() * (getWidth() - 1));
      buffer.put(getWidth() * (getWidth() - lod));
      buffer.put(getWidth() * (getWidth() - 1));
    }
    int idx=getWidth() * getWidth() - getWidth();
    int it=(getWidth() - 1) / bottomLod;
    int lodDiff=bottomLod / lod;
    for (int i=0; i < it; i++) {
      idx=getWidth() * getWidth() - getWidth() + (i * bottomLod);
      for (int j=1; j <= lodDiff; j++) {
        int idxB=idx - (getWidth() * lod) + j * lod;
        if (j == lodDiff && i == it - 1) {
          buffer.put(getWidth() * getWidth() - 1);
        }
 else         if (j == lodDiff) {
          buffer.put(idxB);
          buffer.put(idx + bottomLod);
        }
 else {
          buffer.put(idxB);
          buffer.put(idx);
        }
      }
    }
  }
 else {
    if (leftLod > lod) {
      buffer.put(getWidth() * (getWidth() - 1));
      buffer.put(getWidth() * getWidth() - (getWidth() * lod) + lod);
      buffer.put(getWidth() * (getWidth() - 1));
    }
    for (int col=lod; col < getWidth() - lod; col+=lod) {
      int idx=getWidth() * (getWidth() - 1 - lod) + col;
      buffer.put(idx);
      idx=getWidth() * (getWidth() - 1) + col;
      buffer.put(idx);
    }
  }
  buffer.put(getWidth() * getWidth() - 1);
  for (int i=buffer.getCount(); i < numIndexes; i++) {
    buffer.put(getWidth() * getWidth() - 1);
  }
  return buffer.delegate;
}
