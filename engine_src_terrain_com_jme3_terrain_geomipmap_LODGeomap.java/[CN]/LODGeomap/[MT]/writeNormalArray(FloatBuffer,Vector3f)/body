{
  if (!isLoaded()) {
    throw new NullPointerException();
  }
  if (store != null) {
    if (store.remaining() < getWidth() * getHeight() * 3) {
      throw new BufferUnderflowException();
    }
  }
 else {
    store=BufferUtils.createFloatBuffer(getWidth() * getHeight() * 3);
  }
  store.rewind();
  TempVars vars=TempVars.get();
  Vector3f rootPoint=vars.vect1;
  Vector3f rightPoint=vars.vect2;
  Vector3f leftPoint=vars.vect3;
  Vector3f topPoint=vars.vect4;
  Vector3f bottomPoint=vars.vect5;
  Vector3f tmp1=vars.vect6;
  Vector3f tmp2=vars.vect7;
  for (int r=0; r < getHeight(); r++) {
    for (int c=0; c < getWidth(); c++) {
      rootPoint.set(c,getValue(c,r),r);
      Vector3f normal=vars.vect8;
      if (r == 0) {
        if (c == 0) {
          rightPoint.set(c + 1,getValue(c + 1,r),r);
          bottomPoint.set(c,getValue(c,r + 1),r + 1);
          getNormal(bottomPoint,rootPoint,rightPoint,scale,normal);
          normal.set(Vector3f.UNIT_Y);
        }
 else         if (c == getWidth() - 1) {
          leftPoint.set(c - 1,getValue(c - 1,r),r);
          bottomPoint.set(c,getValue(c,r + 1),r + 1);
          getNormal(leftPoint,rootPoint,bottomPoint,scale,normal);
          normal.set(Vector3f.UNIT_Y);
        }
 else {
          leftPoint.set(c - 1,getValue(c - 1,r),r);
          rightPoint.set(c + 1,getValue(c + 1,r),r);
          bottomPoint.set(c,getValue(c,r + 1),r + 1);
          normal.set(getNormal(leftPoint,rootPoint,bottomPoint,scale,tmp1));
          normal.add(getNormal(bottomPoint,rootPoint,rightPoint,scale,tmp1));
          normal.normalizeLocal();
          normal.set(Vector3f.UNIT_Y);
        }
      }
 else       if (r == getHeight() - 1) {
        if (c == 0) {
          topPoint.set(c,getValue(c,r - 1),r - 1);
          rightPoint.set(c + 1,getValue(c + 1,r),r);
          getNormal(rightPoint,rootPoint,topPoint,scale,normal);
          normal.set(Vector3f.UNIT_Y);
        }
 else         if (c == getWidth() - 1) {
          topPoint.set(c,getValue(c,r - 1),r - 1);
          leftPoint.set(c - 1,getValue(c - 1,r),r);
          getNormal(topPoint,rootPoint,leftPoint,scale,normal);
          normal.set(Vector3f.UNIT_Y);
        }
 else {
          topPoint.set(c,getValue(c,r - 1),r - 1);
          leftPoint.set(c - 1,getValue(c - 1,r),r);
          rightPoint.set(c + 1,getValue(c + 1,r),r);
          normal.set(getNormal(topPoint,rootPoint,leftPoint,scale,tmp1));
          normal.add(getNormal(rightPoint,rootPoint,topPoint,scale,tmp1));
          normal.normalizeLocal();
          normal.set(Vector3f.UNIT_Y);
        }
      }
 else {
        if (c == 0) {
          topPoint.set(c,getValue(c,r - 1),r - 1);
          rightPoint.set(c + 1,getValue(c + 1,r),r);
          bottomPoint.set(c,getValue(c,r + 1),r + 1);
          normal.set(getNormal(rightPoint,rootPoint,topPoint,scale,tmp1));
          normal.add(getNormal(bottomPoint,rootPoint,rightPoint,scale,tmp1));
          normal.normalizeLocal();
          normal.set(Vector3f.UNIT_Y);
        }
 else         if (c == getWidth() - 1) {
          topPoint.set(c,getValue(c,r - 1),r - 1);
          leftPoint.set(c - 1,getValue(c - 1,r),r);
          bottomPoint.set(c,getValue(c,r + 1),r + 1);
          normal.set(getNormal(topPoint,rootPoint,leftPoint,scale,tmp1));
          normal.add(getNormal(leftPoint,rootPoint,bottomPoint,scale,tmp1));
          normal.normalizeLocal();
          normal.set(Vector3f.UNIT_Y);
        }
 else {
          topPoint.set(c,getValue(c,r - 1),r - 1);
          leftPoint.set(c - 1,getValue(c - 1,r),r);
          rightPoint.set(c + 1,getValue(c + 1,r),r);
          bottomPoint.set(c,getValue(c,r + 1),r + 1);
          normal.set(getNormal(topPoint,rootPoint,leftPoint,scale,tmp1));
          normal.add(getNormal(leftPoint,rootPoint,bottomPoint,scale,tmp1));
          normal.add(getNormal(bottomPoint,rootPoint,rightPoint,scale,tmp1));
          normal.add(getNormal(rightPoint,rootPoint,topPoint,scale,tmp1));
          normal.normalizeLocal();
          normal.set(Vector3f.UNIT_Y);
        }
      }
      normal.set(Vector3f.UNIT_Y);
      BufferUtils.setInBuffer(normal,store,(r * getWidth() + c));
    }
  }
  vars.release();
  return store;
}
