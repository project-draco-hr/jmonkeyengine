{
  if (!isLoaded()) {
    throw new NullPointerException();
  }
  if (tangentStore != null) {
    if (tangentStore.remaining() < getWidth() * getHeight() * 3) {
      throw new BufferUnderflowException();
    }
  }
 else {
    tangentStore=BufferUtils.createFloatBuffer(getWidth() * getHeight() * 3);
  }
  tangentStore.rewind();
  if (binormalStore != null) {
    if (binormalStore.remaining() < getWidth() * getHeight() * 3) {
      throw new BufferUnderflowException();
    }
  }
 else {
    binormalStore=BufferUtils.createFloatBuffer(getWidth() * getHeight() * 3);
  }
  binormalStore.rewind();
  Vector3f tangent=new Vector3f();
  Vector3f binormal=new Vector3f();
  Vector3f v1=new Vector3f();
  Vector3f v2=new Vector3f();
  Vector3f v3=new Vector3f();
  Vector2f t1=new Vector2f();
  Vector2f t2=new Vector2f();
  Vector2f t3=new Vector2f();
  scale=Vector3f.UNIT_XYZ;
  for (int r=0; r < getHeight(); r++) {
    for (int c=0; c < getWidth(); c++) {
      int texIdx=((getHeight() - 1 - r) * getWidth() + c) * 2;
      int texIdxPrev=((getHeight() - 1 - (r - 1)) * getWidth() + c) * 2;
      int texIdxNext=((getHeight() - 1 - (r + 1)) * getWidth() + c) * 2;
      v1.set(c,getValue(c,r),r);
      t1.set(textureBuffer.get(texIdx),textureBuffer.get(texIdx + 1));
      if (r == 0) {
        v3.set(c,getValue(c,r),r);
        t3.set(textureBuffer.get(texIdxNext),textureBuffer.get(texIdxNext + 1));
      }
 else {
        v3.set(c,getValue(c,r - 1),r - 1);
        t3.set(textureBuffer.get(texIdxPrev),textureBuffer.get(texIdxPrev + 1));
      }
      if (c == getWidth() - 1) {
        v2.set(c + 1,getValue(c,r),r);
        t2.set(textureBuffer.get(texIdx),textureBuffer.get(texIdx + 1));
      }
 else {
        v2.set(c + 1,getValue(c + 1,r),r);
        t2.set(textureBuffer.get(texIdx + 2),textureBuffer.get(texIdx + 3));
      }
      calculateTangent(new Vector3f[]{v1.mult(scale),v2.mult(scale),v3.mult(scale)},new Vector2f[]{t1,t2,t3},tangent,binormal);
      BufferUtils.setInBuffer(tangent,tangentStore,(r * getWidth() + c));
      BufferUtils.setInBuffer(binormal,binormalStore,(r * getWidth() + c));
    }
  }
  return new FloatBuffer[]{tangentStore,binormalStore};
}
