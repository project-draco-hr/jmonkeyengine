{
  IntVec scratchIndices=new IntVec();
  FaceInfoVec forwardFaces=new FaceInfoVec();
  FaceInfoVec backwardFaces=new FaceInfoVec();
  forwardFaces.add(m_startInfo.m_startFace);
  markTriangle(m_startInfo.m_startFace);
  int v0=(m_startInfo.m_toV1 ? m_startInfo.m_startEdge.m_v0 : m_startInfo.m_startEdge.m_v1);
  int v1=(m_startInfo.m_toV1 ? m_startInfo.m_startEdge.m_v1 : m_startInfo.m_startEdge.m_v0);
  scratchIndices.add(v0);
  scratchIndices.add(v1);
  int v2=Stripifier.getNextIndex(scratchIndices,m_startInfo.m_startFace);
  scratchIndices.add(v2);
  int nv0=v1;
  int nv1=v2;
  FaceInfo nextFace=Stripifier.findOtherFace(edgeInfos,nv0,nv1,m_startInfo.m_startFace);
  while (nextFace != null && !isMarked(nextFace)) {
    int testnv0=nv1;
    int testnv1=Stripifier.getNextIndex(scratchIndices,nextFace);
    FaceInfo nextNextFace=Stripifier.findOtherFace(edgeInfos,testnv0,testnv1,nextFace);
    if ((nextNextFace == null) || (isMarked(nextNextFace))) {
      FaceInfo testNextFace=Stripifier.findOtherFace(edgeInfos,nv0,testnv1,nextFace);
      if (((testNextFace != null) && !isMarked(testNextFace))) {
        FaceInfo tempFace=new FaceInfo(nv0,nv1,nv0);
        forwardFaces.add(tempFace);
        markTriangle(tempFace);
        scratchIndices.add(nv0);
        testnv0=nv0;
        ++m_numDegenerates;
      }
    }
    forwardFaces.add(nextFace);
    markTriangle(nextFace);
    scratchIndices.add(testnv1);
    nv0=testnv0;
    nv1=testnv1;
    nextFace=Stripifier.findOtherFace(edgeInfos,nv0,nv1,nextFace);
  }
  FaceInfoVec tempAllFaces=new FaceInfoVec();
  for (int i=0; i < forwardFaces.size(); i++)   tempAllFaces.add(forwardFaces.at(i));
  scratchIndices.clear();
  scratchIndices.add(v2);
  scratchIndices.add(v1);
  scratchIndices.add(v0);
  nv0=v1;
  nv1=v0;
  nextFace=Stripifier.findOtherFace(edgeInfos,nv0,nv1,m_startInfo.m_startFace);
  while (nextFace != null && !isMarked(nextFace)) {
    if (!unique(tempAllFaces,nextFace))     break;
    int testnv0=nv1;
    int testnv1=Stripifier.getNextIndex(scratchIndices,nextFace);
    FaceInfo nextNextFace=Stripifier.findOtherFace(edgeInfos,testnv0,testnv1,nextFace);
    if ((nextNextFace == null) || (isMarked(nextNextFace))) {
      FaceInfo testNextFace=Stripifier.findOtherFace(edgeInfos,nv0,testnv1,nextFace);
      if (((testNextFace != null) && !isMarked(testNextFace))) {
        FaceInfo tempFace=new FaceInfo(nv0,nv1,nv0);
        backwardFaces.add(tempFace);
        markTriangle(tempFace);
        scratchIndices.add(nv0);
        testnv0=nv0;
        ++m_numDegenerates;
      }
    }
    backwardFaces.add(nextFace);
    tempAllFaces.add(nextFace);
    markTriangle(nextFace);
    scratchIndices.add(testnv1);
    nv0=testnv0;
    nv1=testnv1;
    nextFace=Stripifier.findOtherFace(edgeInfos,nv0,nv1,nextFace);
  }
  combine(forwardFaces,backwardFaces);
}
