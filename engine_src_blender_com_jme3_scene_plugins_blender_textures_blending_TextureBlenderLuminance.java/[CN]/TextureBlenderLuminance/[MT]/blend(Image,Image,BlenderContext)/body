{
  this.prepareImagesForBlending(image,baseImage);
  Format format=image.getFormat();
  PixelInputOutput basePixelIO=null;
  TexturePixel basePixel=null;
  float[] materialColor=this.materialColor;
  if (baseImage != null) {
    basePixelIO=PixelIOFactory.getPixelIO(baseImage.getFormat());
    materialColor=new float[this.materialColor.length];
    basePixel=new TexturePixel();
  }
  int width=image.getWidth();
  int height=image.getHeight();
  int depth=image.getDepth();
  if (depth == 0) {
    depth=1;
  }
  ArrayList<ByteBuffer> dataArray=new ArrayList<ByteBuffer>(depth);
  float[] resultPixel=new float[4];
  float[] tinAndAlpha=new float[2];
  for (int dataLayerIndex=0; dataLayerIndex < depth; ++dataLayerIndex) {
    ByteBuffer data=image.getData(dataLayerIndex);
    data.rewind();
    ByteBuffer newData=BufferUtils.createByteBuffer(data.limit());
    int dataIndex=0, x=0, y=0;
    while (data.hasRemaining()) {
      if (basePixelIO != null) {
        basePixelIO.read(baseImage,dataLayerIndex,basePixel,x,y);
        basePixel.toRGBA(materialColor);
      }
      this.getTinAndAlpha(data,format,negateTexture,tinAndAlpha);
      this.blendPixel(resultPixel,materialColor,color,tinAndAlpha[0],blendFactor,blendType,blenderContext);
      newData.put(dataIndex++,(byte)(resultPixel[0] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[1] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[2] * 255.0f));
      newData.put(dataIndex++,(byte)(tinAndAlpha[1] * 255.0f));
      ++x;
      if (x >= width) {
        x=0;
        ++y;
      }
    }
    dataArray.add(newData);
  }
  Image result=depth > 1 ? new Image(Format.RGBA8,width,height,depth,dataArray) : new Image(Format.RGBA8,width,height,dataArray.get(0));
  if (image.getMipMapSizes() != null) {
    result.setMipMapSizes(image.getMipMapSizes().clone());
  }
  return result;
}
