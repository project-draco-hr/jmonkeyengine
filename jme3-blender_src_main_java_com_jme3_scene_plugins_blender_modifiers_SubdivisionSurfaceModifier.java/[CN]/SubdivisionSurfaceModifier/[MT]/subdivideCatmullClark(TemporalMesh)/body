{
  Set<Integer> boundaryVertices=new HashSet<Integer>();
  for (  Edge edge : temporalMesh.getEdges()) {
    if (!edge.isInFace()) {
      boundaryVertices.add(edge.getFirstIndex());
      boundaryVertices.add(edge.getSecondIndex());
    }
 else {
      if (temporalMesh.isBoundary(edge.getFirstIndex())) {
        boundaryVertices.add(edge.getFirstIndex());
      }
      if (temporalMesh.isBoundary(edge.getSecondIndex())) {
        boundaryVertices.add(edge.getSecondIndex());
      }
    }
  }
  List<CreasePoint> creasePoints=new ArrayList<CreasePoint>(temporalMesh.getVertexCount());
  for (int i=0; i < temporalMesh.getVertexCount(); ++i) {
    List<Edge> adjacentOriginalEdges=new ArrayList<Edge>();
    for (    Edge edge : temporalMesh.getAdjacentEdges(i)) {
      if (verticesOnOriginalEdges.contains(edge.getFirstIndex()) || verticesOnOriginalEdges.contains(edge.getSecondIndex())) {
        adjacentOriginalEdges.add(edge);
      }
    }
    creasePoints.add(new CreasePoint(i,boundaryVertices.contains(i),adjacentOriginalEdges,temporalMesh));
  }
  Vector3f[] averageVert=new Vector3f[temporalMesh.getVertexCount()];
  int[] averageCount=new int[temporalMesh.getVertexCount()];
  for (  Face face : temporalMesh.getFaces()) {
    Vector3f centroid=face.computeCentroid();
    for (    Integer index : face.getIndexes()) {
      if (boundaryVertices.contains(index)) {
        Edge edge=this.findEdge(temporalMesh,index,face.getIndexes().getNextIndex(index));
        if (temporalMesh.isBoundary(edge)) {
          averageVert[index]=averageVert[index] == null ? edge.computeCentroid() : averageVert[index].addLocal(edge.computeCentroid());
          averageCount[index]+=1;
        }
        edge=this.findEdge(temporalMesh,face.getIndexes().getPreviousIndex(index),index);
        if (temporalMesh.isBoundary(edge)) {
          averageVert[index]=averageVert[index] == null ? edge.computeCentroid() : averageVert[index].addLocal(edge.computeCentroid());
          averageCount[index]+=1;
        }
      }
 else {
        averageVert[index]=averageVert[index] == null ? centroid.clone() : averageVert[index].addLocal(centroid);
        averageCount[index]+=1;
      }
    }
  }
  for (  Edge edge : temporalMesh.getEdges()) {
    if (!edge.isInFace()) {
      Vector3f centroid=temporalMesh.getVertices().get(edge.getFirstIndex()).add(temporalMesh.getVertices().get(edge.getSecondIndex())).divideLocal(2);
      averageVert[edge.getFirstIndex()]=averageVert[edge.getFirstIndex()] == null ? centroid.clone() : averageVert[edge.getFirstIndex()].addLocal(centroid);
      averageVert[edge.getSecondIndex()]=averageVert[edge.getSecondIndex()] == null ? centroid.clone() : averageVert[edge.getSecondIndex()].addLocal(centroid);
      averageCount[edge.getFirstIndex()]+=1;
      averageCount[edge.getSecondIndex()]+=1;
    }
  }
  for (int i=0; i < averageVert.length; ++i) {
    Vector3f v=temporalMesh.getVertices().get(i);
    averageVert[i].divideLocal(averageCount[i]);
    Vector3f t=averageVert[i].subtract(v);
    if (!boundaryVertices.contains(i)) {
      t.multLocal(4 / (float)averageCount[i]);
    }
    v.addLocal(t);
    CreasePoint creasePoint=creasePoints.get(i);
    if (creasePoint.getTarget() != null && creasePoint.getWeight() != 0) {
      t=creasePoint.getTarget().subtractLocal(v).multLocal(creasePoint.getWeight());
      v.addLocal(t);
    }
  }
}
