{
  Map<BoneContext,List<Constraint>> bonesWithConstraints=new HashMap<BoneContext,List<Constraint>>();
  for (int i=1; i < skeleton.getBoneCount(); ++i) {
    Bone bone=skeleton.getBone(i);
    BoneContext boneContext=blenderContext.getBoneContext(bone);
    List<Constraint> constraints=this.findConstraints(boneContext.getBoneOma(),blenderContext);
    if (constraints != null && constraints.size() > 0) {
      bonesWithConstraints.put(boneContext,constraints);
    }
  }
  List<BoneContext> bonesToRemove=new ArrayList<BoneContext>(bonesWithConstraints.size());
  for (  Entry<BoneContext,List<Constraint>> entry : bonesWithConstraints.entrySet()) {
    List<Constraint> validConstraints=new ArrayList<Constraint>(entry.getValue().size());
    for (    Constraint constraint : entry.getValue()) {
      if (constraint.isImplemented() && constraint.validate() && constraint.isTrackToBeChanged()) {
        validConstraints.add(constraint);
      }
    }
    if (validConstraints.size() > 0) {
      entry.setValue(validConstraints);
    }
 else {
      bonesToRemove.add(entry.getKey());
    }
  }
  for (  BoneContext boneContext : bonesToRemove) {
    bonesWithConstraints.remove(boneContext);
  }
  List<BoneContext> bonesConstrainedWithoutTarget=new ArrayList<BoneContext>();
  Set<Long> remainedOMAS=new HashSet<Long>();
  bonesToRemove.clear();
  for (  Entry<BoneContext,List<Constraint>> entry : bonesWithConstraints.entrySet()) {
    boolean hasDependantConstraints=false;
    for (    Constraint constraint : entry.getValue()) {
      if (constraint.targetOMA != null) {
        hasDependantConstraints=true;
        break;
      }
    }
    if (!hasDependantConstraints) {
      bonesConstrainedWithoutTarget.add(entry.getKey());
      bonesToRemove.add(entry.getKey());
    }
 else {
      remainedOMAS.add(entry.getKey().getBoneOma());
    }
  }
  for (  BoneContext boneContext : bonesToRemove) {
    bonesWithConstraints.remove(boneContext);
  }
  this.sortBonesByChain(bonesConstrainedWithoutTarget);
  List<BoneContext> bonesConstrainedWithTarget=new ArrayList<BoneContext>();
  do {
    bonesToRemove.clear();
    for (    Entry<BoneContext,List<Constraint>> entry : bonesWithConstraints.entrySet()) {
      boolean unconstrainedBone=true;
      for (      Constraint constraint : entry.getValue()) {
        if (remainedOMAS.contains(constraint.getTargetOMA())) {
          unconstrainedBone=false;
          break;
        }
      }
      if (unconstrainedBone) {
        bonesToRemove.add(entry.getKey());
        bonesConstrainedWithTarget.add(entry.getKey());
      }
    }
    for (    BoneContext boneContext : bonesToRemove) {
      bonesWithConstraints.remove(boneContext);
      remainedOMAS.remove(boneContext.getBoneOma());
    }
  }
 while (bonesWithConstraints.size() > 0 && bonesToRemove.size() > 0);
  this.sortBonesByChain(bonesConstrainedWithoutTarget);
  List<Bone> result=new ArrayList<Bone>();
  for (  BoneContext boneContext : bonesConstrainedWithoutTarget) {
    result.add(boneContext.getBone());
  }
  for (  BoneContext boneContext : bonesConstrainedWithTarget) {
    result.add(boneContext.getBone());
  }
  if (bonesWithConstraints.size() > 0) {
    LOGGER.warning("Some bones have loops in their constraints' definitions. The result might not be properly computed!");
    for (    BoneContext boneContext : bonesWithConstraints.keySet()) {
      result.add(boneContext.getBone());
    }
  }
  return result;
}
