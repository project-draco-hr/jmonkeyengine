{
  AmbientLight al=new AmbientLight();
  rootNode.addLight(al);
  DirectionalLight dl=new DirectionalLight();
  dl.setDirection(Vector3f.UNIT_XYZ.negate());
  rootNode.addLight(dl);
  Box box=new Box(1,1,1);
  FloatBuffer weights=FloatBuffer.allocate(box.getVertexCount() * 4);
  VertexBuffer weightsBuf=new VertexBuffer(Type.BoneWeight);
  weightsBuf.setupData(Usage.CpuOnly,4,Format.Float,weights);
  box.setBuffer(weightsBuf);
  ByteBuffer indices=ByteBuffer.allocate(box.getVertexCount() * 4);
  VertexBuffer indicesBuf=new VertexBuffer(Type.BoneIndex);
  indicesBuf.setupData(Usage.CpuOnly,4,Format.UnsignedByte,indices);
  box.setBuffer(indicesBuf);
  box.generateBindPose(true);
  bone=new Bone("root");
  bone.setBindTransforms(Vector3f.ZERO,Quaternion.IDENTITY,Vector3f.UNIT_XYZ);
  bone.setUserControl(true);
  skeleton=new Skeleton(new Bone[]{bone});
  for (int i=0; i < box.getVertexCount() * 4; i+=4) {
    indices.array()[i + 0]=0;
    indices.array()[i + 1]=0;
    indices.array()[i + 2]=0;
    indices.array()[i + 3]=0;
    weights.array()[i + 0]=1;
    weights.array()[i + 1]=0;
    weights.array()[i + 2]=0;
    weights.array()[i + 3]=0;
  }
  box.setMaxNumWeights(1);
  Geometry geom=new Geometry("box",box);
  geom.setMaterial(assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall.j3m"));
  Node model=new Node("model");
  model.attachChild(geom);
  SkeletonControl skeletonControl=new SkeletonControl(new Mesh[]{box},skeleton);
  model.addControl(skeletonControl);
  rootNode.attachChild(model);
}
