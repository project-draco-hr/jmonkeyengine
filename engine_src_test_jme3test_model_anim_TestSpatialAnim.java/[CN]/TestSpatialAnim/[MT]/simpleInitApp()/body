{
  AmbientLight al=new AmbientLight();
  rootNode.addLight(al);
  DirectionalLight dl=new DirectionalLight();
  dl.setDirection(Vector3f.UNIT_XYZ.negate());
  rootNode.addLight(dl);
  Box box=new Box(1,1,1);
  Geometry geom=new Geometry("box",box);
  geom.setMaterial(assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall.j3m"));
  Node model=new Node("model");
  model.attachChild(geom);
  Box child=new Box(0.5f,0.5f,0.5f);
  Geometry childGeom=new Geometry("box",child);
  childGeom.setMaterial(assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall.j3m"));
  Node childModel=new Node("childmodel");
  childModel.setLocalTranslation(2,2,2);
  childModel.attachChild(childGeom);
  model.attachChild(childModel);
  float animTime=5;
  int fps=25;
  float totalXLength=10;
  int totalFrames=(int)(fps * animTime);
  float dT=animTime / totalFrames, t=0;
  float dX=totalXLength / totalFrames, x=0;
  float[] times=new float[totalFrames];
  Vector3f[] translations=new Vector3f[totalFrames];
  Quaternion[] rotations=new Quaternion[totalFrames];
  Vector3f[] scales=new Vector3f[totalFrames];
  for (int i=0; i < totalFrames; ++i) {
    times[i]=t;
    t+=dT;
    translations[i]=new Vector3f(x,0,0);
    x+=dX;
    rotations[i]=Quaternion.IDENTITY;
    scales[i]=Vector3f.UNIT_XYZ;
  }
  SpatialTrack spatialTrack=new SpatialTrack(times,translations,rotations,scales);
  Animation spatialAnimation=new Animation("anim",animTime);
  spatialAnimation.setTracks(new SpatialTrack[]{spatialTrack});
  AnimControl control=new AnimControl();
  HashMap<String,Animation> animations=new HashMap<String,Animation>();
  animations.put("anim",spatialAnimation);
  control.setAnimations(animations);
  model.addControl(control);
  rootNode.attachChild(model);
  control.createChannel().setAnim("anim");
}
