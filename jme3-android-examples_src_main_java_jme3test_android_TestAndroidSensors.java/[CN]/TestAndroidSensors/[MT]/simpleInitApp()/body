{
  if (enableFlyByCameraRotation) {
    flyCam.setEnabled(true);
  }
 else {
    flyCam.setEnabled(false);
  }
  Mesh lineX=new Line(Vector3f.ZERO,Vector3f.ZERO.add(Vector3f.UNIT_X.mult(3)));
  Mesh lineY=new Line(Vector3f.ZERO,Vector3f.ZERO.add(Vector3f.UNIT_Y.mult(3)));
  Mesh lineZ=new Line(Vector3f.ZERO,Vector3f.ZERO.add(Vector3f.UNIT_Z.mult(3)));
  Geometry geoX=new Geometry("X",lineX);
  Material matX=new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md");
  matX.setColor("Color",ColorRGBA.Red);
  matX.getAdditionalRenderState().setLineWidth(30);
  geoX.setMaterial(matX);
  rootNode.attachChild(geoX);
  Geometry geoY=new Geometry("Y",lineY);
  Material matY=new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md");
  matY.setColor("Color",ColorRGBA.Green);
  matY.getAdditionalRenderState().setLineWidth(30);
  geoY.setMaterial(matY);
  rootNode.attachChild(geoY);
  Geometry geoZ=new Geometry("Z",lineZ);
  Material matZ=new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md");
  matZ.setColor("Color",ColorRGBA.Blue);
  matZ.getAdditionalRenderState().setLineWidth(30);
  geoZ.setMaterial(matZ);
  rootNode.attachChild(geoZ);
  Box b=new Box(1,1,1);
  geomZero=new Geometry("Box",b);
  Material mat=new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md");
  mat.setColor("Color",ColorRGBA.Yellow);
  Texture tex_ml=assetManager.loadTexture("Interface/Logo/Monkey.jpg");
  mat.setTexture("ColorMap",tex_ml);
  geomZero.setMaterial(mat);
  geomZero.setLocalTranslation(Vector3f.ZERO);
  geomZero.setLocalRotation(Quaternion.IDENTITY);
  rootNode.attachChild(geomZero);
  inputManager.addMapping("MouseClick",new MouseButtonTrigger(MouseInput.BUTTON_LEFT));
  inputManager.addListener(this,"MouseClick");
  Joystick[] joysticks=inputManager.getJoysticks();
  if (joysticks == null || joysticks.length < 1) {
    logger.log(Level.INFO,"Cannot find any joysticks!");
  }
 else {
    logger.log(Level.INFO,"Number of joysticks: {0}",joysticks.length);
    JoystickAxis axis;
    for (    Joystick joystick : joysticks) {
      List<JoystickAxis> axes=joystick.getAxes();
      for (      JoystickAxis joystickAxis : axes) {
        logger.log(Level.INFO,"{0} axis scan Name: {1}, LogicalId: {2}, AxisId: {3}",new Object[]{joystick.getName(),joystickAxis.getName(),joystickAxis.getLogicalId(),joystickAxis.getAxisId()});
      }
      axis=joystick.getAxis(SensorJoystickAxis.ORIENTATION_X);
      if (axis != null) {
        axis.assignAxis(ORIENTATION_X_PLUS,ORIENTATION_X_MINUS);
        inputManager.addListener(this,ORIENTATION_X_PLUS,ORIENTATION_X_MINUS);
        logger.log(Level.INFO,"Found {0} Joystick, assigning mapping for X axis: {1}, with max value: {2}",new Object[]{joystick.toString(),axis.toString(),((SensorJoystickAxis)axis).getMaxRawValue()});
      }
      axis=joystick.getAxis(SensorJoystickAxis.ORIENTATION_Y);
      if (axis != null) {
        axis.assignAxis(ORIENTATION_Y_PLUS,ORIENTATION_Y_MINUS);
        inputManager.addListener(this,ORIENTATION_Y_PLUS,ORIENTATION_Y_MINUS);
        logger.log(Level.INFO,"Found {0} Joystick, assigning mapping for Y axis: {1}, with max value: {2}",new Object[]{joystick.toString(),axis.toString(),((SensorJoystickAxis)axis).getMaxRawValue()});
      }
      axis=joystick.getAxis(SensorJoystickAxis.ORIENTATION_Z);
      if (axis != null) {
        axis.assignAxis(ORIENTATION_Z_PLUS,ORIENTATION_Z_MINUS);
        inputManager.addListener(this,ORIENTATION_Z_PLUS,ORIENTATION_Z_MINUS);
        logger.log(Level.INFO,"Found {0} Joystick, assigning mapping for Z axis: {1}, with max value: {2}",new Object[]{joystick.toString(),axis.toString(),((SensorJoystickAxis)axis).getMaxRawValue()});
      }
      joystickMap.put(joystick.getJoyId(),joystick);
    }
  }
}
