{
  ArrayList<BIHStackData> stack=TempVars.get().bihStack;
  stack.clear();
  Vector3f o=r.getOrigin().clone();
  Vector3f d=r.getDirection().clone();
  Matrix4f inv=worldMatrix.invert();
  inv.mult(r.getOrigin(),r.getOrigin());
  inv.multNormal(r.getDirection(),r.getDirection());
  float[] origins={r.getOrigin().x,r.getOrigin().y,r.getOrigin().z};
  float[] invDirections={1f / r.getDirection().x,1f / r.getDirection().y,1f / r.getDirection().z};
  r.getDirection().normalizeLocal();
  Vector3f v1=new Vector3f(), v2=new Vector3f(), v3=new Vector3f();
  int cols=0;
  stack.add(new BIHStackData(this,sceneMin,sceneMax));
  stackloop:   while (stack.size() > 0) {
    BIHStackData data=stack.remove(stack.size() - 1);
    BIHNode node=data.node;
    float tMin=data.min, tMax=data.max;
    if (tMax < tMin)     continue;
    leafloop:     while (node.axis != 3) {
      int a=node.axis;
      float origin=origins[a];
      float invDirection=invDirections[a];
      float tNearSplit, tFarSplit;
      BIHNode nearNode, farNode;
      tNearSplit=(node.leftPlane - origin) * invDirection;
      tFarSplit=(node.rightPlane - origin) * invDirection;
      nearNode=node.left;
      farNode=node.right;
      if (invDirection < 0) {
        float tmpSplit=tNearSplit;
        tNearSplit=tFarSplit;
        tFarSplit=tmpSplit;
        BIHNode tmpNode=nearNode;
        nearNode=farNode;
        farNode=tmpNode;
      }
      if (tMin > tNearSplit && tMax < tFarSplit) {
        continue stackloop;
      }
      if (tMin > tNearSplit) {
        tMin=max(tMin,tFarSplit);
        node=farNode;
      }
 else       if (tMax < tFarSplit) {
        tMax=min(tMax,tNearSplit);
        node=nearNode;
      }
 else {
        stack.add(new BIHStackData(farNode,max(tMin,tFarSplit),tMax));
        tMax=min(tMax,tNearSplit);
        node=nearNode;
      }
    }
    for (int i=node.leftIndex; i <= node.rightIndex; i++) {
      tree.getTriangle(i,v1,v2,v3);
      float t=r.intersects(v1,v2,v3);
      if (!Float.isInfinite(t)) {
        if (worldMatrix != null) {
          worldMatrix.mult(v1,v1);
          worldMatrix.mult(v2,v2);
          worldMatrix.mult(v3,v3);
          float t_world=new Ray(o,d).intersects(v1,v2,v3);
          t=t_world;
        }
        Vector3f contactNormal=Triangle.computeTriangleNormal(v1,v2,v3,null);
        Vector3f contactPoint=new Vector3f(d).multLocal(t).addLocal(o);
        float worldSpaceDist=o.distance(contactPoint);
        CollisionResult cr=new CollisionResult(contactPoint,worldSpaceDist);
        cr.setContactNormal(contactNormal);
        cr.setTriangleIndex(tree.getTriangleIndex(i));
        results.addCollision(cr);
        cols++;
      }
    }
  }
  r.setOrigin(o);
  r.setDirection(d);
  return cols;
}
