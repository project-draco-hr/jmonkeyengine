{
  AssetKey modelKey=(AssetKey)wiz.getProperty("mainkey");
  boolean keepFiles=(Boolean)wiz.getProperty("keepfiles");
  List<FileObject> assetList=(List<FileObject>)wiz.getProperty("assetfiles");
  List<AssetKey> assetKeys=(List<AssetKey>)wiz.getProperty("assetlist");
  String importPath=(String)wiz.getProperty("destpath");
  Project context=(Project)wiz.getProperty("project");
  ProjectAssetManager importManager=(ProjectAssetManager)wiz.getProperty("manager");
  ProjectAssetManager manager=context.getLookup().lookup(ProjectAssetManager.class);
  if (manager == null) {
    throw new IllegalStateException("Cannot find project AssetManager!");
  }
  List<FileObject> deleteList=new LinkedList<FileObject>();
  int idx=0;
  for (Iterator<FileObject> it=assetList.iterator(); it.hasNext(); ) {
    FileObject source=it.next();
    AssetKey key=assetKeys.get(idx);
    UberAssetInfo info=UberAssetLocator.getInfo(key);
    if (info != null) {
      logger.log(Level.INFO,"Found relocation info for {0}",key.getName());
      int i=0;
      String newTexturePath=importPath + key.getName().replace(key.getFolder(),"");
      while (manager.getAssetFolder().getFileObject(newTexturePath) != null) {
        i++;
        newTexturePath=importPath + i + key.getName().replace(key.getFolder(),"");
      }
      newTexturePath=new AssetKey(newTexturePath).getName();
      FileObject newFile=manager.createAsset(newTexturePath,info.getFileObject());
      if (newFile == null) {
        logger.log(Level.SEVERE,"Could not create new file {0}",newTexturePath);
      }
 else {
        info.setNewAssetName(newTexturePath);
        logger.log(Level.INFO,"Created relocated texture file {0}",newTexturePath);
      }
    }
 else {
      try {
        String path=importPath + importManager.getRelativeAssetPath(source.getPath());
        FileObject fileObj=manager.createAsset(path,source);
        if (fileObj != null) {
          logger.log(Level.INFO,"Copied file {0} to {1}",new Object[]{source.getPath(),path});
          DataObject obj=DataObject.find(fileObj);
          AssetData data=obj.getLookup().lookup(AssetData.class);
          if (obj instanceof SpatialAssetDataObject) {
            if (!(obj instanceof BinaryModelDataObject)) {
              deleteList.add(fileObj);
              logger.log(Level.INFO,"Add file {0} to delete list",path);
            }
          }
 else           if (data != null) {
            AssetKey assetKey=data.getAssetKey();
            if (!(assetKey instanceof TextureKey) && !(assetKey instanceof MaterialKey)) {
              deleteList.add(fileObj);
              logger.log(Level.INFO,"Add file {0} to delete list",path);
            }
          }
        }
 else {
          logger.log(Level.SEVERE,"Error copying file {0} to {1}",new Object[]{source.getPath(),path});
        }
      }
 catch (      Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
    idx++;
  }
  FileObject newFile=manager.getAssetFolder().getFileObject(importPath + modelKey.getName());
  if (newFile == null) {
    logger.log(Level.SEVERE,"Could not find file {0} after copying to project folder!",importPath + modelKey.getName());
    return;
  }
  DataObject targetModel;
  ProjectAssetManager tempProjectManager=null;
  try {
    targetModel=DataObject.find(newFile);
    if (targetModel instanceof SpatialAssetDataObject) {
      tempProjectManager=targetModel.getLookup().lookup(ProjectAssetManager.class);
      if (tempProjectManager != null) {
        logger.log(Level.INFO,"Using real ProjectAssetManager for import instatiation.");
      }
 else {
        logger.log(Level.WARNING,"Using dummy ProjectAssetManager for import instantiation.");
        tempProjectManager=new ProjectAssetManager(manager.getAssetFolder());
        ((SpatialAssetDataObject)targetModel).getLookupContents().add(tempProjectManager);
      }
      UberAssetLocator.setAssetBaseFolder(importPath);
      tempProjectManager.registerLocator(importManager.getAssetFolderName(),UberAssetLocator.class);
      AssetData targetData=targetModel.getLookup().lookup(AssetData.class);
      targetData.setAssetKey(modelKey);
      Spatial spat=(Spatial)targetData.loadAsset();
      if (spat == null) {
        throw new IllegalStateException("Cannot load model after copying!");
      }
      replaceLocatedTextures(spat,manager);
      targetData.saveAsset();
      targetData.closeAsset();
      ((SpatialAssetDataObject)targetModel).getLookupContents().remove(tempProjectManager);
    }
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    if (tempProjectManager != null) {
      try {
        tempProjectManager.unregisterLocator(importManager.getAssetFolderName(),UberAssetLocator.class);
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
      }
    }
    UberAssetLocator.setAssetBaseFolder(null);
  }
  if (!keepFiles) {
    for (Iterator<FileObject> it=deleteList.iterator(); it.hasNext(); ) {
      FileObject fileObject=it.next();
      try {
        fileObject.delete();
      }
 catch (      IOException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
  FileObject importFolder=manager.getAssetFolder().getFileObject(importPath);
  FileObject importParentFolder=importFolder.getParent();
  importParentFolder.refresh();
  importFolder.refresh();
}
