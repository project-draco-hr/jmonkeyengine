{
  AssetKey key=(AssetKey)wiz.getProperty("mainkey");
  boolean keepFiles=(Boolean)wiz.getProperty("keepfiles");
  List<AssetKey> keyList=(List<AssetKey>)wiz.getProperty("assetlist");
  String path=(String)wiz.getProperty("path");
  String importPath=(String)wiz.getProperty("destpath");
  ProjectAssetManager manager=context.getLookup().lookup(ProjectAssetManager.class);
  if (manager == null) {
    throw new IllegalStateException("Cannot find project AssetManager!");
  }
  List<FileObject> deleteList=new LinkedList<FileObject>();
  for (Iterator<AssetKey> it=keyList.iterator(); it.hasNext(); ) {
    AssetKey assetKey=it.next();
    File file=new File(path + "/" + assetKey.getFolder()+ assetKey.getName());
    if (file.exists()) {
      FileObject source=FileUtil.toFileObject(file);
      File destFolder=new File(manager.getAssetFolderName() + "/" + importPath+ "/"+ assetKey.getFolder()+ "/");
      destFolder.mkdirs();
      FileObject dest=FileUtil.toFileObject(destFolder);
      try {
        FileObject fileObj=dest.getFileObject(source.getName(),source.getExt());
        if (fileObj != null) {
          NotifyDescriptor.Confirmation msg=new NotifyDescriptor.Confirmation("File " + source.getNameExt() + " exists, overwrite?",NotifyDescriptor.YES_NO_OPTION,NotifyDescriptor.WARNING_MESSAGE);
          Object result=DialogDisplayer.getDefault().notify(msg);
          if (NotifyDescriptor.YES_OPTION.equals(result)) {
            fileObj.delete();
            fileObj=source.copy(dest,source.getName(),source.getExt());
          }
 else {
          }
        }
 else {
          fileObj=source.copy(dest,source.getName(),source.getExt());
        }
        if (!(assetKey instanceof TextureKey) && fileObj != null) {
          deleteList.add(fileObj);
        }
      }
 catch (      Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
  File file=new File(manager.getAssetFolderName() + "/" + importPath+ "/"+ key.getName());
  DataObject targetModel;
  try {
    targetModel=DataObject.find(FileUtil.toFileObject(file));
    if (targetModel instanceof SpatialAssetDataObject) {
      ((SpatialAssetDataObject)targetModel).getLookupContents().add(manager);
      AssetData data=targetModel.getLookup().lookup(AssetData.class);
      data.setAssetKey(key);
      Spatial spat=(Spatial)data.loadAsset();
      if (spat == null) {
        throw new IllegalStateException("Cannot load model after copying!");
      }
      data.saveAsset();
    }
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
  if (!keepFiles) {
    for (Iterator<FileObject> it=deleteList.iterator(); it.hasNext(); ) {
      FileObject fileObject=it.next();
      try {
        fileObject.delete();
      }
 catch (      IOException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
  FileObject importFolder=manager.getAssetFolder().getFileObject(importPath);
  FileObject importParentFolder=importFolder.getParent();
  importParentFolder.refresh();
  importFolder.refresh();
}
