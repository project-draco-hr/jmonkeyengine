{
  AssetKey modelKey=(AssetKey)wiz.getProperty("mainkey");
  boolean keepFiles=(Boolean)wiz.getProperty("keepfiles");
  List<FileObject> assetList=(List<FileObject>)wiz.getProperty("assetfiles");
  List<AssetKey> assetKeys=(List<AssetKey>)wiz.getProperty("assetlist");
  String importPath=(String)wiz.getProperty("destpath");
  Project context=(Project)wiz.getProperty("project");
  ProjectAssetManager importManager=(ProjectAssetManager)wiz.getProperty("manager");
  ProjectAssetManager manager=context.getLookup().lookup(ProjectAssetManager.class);
  if (manager == null) {
    throw new IllegalStateException("Cannot find project AssetManager!");
  }
  List<FileObject> deleteList=new LinkedList<FileObject>();
  for (Iterator<FileObject> it=assetList.iterator(); it.hasNext(); ) {
    FileObject source=it.next();
    String folderName=importPath + "/" + importManager.getRelativeAssetPath(source.getParent().getPath());
    try {
      FileObject dest=manager.getAssetFolder().getFileObject(folderName);
      if (dest == null) {
        dest=FileUtil.createFolder(manager.getAssetFolder(),folderName);
      }
      FileObject fileObj=dest.getFileObject(source.getName(),source.getExt());
      if (fileObj != null) {
        NotifyDescriptor.Confirmation msg=new NotifyDescriptor.Confirmation("File " + source.getNameExt() + " exists, overwrite?",NotifyDescriptor.YES_NO_OPTION,NotifyDescriptor.WARNING_MESSAGE);
        Object result=DialogDisplayer.getDefault().notify(msg);
        if (NotifyDescriptor.YES_OPTION.equals(result)) {
          fileObj.delete();
          fileObj=source.copy(dest,source.getName(),source.getExt());
        }
 else {
          fileObj=null;
        }
      }
 else {
        fileObj=source.copy(dest,source.getName(),source.getExt());
      }
      if (fileObj != null) {
        DataObject obj=DataObject.find(fileObj);
        AssetData data=obj.getLookup().lookup(AssetData.class);
        if (data != null) {
          AssetKey assetKey=data.getAssetKey();
          if (obj instanceof SpatialAssetDataObject) {
            if (!(obj instanceof BinaryModelDataObject)) {
              deleteList.add(fileObj);
            }
          }
 else           if (!(assetKey instanceof TextureKey) && !(assetKey instanceof MaterialKey)) {
            deleteList.add(fileObj);
          }
        }
      }
    }
 catch (    Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  FileObject file=manager.getAssetFolder().getFileObject(importPath + "/" + modelKey.getName());
  DataObject targetModel;
  try {
    targetModel=DataObject.find(file);
    if (targetModel instanceof SpatialAssetDataObject) {
      ((SpatialAssetDataObject)targetModel).getLookupContents().add(manager);
      AssetData data=targetModel.getLookup().lookup(AssetData.class);
      data.setAssetKey(modelKey);
      Spatial spat=(Spatial)data.loadAsset();
      if (spat == null) {
        throw new IllegalStateException("Cannot load model after copying!");
      }
      data.saveAsset();
    }
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
  if (!keepFiles) {
    for (Iterator<FileObject> it=deleteList.iterator(); it.hasNext(); ) {
      FileObject fileObject=it.next();
      try {
        fileObject.delete();
      }
 catch (      IOException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
  FileObject importFolder=manager.getAssetFolder().getFileObject(importPath);
  FileObject importParentFolder=importFolder.getParent();
  importParentFolder.refresh();
  importFolder.refresh();
}
