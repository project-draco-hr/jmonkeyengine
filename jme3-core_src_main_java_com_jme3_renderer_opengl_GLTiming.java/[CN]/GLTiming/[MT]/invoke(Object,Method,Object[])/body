{
  String methodName=method.getName();
  if (methodName.equals("resetStats")) {
    if (state.lastPrintOutTime + 1000000000 <= System.nanoTime() && state.sampleCount > 0) {
      state.timeSpentInGL/=state.sampleCount;
      System.out.println("--- TOTAL TIME SPENT IN GL CALLS: " + (state.timeSpentInGL / 1000) + "us");
      Map.Entry<String,Long>[] callTimes=new Map.Entry[state.callTiming.size()];
      int i=0;
      for (      Map.Entry<String,Long> callTime : state.callTiming.entrySet()) {
        callTimes[i++]=callTime;
      }
      Arrays.sort(callTimes,new CallTimingComparator());
      int limit=10;
      for (      Map.Entry<String,Long> callTime : callTimes) {
        long val=callTime.getValue() / state.sampleCount;
        String name=callTime.getKey();
        String pad="                                     ".substring(0,30 - name.length());
        System.out.println("\t" + callTime.getKey() + pad+ (val / 1000)+ "us");
        if (limit-- == 0)         break;
      }
      for (      Map.Entry<String,Long> callTime : callTimes) {
        state.callTiming.put(callTime.getKey(),Long.valueOf(0));
      }
      state.sampleCount=0;
      state.timeSpentInGL=0;
      state.lastPrintOutTime=System.nanoTime();
    }
 else {
      state.sampleCount++;
    }
    return null;
  }
 else {
    Long currentTimeObj=state.callTiming.get(methodName);
    long currentTime=0;
    if (currentTimeObj != null)     currentTime=currentTimeObj;
    long startTime=System.nanoTime();
    Object result=method.invoke(obj,args);
    long delta=System.nanoTime() - startTime;
    currentTime+=delta;
    state.timeSpentInGL+=delta;
    state.callTiming.put(methodName,currentTime);
    if (delta > 1000000 && !methodName.equals("glClear")) {
      System.out.println("GL call " + methodName + " took "+ (delta / 1000)+ "us to execute!");
    }
    return result;
  }
}
