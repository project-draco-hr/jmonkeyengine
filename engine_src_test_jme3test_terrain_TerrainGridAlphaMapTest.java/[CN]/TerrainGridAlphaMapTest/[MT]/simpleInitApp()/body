{
  File file=new File("mountains.zip");
  if (!file.exists()) {
    assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/mountains.zip",HttpZipLocator.class);
  }
 else {
    assetManager.registerLocator("mountains.zip",ZipLocator.class);
  }
  this.flyCam.setMoveSpeed(100f);
  ScreenshotAppState state=new ScreenshotAppState();
  this.stateManager.attach(state);
  matRock=new Material(assetManager,"Common/MatDefs/Terrain/Terrain.j3md");
  matRock.setBoolean("useTriPlanarMapping",false);
  Texture grass=assetManager.loadTexture("Textures/Terrain/splat/grass.jpg");
  grass.setWrap(WrapMode.Repeat);
  matRock.setTexture("Tex1",grass);
  matRock.setFloat("Tex1Scale",grassScale);
  Texture dirt=assetManager.loadTexture("Textures/Terrain/splat/dirt.jpg");
  dirt.setWrap(WrapMode.Repeat);
  matRock.setTexture("Tex2",dirt);
  matRock.setFloat("Tex2Scale",dirtScale);
  Texture rock=assetManager.loadTexture("Textures/Terrain/splat/road.jpg");
  rock.setWrap(WrapMode.Repeat);
  matRock.setTexture("Tex3",rock);
  matRock.setFloat("Tex3Scale",rockScale);
  matWire=new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md");
  matWire.getAdditionalRenderState().setWireframe(true);
  matWire.setColor("Color",ColorRGBA.Green);
  this.base=new FractalSum();
  this.base.setRoughness(0.7f);
  this.base.setFrequency(1.0f);
  this.base.setAmplitude(1.0f);
  this.base.setLacunarity(2.12f);
  this.base.setOctaves(8);
  this.base.setScale(0.02125f);
  this.base.addModulator(new NoiseModulator(){
    @Override public float value(    float... in){
      return ShaderUtils.clamp(in[0] * 0.5f + 0.5f,0,1);
    }
  }
);
  FilteredBasis ground=new FilteredBasis(this.base);
  this.perturb=new PerturbFilter();
  this.perturb.setMagnitude(0.119f);
  this.therm=new OptimizedErode();
  this.therm.setRadius(5);
  this.therm.setTalus(0.011f);
  this.smooth=new SmoothFilter();
  this.smooth.setRadius(1);
  this.smooth.setEffect(0.7f);
  this.iterate=new IterativeFilter();
  this.iterate.addPreFilter(this.perturb);
  this.iterate.addPostFilter(this.smooth);
  this.iterate.setFilter(this.therm);
  this.iterate.setIterations(1);
  ground.addPreFilter(this.iterate);
  this.terrain=new TerrainGrid("terrain",65,1025,new ImageBasedHeightMapGrid(assetManager,new Namer(){
    public String getName(    int x,    int y){
      return "Scenes/TerrainAlphaTest/terrain_" + x + "_"+ y+ ".png";
    }
  }
));
  this.terrain.setMaterial(this.matRock);
  this.terrain.setLocalTranslation(0,0,0);
  this.terrain.setLocalScale(2f,1f,2f);
  this.rootNode.attachChild(this.terrain);
  List<Camera> cameras=new ArrayList<Camera>();
  cameras.add(this.getCamera());
  TerrainLodControl control=new TerrainLodControl(this.terrain,cameras);
  this.terrain.addControl(control);
  final BulletAppState bulletAppState=new BulletAppState();
  stateManager.attach(bulletAppState);
  this.getCamera().setLocation(new Vector3f(0,256,0));
  this.viewPort.setBackgroundColor(new ColorRGBA(0.7f,0.8f,1f,1f));
  if (usePhysics) {
    CapsuleCollisionShape capsuleShape=new CapsuleCollisionShape(0.5f,1.8f,1);
    player3=new CharacterControl(capsuleShape,0.5f);
    player3.setJumpSpeed(20);
    player3.setFallSpeed(10);
    player3.setGravity(10);
    player3.setPhysicsLocation(new Vector3f(cam.getLocation().x,256,cam.getLocation().z));
    bulletAppState.getPhysicsSpace().add(player3);
    terrain.addListener("physicsStartListener",new TerrainGridListener(){
      public void gridMoved(      Vector3f newCenter){
      }
      public Material tileLoaded(      Material material,      Vector3f cell){
        return material;
      }
      public void tileAttached(      Vector3f cell,      TerrainQuad quad){
        quad.addControl(new RigidBodyControl(new HeightfieldCollisionShape(quad.getHeightMap(),terrain.getLocalScale()),0));
        bulletAppState.getPhysicsSpace().add(quad);
      }
      public void tileDetached(      Vector3f cell,      TerrainQuad quad){
        bulletAppState.getPhysicsSpace().remove(quad);
        quad.removeControl(RigidBodyControl.class);
      }
    }
);
  }
  this.terrain.initialize(cam.getLocation());
  this.initKeys();
}
