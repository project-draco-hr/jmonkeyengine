{
  DirectionalLight sun=new DirectionalLight();
  sun.setColor(ColorRGBA.White);
  sun.setDirection(new Vector3f(-1,-1,-1).normalizeLocal());
  rootNode.addLight(sun);
  AmbientLight al=new AmbientLight();
  al.setColor(ColorRGBA.White.mult(1.3f));
  rootNode.addLight(al);
  File file=new File("TerrainGridTestData.zip");
  if (!file.exists()) {
    assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/TerrainGridTestData.zip",HttpZipLocator.class);
  }
 else {
    assetManager.registerLocator("TerrainGridTestData.zip",ZipLocator.class);
  }
  this.flyCam.setMoveSpeed(100f);
  ScreenshotAppState state=new ScreenshotAppState();
  this.stateManager.attach(state);
  material=new Material(assetManager,"Common/MatDefs/Terrain/TerrainLighting.j3md");
  material.setBoolean("useTriPlanarMapping",false);
  material.setFloat("Shininess",0.0f);
  Texture grass=assetManager.loadTexture("Textures/Terrain/splat/grass.jpg");
  grass.setWrap(WrapMode.Repeat);
  material.setTexture("DiffuseMap",grass);
  material.setFloat("DiffuseMap_0_scale",grassScale);
  Texture dirt=assetManager.loadTexture("Textures/Terrain/splat/dirt.jpg");
  dirt.setWrap(WrapMode.Repeat);
  material.setTexture("DiffuseMap_1",dirt);
  material.setFloat("DiffuseMap_1_scale",dirtScale);
  Texture rock=assetManager.loadTexture("Textures/Terrain/splat/road.jpg");
  rock.setWrap(WrapMode.Repeat);
  material.setTexture("DiffuseMap_2",rock);
  material.setFloat("DiffuseMap_2_scale",rockScale);
  matWire=new Material(assetManager,"Common/MatDefs/Misc/Unshaded.j3md");
  matWire.getAdditionalRenderState().setWireframe(true);
  matWire.setColor("Color",ColorRGBA.Green);
  this.base=new FractalSum();
  this.base.setRoughness(0.7f);
  this.base.setFrequency(1.0f);
  this.base.setAmplitude(1.0f);
  this.base.setLacunarity(2.12f);
  this.base.setOctaves(8);
  this.base.setScale(0.02125f);
  this.base.addModulator(new NoiseModulator(){
    @Override public float value(    float... in){
      return ShaderUtils.clamp(in[0] * 0.5f + 0.5f,0,1);
    }
  }
);
  FilteredBasis ground=new FilteredBasis(this.base);
  this.perturb=new PerturbFilter();
  this.perturb.setMagnitude(0.119f);
  this.therm=new OptimizedErode();
  this.therm.setRadius(5);
  this.therm.setTalus(0.011f);
  this.smooth=new SmoothFilter();
  this.smooth.setRadius(1);
  this.smooth.setEffect(0.7f);
  this.iterate=new IterativeFilter();
  this.iterate.addPreFilter(this.perturb);
  this.iterate.addPostFilter(this.smooth);
  this.iterate.setFilter(this.therm);
  this.iterate.setIterations(1);
  ground.addPreFilter(this.iterate);
  this.terrain=new TerrainGrid("terrain",33,257,new FractalTileLoader(ground,256));
  this.terrain.setMaterial(this.material);
  this.terrain.setLocalTranslation(0,0,0);
  this.terrain.setLocalScale(2f,1f,2f);
  this.rootNode.attachChild(this.terrain);
  TerrainLodControl control=new TerrainGridLodControl(this.terrain,this.getCamera());
  control.setLodCalculator(new DistanceLodCalculator(33,2.7f));
  this.terrain.addControl(control);
  final BulletAppState bulletAppState=new BulletAppState();
  stateManager.attach(bulletAppState);
  this.getCamera().setLocation(new Vector3f(0,256,0));
  this.viewPort.setBackgroundColor(new ColorRGBA(0.7f,0.8f,1f,1f));
  if (usePhysics) {
    CapsuleCollisionShape capsuleShape=new CapsuleCollisionShape(0.5f,1.8f,1);
    player3=new CharacterControl(capsuleShape,0.5f);
    player3.setJumpSpeed(20);
    player3.setFallSpeed(10);
    player3.setGravity(10);
    player3.setPhysicsLocation(new Vector3f(cam.getLocation().x,256,cam.getLocation().z));
    bulletAppState.getPhysicsSpace().add(player3);
  }
  terrain.addListener(new TerrainGridListener(){
    public void gridMoved(    Vector3f newCenter){
    }
    public void tileAttached(    Vector3f cell,    TerrainQuad quad){
      Texture alpha=null;
      try {
        alpha=assetManager.loadTexture("TerrainAlphaTest/alpha_" + (int)cell.x + "_"+ (int)cell.z+ ".png");
      }
 catch (      Exception e) {
        alpha=assetManager.loadTexture("TerrainAlphaTest/alpha_default.png");
      }
      quad.getMaterial().setTexture("AlphaMap",alpha);
      if (usePhysics) {
        quad.addControl(new RigidBodyControl(new HeightfieldCollisionShape(quad.getHeightMap(),terrain.getLocalScale()),0));
        bulletAppState.getPhysicsSpace().add(quad);
      }
      updateMarkerElevations();
    }
    public void tileDetached(    Vector3f cell,    TerrainQuad quad){
      if (usePhysics) {
        bulletAppState.getPhysicsSpace().remove(quad);
        quad.removeControl(RigidBodyControl.class);
      }
      updateMarkerElevations();
    }
  }
);
  this.initKeys();
  markers=new Node();
  rootNode.attachChild(markers);
  createMarkerPoints(1);
}
