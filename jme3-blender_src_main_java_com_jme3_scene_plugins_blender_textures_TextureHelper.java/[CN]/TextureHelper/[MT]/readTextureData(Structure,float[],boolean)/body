{
  DynamicArray<Pointer> mtexsArray=(DynamicArray<Pointer>)structure.getFieldValue("mtex");
  int separatedTextures=skyTexture ? 0 : ((Number)structure.getFieldValue("septex")).intValue();
  List<TextureData> texturesList=new ArrayList<TextureData>();
  for (int i=0; i < mtexsArray.getTotalSize(); ++i) {
    Pointer p=mtexsArray.get(i);
    if (p.isNotNull() && (separatedTextures & 1 << i) == 0) {
      TextureData textureData=new TextureData();
      textureData.mtex=p.fetchData().get(0);
      textureData.uvCoordinatesType=skyTexture ? UVCoordinatesType.TEXCO_ORCO.blenderValue : ((Number)textureData.mtex.getFieldValue("texco")).intValue();
      textureData.projectionType=((Number)textureData.mtex.getFieldValue("mapping")).intValue();
      textureData.uvCoordinatesName=textureData.mtex.getFieldValue("uvName").toString();
      if (textureData.uvCoordinatesName != null && textureData.uvCoordinatesName.trim().length() == 0) {
        textureData.uvCoordinatesName=null;
      }
      Pointer pTex=(Pointer)textureData.mtex.getFieldValue("tex");
      if (pTex.isNotNull()) {
        Structure tex=pTex.fetchData().get(0);
        textureData.textureStructure=tex;
        texturesList.add(textureData);
      }
    }
  }
  LOGGER.info("Loading model's textures.");
  List<CombinedTexture> loadedTextures=new ArrayList<CombinedTexture>();
  if (blenderContext.getBlenderKey().isOptimiseTextures()) {
    LOGGER.fine("Optimising the useage of model's textures.");
    Map<Number,List<TextureData>> textureDataMap=this.sortTextures(texturesList);
    for (    Entry<Number,List<TextureData>> entry : textureDataMap.entrySet()) {
      if (entry.getValue().size() > 0) {
        CombinedTexture combinedTexture=new CombinedTexture(entry.getKey().intValue(),!skyTexture);
        for (        TextureData textureData : entry.getValue()) {
          int texflag=((Number)textureData.mtex.getFieldValue("texflag")).intValue();
          boolean negateTexture=(texflag & 0x04) != 0;
          Texture texture=this.getTexture(textureData.textureStructure,textureData.mtex,blenderContext);
          if (texture != null) {
            int blendType=((Number)textureData.mtex.getFieldValue("blendtype")).intValue();
            float[] color=new float[]{((Number)textureData.mtex.getFieldValue("r")).floatValue(),((Number)textureData.mtex.getFieldValue("g")).floatValue(),((Number)textureData.mtex.getFieldValue("b")).floatValue()};
            float colfac=((Number)textureData.mtex.getFieldValue("colfac")).floatValue();
            TextureBlender textureBlender=TextureBlenderFactory.createTextureBlender(texture.getImage().getFormat(),texflag,negateTexture,blendType,diffuseColorArray,color,colfac);
            combinedTexture.add(texture,textureBlender,textureData.uvCoordinatesType,textureData.projectionType,textureData.textureStructure,textureData.uvCoordinatesName,blenderContext);
          }
        }
        if (combinedTexture.getTexturesCount() > 0) {
          loadedTextures.add(combinedTexture);
        }
      }
    }
  }
 else {
    LOGGER.fine("No textures optimisation applied.");
    int[] mappings=new int[]{MaterialContext.MTEX_COL,MaterialContext.MTEX_NOR,MaterialContext.MTEX_EMIT,MaterialContext.MTEX_SPEC,MaterialContext.MTEX_ALPHA,MaterialContext.MTEX_AMB};
    for (    TextureData textureData : texturesList) {
      Texture texture=this.getTexture(textureData.textureStructure,textureData.mtex,blenderContext);
      if (texture != null) {
        Number mapto=(Number)textureData.mtex.getFieldValue("mapto");
        int texflag=((Number)textureData.mtex.getFieldValue("texflag")).intValue();
        boolean negateTexture=(texflag & 0x04) != 0;
        for (int i=0; i < mappings.length; ++i) {
          if ((mappings[i] & mapto.intValue()) != 0) {
            CombinedTexture combinedTexture=new CombinedTexture(mappings[i],!skyTexture);
            int blendType=((Number)textureData.mtex.getFieldValue("blendtype")).intValue();
            float[] color=new float[]{((Number)textureData.mtex.getFieldValue("r")).floatValue(),((Number)textureData.mtex.getFieldValue("g")).floatValue(),((Number)textureData.mtex.getFieldValue("b")).floatValue()};
            float colfac=((Number)textureData.mtex.getFieldValue("colfac")).floatValue();
            TextureBlender textureBlender=TextureBlenderFactory.createTextureBlender(texture.getImage().getFormat(),texflag,negateTexture,blendType,diffuseColorArray,color,colfac);
            combinedTexture.add(texture,textureBlender,textureData.uvCoordinatesType,textureData.projectionType,textureData.textureStructure,textureData.uvCoordinatesName,blenderContext);
            if (combinedTexture.getTexturesCount() > 0) {
              loadedTextures.add(combinedTexture);
            }
          }
        }
      }
    }
  }
  return loadedTextures;
}
