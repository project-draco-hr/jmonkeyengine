{
  if (!name.contains(".")) {
    return null;
  }
  boolean generateMipmaps=false;
switch (blenderContext.getBlenderKey().getMipmapGenerationMethod()) {
case ALWAYS_GENERATE:
    generateMipmaps=true;
  break;
case NEVER_GENERATE:
break;
case GENERATE_WHEN_NEEDED:
generateMipmaps=(imaflag & 0x04) != 0;
break;
default :
throw new IllegalStateException("Unknown mipmap generation method: " + blenderContext.getBlenderKey().getMipmapGenerationMethod());
}
AssetManager assetManager=blenderContext.getAssetManager();
name=name.replace('\\','/');
Texture result=null;
if (name.startsWith("//")) {
String relativePath=name.substring(2);
BlenderKey blenderKey=blenderContext.getBlenderKey();
int idx=blenderKey.getName().lastIndexOf('/');
String blenderAssetFolder=blenderKey.getName().substring(0,idx != -1 ? idx : 0);
String absoluteName=blenderAssetFolder + '/' + relativePath;
try {
TextureKey key=new TextureKey(absoluteName);
key.setAsCube(false);
key.setFlipY(true);
key.setGenerateMips(generateMipmaps);
result=assetManager.loadTexture(key);
result.setKey(key);
}
 catch (AssetNotFoundException e) {
LOGGER.fine(e.getLocalizedMessage());
}
}
 else {
List<String> assetNames=new ArrayList<String>();
String[] paths=name.split("\\/");
StringBuilder sb=new StringBuilder(paths[paths.length - 1]);
assetNames.add(paths[paths.length - 1]);
for (int i=paths.length - 2; i >= 0; --i) {
sb.insert(0,'/');
sb.insert(0,paths[i]);
assetNames.add(0,sb.toString());
}
for (String assetName : assetNames) {
try {
TextureKey key=new TextureKey(assetName);
key.setAsCube(false);
key.setFlipY(true);
key.setGenerateMips(generateMipmaps);
AssetInfo info=assetManager.locateAsset(key);
if (info != null) {
Texture texture=assetManager.loadTexture(key);
result=texture;
texture.setKey(key);
return result;
}
}
 catch (AssetNotFoundException e) {
LOGGER.fine(e.getLocalizedMessage());
}
}
try {
TextureKey key=new TextureKey(name);
assetManager.loadTexture(key);
}
 catch (AssetNotFoundException e) {
LOGGER.fine(e.getLocalizedMessage());
}
}
return result;
}
