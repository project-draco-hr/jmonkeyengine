{
  IndexWrapper indexBuffer=getIndexWrapper(mesh.getBuffer(Type.Index).getData());
  FloatBuffer vertexBuffer=(FloatBuffer)mesh.getBuffer(Type.Position).getData();
  if (mesh.getBuffer(Type.TexCoord) == null)   throw new IllegalArgumentException("Can only generate tangents for " + "meshes with texture coordinates");
  FloatBuffer textureBuffer=(FloatBuffer)mesh.getBuffer(Type.TexCoord).getData();
  VertexData[] vertices=initVertexData(vertexBuffer.capacity() / 3);
  for (int i=0; i < indexBuffer.size() / 3; i++) {
    for (int j=0; j < 3; j++) {
      index[j]=indexBuffer.get(i * 3 + j);
      populateFromBuffer(v[j],vertexBuffer,index[j]);
      populateFromBuffer(t[j],textureBuffer,index[j]);
    }
    TriangleData triData=processTriangle(index,v,t);
    if (triData != null) {
      vertices[index[0]].triangles.add(triData);
      vertices[index[1]].triangles.add(triData);
      vertices[index[2]].triangles.add(triData);
    }
  }
  return vertices;
}
