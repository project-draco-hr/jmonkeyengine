{
  float[][] result=null;
  if (data != null) {
    result=new float[1001][4];
    if (data.length == 1) {
      for (int i=0; i < result.length; ++i) {
        result[i][0]=data[0].r;
        result[i][1]=data[0].g;
        result[i][2]=data[0].b;
        result[i][3]=data[0].a;
      }
    }
 else {
      int currentCursor=0;
      ColorBandData currentData=data[0];
      ColorBandData nextData=data[0];
switch (ipoType) {
case ColorBand.IPO_LINEAR:
        float rDiff=0, gDiff=0, bDiff=0, aDiff=0, posDiff;
      for (int i=0; i < result.length; ++i) {
        posDiff=i - currentData.pos;
        result[i][0]=currentData.r + rDiff * posDiff;
        result[i][1]=currentData.g + gDiff * posDiff;
        result[i][2]=currentData.b + bDiff * posDiff;
        result[i][3]=currentData.a + aDiff * posDiff;
        if (nextData.pos == i) {
          currentData=data[currentCursor++];
          if (currentCursor < data.length) {
            nextData=data[currentCursor];
            int d=nextData.pos - currentData.pos;
            rDiff=(nextData.r - currentData.r) / d;
            gDiff=(nextData.g - currentData.g) / d;
            bDiff=(nextData.b - currentData.b) / d;
            aDiff=(nextData.a - currentData.a) / d;
          }
 else {
            rDiff=gDiff=bDiff=aDiff=0;
          }
        }
      }
    break;
case ColorBand.IPO_BSPLINE:
case ColorBand.IPO_CARDINAL:
  Map<Integer,ColorBandData> cbDataMap=new TreeMap<Integer,ColorBandData>();
for (int i=0; i < data.length; ++i) {
  cbDataMap.put(Integer.valueOf(i),data[i]);
}
if (data[0].pos == 0) {
cbDataMap.put(Integer.valueOf(-1),data[0]);
}
 else {
ColorBandData cbData=data[0].clone();
cbData.pos=0;
cbDataMap.put(Integer.valueOf(-1),cbData);
cbDataMap.put(Integer.valueOf(-2),cbData);
}
if (data[data.length - 1].pos == 1000) {
cbDataMap.put(Integer.valueOf(data.length),data[data.length - 1]);
}
 else {
ColorBandData cbData=data[data.length - 1].clone();
cbData.pos=1000;
cbDataMap.put(Integer.valueOf(data.length),cbData);
cbDataMap.put(Integer.valueOf(data.length + 1),cbData);
}
float[] ipoFactors=new float[4];
float f;
ColorBandData data0=cbDataMap.get(currentCursor - 2);
ColorBandData data1=cbDataMap.get(currentCursor - 1);
ColorBandData data2=cbDataMap.get(currentCursor);
ColorBandData data3=cbDataMap.get(currentCursor + 1);
for (int i=0; i < result.length; ++i) {
if (data2.pos != data1.pos) {
f=(i - data2.pos) / (float)(data1.pos - data2.pos);
f=FastMath.clamp(f,0.0f,1.0f);
}
 else {
f=0.0f;
}
this.getIpoData(f,ipoFactors);
result[i][0]=ipoFactors[3] * data0.r + ipoFactors[2] * data1.r + ipoFactors[1] * data2.r + ipoFactors[0] * data3.r;
result[i][1]=ipoFactors[3] * data0.g + ipoFactors[2] * data1.g + ipoFactors[1] * data2.g + ipoFactors[0] * data3.g;
result[i][2]=ipoFactors[3] * data0.b + ipoFactors[2] * data1.b + ipoFactors[1] * data2.b + ipoFactors[0] * data3.b;
result[i][3]=ipoFactors[3] * data0.a + ipoFactors[2] * data1.a + ipoFactors[1] * data2.a + ipoFactors[0] * data3.a;
result[i][0]=FastMath.clamp(result[i][0],0.0f,1.0f);
result[i][1]=FastMath.clamp(result[i][1],0.0f,1.0f);
result[i][2]=FastMath.clamp(result[i][2],0.0f,1.0f);
result[i][3]=FastMath.clamp(result[i][3],0.0f,1.0f);
if (nextData.pos == i) {
++currentCursor;
data0=cbDataMap.get(currentCursor - 2);
data1=cbDataMap.get(currentCursor - 1);
data2=cbDataMap.get(currentCursor);
data3=cbDataMap.get(currentCursor + 1);
}
}
break;
case ColorBand.IPO_EASE:
float d, a, b, d2;
for (int i=0; i < result.length; ++i) {
if (nextData.pos != currentData.pos) {
d=(i - currentData.pos) / (float)(nextData.pos - currentData.pos);
d2=d * d;
a=3.0f * d2 - 2.0f * d * d2;
b=1.0f - a;
}
 else {
d=a=0.0f;
b=1.0f;
}
result[i][0]=b * currentData.r + a * nextData.r;
result[i][1]=b * currentData.g + a * nextData.g;
result[i][2]=b * currentData.b + a * nextData.b;
result[i][3]=b * currentData.a + a * nextData.a;
if (nextData.pos == i) {
currentData=data[currentCursor++];
if (currentCursor < data.length) {
nextData=data[currentCursor];
}
}
}
break;
case ColorBand.IPO_CONSTANT:
for (int i=0; i < result.length; ++i) {
result[i][0]=currentData.r;
result[i][1]=currentData.g;
result[i][2]=currentData.b;
result[i][3]=currentData.a;
if (nextData.pos == i) {
currentData=data[currentCursor++];
if (currentCursor < data.length) {
nextData=data[currentCursor];
}
}
}
break;
default :
throw new IllegalStateException("Unknown interpolation type: " + ipoType);
}
}
}
return result;
}
