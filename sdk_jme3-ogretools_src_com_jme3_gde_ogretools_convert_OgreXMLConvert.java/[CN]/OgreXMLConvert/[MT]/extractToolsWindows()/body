{
  File path=new File(windows_path);
  if (!path.exists()) {
    path.mkdirs();
  }
  try {
    File scriptsFolderFile=new File(windows_path);
    if (!scriptsFolderFile.exists()) {
      Confirmation msg=new NotifyDescriptor.Confirmation("Error extracting OgreTools!",NotifyDescriptor.DEFAULT_OPTION,NotifyDescriptor.ERROR_MESSAGE);
      DialogDisplayer.getDefault().notify(msg);
      return false;
    }
    BufferedOutputStream dest=null;
    ZipInputStream zis=new ZipInputStream(new BufferedInputStream(getClass().getResourceAsStream("/com/jme3/gde/ogretools/convert/OgreTools-Windows.zip")));
    ZipEntry entry;
    while ((entry=zis.getNextEntry()) != null) {
      int count;
      byte data[]=new byte[BUFFER];
      if (entry.getName().contains(".svn") || entry.getName().contains(".DS_Store")) {
        continue;
      }
      if (entry.isDirectory()) {
        File dir=new File(windows_path + File.separator + entry.getName());
        dir.mkdirs();
        continue;
      }
      FileOutputStream fos=new FileOutputStream(windows_path + File.separator + entry.getName());
      dest=new BufferedOutputStream(fos,BUFFER);
      while ((count=zis.read(data,0,BUFFER)) != -1) {
        dest.write(data,0,count);
      }
      dest.flush();
      dest.close();
    }
    zis.close();
  }
 catch (  IOException ex) {
    Confirmation msg=new NotifyDescriptor.Confirmation("Error extracting OgreXMLTools:\n" + ex.toString(),NotifyDescriptor.DEFAULT_OPTION,NotifyDescriptor.ERROR_MESSAGE);
    DialogDisplayer.getDefault().notify(msg);
    Exceptions.printStackTrace(ex);
    return false;
  }
  return true;
}
