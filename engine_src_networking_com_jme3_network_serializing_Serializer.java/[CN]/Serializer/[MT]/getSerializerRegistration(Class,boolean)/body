{
  SerializerRegistration reg=classRegistrations.get(cls);
  if (reg != null)   return reg;
  for (  Map.Entry<Class,SerializerRegistration> entry : classRegistrations.entrySet()) {
    if (entry.getKey().isAssignableFrom(Serializable.class))     continue;
    if (entry.getKey().isAssignableFrom(cls))     return entry.getValue();
  }
  if (cls.isArray())   return registerClass(cls,arraySerializer);
  if (Serializable.class.isAssignableFrom(cls)) {
    return getExactSerializerRegistration(java.io.Serializable.class);
  }
  if (cls.isAnnotationPresent(Serializable.class)) {
    Serializable serializable=(Serializable)cls.getAnnotation(Serializable.class);
    short classId=serializable.id();
    if (classId != 0) {
      failOnMiss=false;
    }
  }
  if (failOnMiss) {
    Logger.getLogger(Serializer.class.getName()).log(Level.WARNING,"Class has not been registered {0}",cls);
  }
  return registerClass(cls,fieldSerializer);
}
