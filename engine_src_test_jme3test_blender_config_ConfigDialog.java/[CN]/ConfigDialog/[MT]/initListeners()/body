{
  jComboBoxVersionSelection.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent evt){
      blenderKeyConfiguration.lastVersionUsed=jComboBoxVersionSelection.getSelectedItem().toString();
      ConfigDialog.this.reloadFilesList();
    }
  }
);
  jListBlenderFiles.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent evt){
      BlenderKeyConfiguration config=ConfigDialog.this.blenderKeyConfiguration;
      FileListItem selectedItem=(FileListItem)ConfigDialog.this.jListBlenderFiles.getSelectedValue();
      String blenderVersion=config.lastVersionUsed;
      if (selectedItem != null) {
        String blenderFileName=selectedItem.getFile().getName();
        BlenderKey blenderKey=null;
        Map<String,BlenderKey> blenderKeys=config.blenderKeys.get(blenderVersion);
        if (blenderKeys != null) {
          blenderKey=blenderKeys.get(blenderFileName);
          if (blenderKey == null) {
            blenderKey=new BlenderKey(ConfigDialog.this.baseFolderName + '/' + blenderVersion+ '/'+ blenderFileName);
          }
        }
 else {
          blenderKeys=new HashMap<String,BlenderKey>();
          blenderKey=new BlenderKey(ConfigDialog.this.baseFolderName + '/' + blenderVersion+ '/'+ blenderFileName);
          blenderKeys.put(blenderFileName,blenderKey);
          config.blenderKeys.put(blenderVersion,blenderKeys);
        }
        config.lastUsedKey.put(blenderVersion,blenderKey);
        ConfigDialog.this.setBlenderKey(config.lastUsedKey.get(blenderVersion));
      }
 else {
        config.lastUsedKey.put(blenderVersion,null);
      }
    }
  }
);
  jTableProperties.getModel().addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent evt){
      if (evt.getType() == TableModelEvent.UPDATE) {
        BlenderKeyConfiguration config=ConfigDialog.this.blenderKeyConfiguration;
        int row=evt.getFirstRow();
        String name=(String)jTableProperties.getModel().getValueAt(row,0);
        Object value=jTableProperties.getModel().getValueAt(row,1);
        BlenderKey blenderKey=config.lastUsedKey.get(config.lastVersionUsed);
        try {
          Field field=blenderKey.getClass().getDeclaredField(name);
          field.setAccessible(true);
          field.set(blenderKey,value);
        }
 catch (        IllegalArgumentException e) {
          LOGGER.log(Level.SEVERE,e.getMessage(),e);
        }
catch (        SecurityException e) {
          LOGGER.log(Level.SEVERE,e.getMessage(),e);
        }
catch (        IllegalAccessException e) {
          LOGGER.log(Level.SEVERE,e.getMessage(),e);
        }
catch (        NoSuchFieldException e) {
          LOGGER.log(Level.SEVERE,e.getMessage(),e);
        }
      }
    }
  }
);
  jTableAnimations.getModel().addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent evt){
      if (evt.getType() == TableModelEvent.INSERT) {
        jButtonRemoveAnimation.setEnabled(true);
      }
 else       if (evt.getType() == TableModelEvent.DELETE && jTableAnimations.getModel().getRowCount() == 0) {
        jButtonRemoveAnimation.setEnabled(false);
      }
    }
  }
);
  jButtonAddAnimation.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent evt){
      ((DefaultTableModel)jTableAnimations.getModel()).addRow(new Object[]{Boolean.FALSE,"","",Integer.valueOf(1),Integer.valueOf(25)});
    }
  }
);
  jButtonRemoveAnimation.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent evt){
      int row=jTableAnimations.getSelectedRow();
      if (row >= 0) {
        ((DefaultTableModel)jTableAnimations.getModel()).removeRow(row);
      }
    }
  }
);
  jButtonOK.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent evt){
      ConfigDialog.this.storeConfig(blenderKeyConfiguration);
      ConfigDialog.this.dispose();
    }
  }
);
  jButtonCancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent evt){
      ConfigDialog.this.storeConfig(blenderKeyConfiguration);
      blenderKeyConfiguration=null;
      ConfigDialog.this.dispose();
    }
  }
);
}
