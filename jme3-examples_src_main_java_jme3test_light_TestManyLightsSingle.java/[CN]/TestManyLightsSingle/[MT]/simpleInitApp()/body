{
  renderManager.setPreferredLightMode(lm);
  renderManager.setSinglePassLightBatchSize(lightNum);
  flyCam.setMoveSpeed(10);
  Node scene=(Node)assetManager.loadModel("Scenes/ManyLights/Main.scene");
  rootNode.attachChild(scene);
  Node n=(Node)rootNode.getChild(0);
  LightList lightList=n.getWorldLightList();
  Geometry g=(Geometry)n.getChild("Grid-geom-1");
  g.getMaterial().setColor("Ambient",new ColorRGBA(0.2f,0.2f,0.2f,1f));
  Box boxMesh=new Box(1f,1f,1f);
  Geometry boxGeo=new Geometry("Colored Box",boxMesh);
  Material boxMat=g.getMaterial().clone();
  boxMat.setBoolean("UseMaterialColors",true);
  boxMat.setColor("Ambient",new ColorRGBA(0.2f,0.2f,0.2f,1f));
  boxMat.setColor("Diffuse",ColorRGBA.Blue);
  boxGeo.setMaterial(boxMat);
  int nb=0;
  for (  Light light : lightList) {
    nb++;
    PointLight p=(PointLight)light;
    if (nb > 60) {
      n.removeLight(light);
    }
 else {
      LightNode ln=new LightNode("l",light);
      n.attachChild(ln);
      ln.setLocalTranslation(p.getPosition());
      int rand=FastMath.nextRandomInt(0,3);
switch (rand) {
case 0:
        light.setColor(ColorRGBA.Red);
      break;
case 1:
    light.setColor(ColorRGBA.Yellow);
  break;
case 2:
light.setColor(ColorRGBA.Green);
break;
case 3:
light.setColor(ColorRGBA.Orange);
break;
}
}
Geometry b=boxGeo.clone();
n.attachChild(b);
b.setLocalTranslation(p.getPosition().x,2,p.getPosition().z);
}
cam.setLocation(new Vector3f(-1.8901939f,29.34097f,73.07533f));
cam.setRotation(new Quaternion(0.0021000702f,0.971012f,-0.23886925f,0.008527749f));
BasicProfilerState profiler=new BasicProfilerState(true);
profiler.setGraphScale(1000f);
flyCam.setDragToRotate(true);
flyCam.setMoveSpeed(50);
inputManager.addListener(new ActionListener(){
public void onAction(String name,boolean isPressed,float tpf){
if (name.equals("toggle") && isPressed) {
if (lm == TechniqueDef.LightMode.SinglePass) {
lm=TechniqueDef.LightMode.MultiPass;
}
 else {
lm=TechniqueDef.LightMode.SinglePass;
}
renderManager.setPreferredLightMode(lm);
}
if (name.equals("lightsUp") && isPressed) {
lightNum++;
renderManager.setSinglePassLightBatchSize(lightNum);
helloText.setText("nb lights per batch : " + lightNum);
}
if (name.equals("lightsDown") && isPressed) {
lightNum--;
renderManager.setSinglePassLightBatchSize(lightNum);
helloText.setText("nb lights per batch : " + lightNum);
}
}
}
,"toggle","lightsUp","lightsDown");
inputManager.addMapping("toggle",new KeyTrigger(KeyInput.KEY_SPACE));
inputManager.addMapping("lightsUp",new KeyTrigger(KeyInput.KEY_UP));
inputManager.addMapping("lightsDown",new KeyTrigger(KeyInput.KEY_DOWN));
SpotLight spot=new SpotLight();
spot.setDirection(new Vector3f(-1f,-1f,-1f).normalizeLocal());
spot.setColor(ColorRGBA.Blue.mult(5));
spot.setSpotOuterAngle(FastMath.DEG_TO_RAD * 20);
spot.setSpotInnerAngle(FastMath.DEG_TO_RAD * 5);
spot.setPosition(new Vector3f(10,10,20));
rootNode.addLight(spot);
DirectionalLight dl=new DirectionalLight();
dl.setDirection(new Vector3f(-1,-1,1));
rootNode.addLight(dl);
AmbientLight al=new AmbientLight();
al.setColor(new ColorRGBA(0.2f,0.2f,0.2f,1f));
rootNode.addLight(al);
guiNode.detachAllChildren();
guiFont=assetManager.loadFont("Interface/Fonts/Default.fnt");
helloText=new BitmapText(guiFont,false);
helloText.setSize(guiFont.getCharSet().getRenderedSize());
helloText.setText("nb lights per batch : " + lightNum);
helloText.setLocalTranslation(300,helloText.getLineHeight(),0);
guiNode.attachChild(helloText);
}
