{
  tessellationMaterial=new Material(getAssetManager(),"Materials/Tess/SimpleTess.j3md");
  tessellationMaterial.setInt("TessellationFactor",tessFactor);
  tessellationMaterial.getAdditionalRenderState().setWireframe(true);
  Quad quad=new Quad(10,10);
  quad.clearBuffer(VertexBuffer.Type.Index);
  quad.setBuffer(VertexBuffer.Type.Index,4,BufferUtils.createIntBuffer(0,1,2,3));
  quad.setMode(Mesh.Mode.Patch);
  quad.setPatchVertexCount(4);
  Geometry geometry=new Geometry("tessTest",quad);
  geometry.setMaterial(tessellationMaterial);
  rootNode.attachChild(geometry);
  getInputManager().addMapping("TessUp",new KeyTrigger(KeyInput.KEY_O));
  getInputManager().addMapping("TessDo",new KeyTrigger(KeyInput.KEY_L));
  getInputManager().addListener(new AnalogListener(){
    @Override public void onAnalog(    String name,    float value,    float tpf){
      if (name.equals("TessUp")) {
        tessFactor++;
        enqueue(new Callable<Boolean>(){
          @Override public Boolean call() throws Exception {
            tessellationMaterial.setInt("TessellationFactor",tessFactor);
            return true;
          }
        }
);
      }
      if (name.equals("TessDo")) {
        tessFactor--;
        enqueue(new Callable<Boolean>(){
          @Override public Boolean call() throws Exception {
            tessellationMaterial.setInt("TessellationFactor",tessFactor);
            return true;
          }
        }
);
      }
    }
  }
,"TessUp","TessDo");
}
