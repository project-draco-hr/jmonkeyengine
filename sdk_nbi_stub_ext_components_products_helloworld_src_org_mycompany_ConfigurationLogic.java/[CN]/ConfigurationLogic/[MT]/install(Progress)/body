{
  final Product product=getProduct();
  final File installLocation=product.getInstallationLocation();
  String appName=ResourceUtils.getString(ConfigurationLogic.class,"CL.app.name");
  if (SystemUtils.isMacOS()) {
    File f=new File(installLocation.getParentFile(),ICON_MACOSX);
    if (!f.exists()) {
      try {
        FileUtils.writeFile(f,ResourceUtils.getResource(ICON_MACOSX_RESOURCE,getClass().getClassLoader()));
        getProduct().getInstalledFiles().add(f);
      }
 catch (      IOException e) {
        LogManager.log("... cannot handle icns icon " + f,e);
      }
    }
    File shortcut=new File(installLocation.getParentFile().getParent() + "/MacOS/executable");
    if (shortcut.exists()) {
      try {
        shortcut.renameTo(new File(installLocation.getParentFile().getParent() + "/MacOS/" + appName));
        getProduct().getInstalledFiles().add(shortcut.getAbsoluteFile());
      }
 catch (      IOException e) {
        LogManager.log("... cannot rename executable " + f,e);
      }
    }
    try {
      File plist=new File(installLocation.getParentFile().getParentFile(),"Info.plist");
      FileUtils.modifyFile(plist,"icon.icns",appName + ".icns");
      FileUtils.modifyFile(plist,"executable",appName);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (Boolean.parseBoolean(getProperty(HelloWorldPanel.CREATE_DESKTOP_SHORTCUT_PROPERTY))) {
    LogManager.logIndent("creating the desktop shortcut for the application");
    if (!SystemUtils.isMacOS()) {
      try {
        progress.setDetail(getString("CL.install.desktop"));
        if (SystemUtils.isCurrentUserAdmin()) {
          LogManager.log("... current user is an administrator " + "-- creating the shortcut for all users");
          SystemUtils.createShortcut(getDesktopShortcut(installLocation),LocationType.ALL_USERS_DESKTOP);
          product.setProperty(DESKTOP_SHORTCUT_LOCATION_PROPERTY,ALL_USERS_PROPERTY_VALUE);
        }
 else {
          LogManager.log("... current user is an ordinary user " + "-- creating the shortcut for the current " + "user only");
          SystemUtils.createShortcut(getDesktopShortcut(installLocation),LocationType.CURRENT_USER_DESKTOP);
          getProduct().setProperty(DESKTOP_SHORTCUT_LOCATION_PROPERTY,CURRENT_USER_PROPERTY_VALUE);
        }
      }
 catch (      NativeException e) {
        LogManager.unindent();
        LogManager.log(getString("CL.install.error.desktop"),e);
      }
    }
 else {
      LogManager.log("... skipping this step as we're on Mac OS");
    }
  }
  LogManager.logUnindent("... done");
  if (Boolean.parseBoolean(getProperty(HelloWorldPanel.CREATE_START_MENU_SHORTCUT_PROPERTY))) {
    LogManager.logIndent("creating the start menu shortcut for the application");
    try {
      progress.setDetail(getString("CL.install.start.menu"));
      if (SystemUtils.isCurrentUserAdmin()) {
        LogManager.log("... current user is an administrator " + "-- creating the shortcut for all users");
        SystemUtils.createShortcut(getStartMenuShortcut(installLocation),LocationType.ALL_USERS_START_MENU);
        getProduct().setProperty(START_MENU_SHORTCUT_LOCATION_PROPERTY,ALL_USERS_PROPERTY_VALUE);
      }
 else {
        LogManager.log("... current user is an ordinary user " + "-- creating the shortcut for the current " + "user only");
        SystemUtils.createShortcut(getStartMenuShortcut(installLocation),LocationType.CURRENT_USER_START_MENU);
        getProduct().setProperty(START_MENU_SHORTCUT_LOCATION_PROPERTY,CURRENT_USER_PROPERTY_VALUE);
      }
    }
 catch (    NativeException e) {
      LogManager.log(getString("CL.install.error.start.menu"),e);
    }
    LogManager.logUnindent("... done");
  }
  if (!SystemUtils.isMacOS()) {
    File javaHome=new File(System.getProperty("java.home")).getParentFile();
    File target=new File(installLocation,"jdk");
    try {
      FileUtils.copyFile(javaHome,target,true);
    }
 catch (    IOException e) {
      throw new InstallationException("Cannot copy JDK",e);
    }
    File binDir=new File(target,"bin");
    for (    File file : binDir.listFiles()) {
      try {
        file.setExecutable(true);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    SystemUtils.getNativeUtils().addUninstallerJVM(new LauncherResource(false,target));
  }
}
