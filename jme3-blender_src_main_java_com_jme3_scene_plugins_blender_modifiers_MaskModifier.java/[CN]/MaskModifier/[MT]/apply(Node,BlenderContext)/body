{
  if (invalid) {
    LOGGER.log(Level.WARNING,"Mirror modifier is invalid! Cannot be applied to: {0}",node.getName());
  }
 else {
    TemporalMesh temporalMesh=this.getTemporalMesh(node);
    if (temporalMesh != null) {
      List<String> vertexGroupsToRemove=new ArrayList<String>();
      if (vertexGroupName != null) {
        vertexGroupsToRemove.add(vertexGroupName);
      }
 else       if (pArmatureObject != null && pArmatureObject.isNotNull()) {
        try {
          Structure armatureObject=pArmatureObject.fetchData().get(0);
          Structure armatureStructure=((Pointer)armatureObject.getFieldValue("data")).fetchData().get(0);
          List<Structure> bonebase=((Structure)armatureStructure.getFieldValue("bonebase")).evaluateListBase();
          vertexGroupsToRemove.addAll(this.readBoneNames(bonebase));
        }
 catch (        BlenderFileException e) {
          LOGGER.log(Level.SEVERE,"Cannot load armature object for the mask modifier. Cause: {0}",e.getLocalizedMessage());
          LOGGER.log(Level.SEVERE,"Mask modifier will NOT be applied to node named: {0}",node.getName());
        }
      }
 else {
        Collection<String> vertexGroupNames=temporalMesh.getVertexGroupNames();
        if (vertexGroupNames.size() == 0 && !invertMask || vertexGroupNames.size() > 0 && invertMask) {
          temporalMesh.clear();
        }
      }
      if (vertexGroupsToRemove.size() > 0) {
        List<Integer> vertsToBeRemoved=new ArrayList<Integer>();
        for (int i=0; i < temporalMesh.getVertexCount(); ++i) {
          Map<String,Float> vertexGroups=temporalMesh.getVertexGroups(i);
          boolean hasVertexGroup=false;
          if (vertexGroups != null) {
            for (            String groupName : vertexGroupsToRemove) {
              Float weight=vertexGroups.get(groupName);
              if (weight != null && weight > 0) {
                hasVertexGroup=true;
                break;
              }
            }
          }
          if (!hasVertexGroup && !invertMask || hasVertexGroup && invertMask) {
            vertsToBeRemoved.add(i);
          }
        }
        Collections.reverse(vertsToBeRemoved);
        for (        Integer vertexIndex : vertsToBeRemoved) {
          temporalMesh.removeVertexAt(vertexIndex);
        }
      }
    }
 else {
      LOGGER.log(Level.WARNING,"Cannot find temporal mesh for node: {0}. The modifier will NOT be applied!",node);
    }
  }
}
