{
  int radiusStepsX=(int)(radius / ((Node)terrain).getWorldScale().x);
  int radiusStepsZ=(int)(radius / ((Node)terrain).getWorldScale().z);
  float xStepAmount=((Node)terrain).getWorldScale().x;
  float zStepAmount=((Node)terrain).getWorldScale().z;
  List<Vector2f> locs=new ArrayList<Vector2f>();
  List<Float> heights=new ArrayList<Float>();
  for (int z=-radiusStepsZ; z < radiusStepsZ; z++) {
    for (int x=-radiusStepsX; x < radiusStepsX; x++) {
      float locX=worldLoc.x + (x * xStepAmount);
      float locZ=worldLoc.z + (z * zStepAmount);
      if (ToolUtils.isInMesh(locX - worldLoc.x,locZ - worldLoc.z,radius,mesh)) {
        float h=ToolUtils.calculateHeight(radius,heightDir,locX - worldLoc.x,locZ - worldLoc.z);
        locs.add(new Vector2f(locX,locZ));
        heights.add(h);
      }
    }
  }
  terrain.adjustHeight(locs,heights);
  ((Node)terrain).updateModelBound();
}
