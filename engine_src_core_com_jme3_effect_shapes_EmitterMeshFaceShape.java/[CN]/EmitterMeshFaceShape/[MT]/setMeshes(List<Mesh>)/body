{
  this.vertices=new ArrayList<List<Vector3f>>(meshes.size());
  this.normals=new ArrayList<List<Vector3f>>(meshes.size());
  for (  Mesh mesh : meshes) {
    Vector3f[] vertexTable=BufferUtils.getVector3Array(mesh.getFloatBuffer(Type.Position));
    int[] indices=new int[3];
    List<Vector3f> vertices=new ArrayList<Vector3f>(mesh.getTriangleCount() * 3);
    List<Vector3f> normals=new ArrayList<Vector3f>(mesh.getTriangleCount());
    for (int i=0; i < mesh.getTriangleCount(); ++i) {
      mesh.getTriangle(i,indices);
      vertices.add(vertexTable[indices[0]]);
      vertices.add(vertexTable[indices[1]]);
      vertices.add(vertexTable[indices[2]]);
      normals.add(FastMath.computeNormal(vertexTable[indices[0]],vertexTable[indices[1]],vertexTable[indices[2]]));
    }
    this.vertices.add(vertices);
    this.normals.add(normals);
  }
}
