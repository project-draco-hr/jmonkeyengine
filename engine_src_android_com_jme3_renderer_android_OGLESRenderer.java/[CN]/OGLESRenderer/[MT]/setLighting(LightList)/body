{
  if (list.size() == 0) {
    gl.glDisable(gl.GL_LIGHTING);
    return;
  }
  gl.glEnable(gl.GL_LIGHTING);
  gl.glShadeModel(gl.GL_SMOOTH);
  float[] temp=new float[4];
  gl.glPushMatrix();
  gl.glLoadIdentity();
  for (int i=0; i < list.size() + 1; i++) {
    if (list.size() <= i) {
      gl.glDisable(gl.GL_LIGHT0 + i);
      break;
    }
    Light l=list.get(i);
    int lightId=gl.GL_LIGHT0 + i;
    ColorRGBA color=l.getColor();
    color.toArray(temp);
    gl.glEnable(lightId);
    gl.glLightfv(lightId,gl.GL_DIFFUSE,temp,0);
    gl.glLightfv(lightId,gl.GL_SPECULAR,temp,0);
    ColorRGBA.Black.toArray(temp);
    gl.glLightfv(lightId,gl.GL_AMBIENT,temp,0);
switch (l.getType()) {
case Directional:
      DirectionalLight dl=(DirectionalLight)l;
    dl.getDirection().toArray(temp);
  temp[3]=0f;
gl.glLightfv(lightId,gl.GL_POSITION,temp,0);
break;
case Point:
PointLight pl=(PointLight)l;
pl.getPosition().toArray(temp);
temp[3]=1f;
gl.glLightfv(lightId,gl.GL_POSITION,temp,0);
break;
}
}
gl.glPopMatrix();
}
