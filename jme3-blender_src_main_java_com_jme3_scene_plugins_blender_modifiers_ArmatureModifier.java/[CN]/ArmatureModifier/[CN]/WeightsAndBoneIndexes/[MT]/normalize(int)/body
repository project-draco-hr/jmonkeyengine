{
  if (this.size() > maximumSize) {
    float lowestWeight=Float.MAX_VALUE;
    int lowestWeightIndex=-1;
    HashMap<Integer,Float> msw=new HashMap<Integer,Float>(maximumSize);
    for (    Entry<Integer,Float> entry : this.entrySet()) {
      if (msw.size() < maximumSize) {
        msw.put(entry.getKey(),entry.getValue());
        if (entry.getValue() < lowestWeight) {
          lowestWeight=entry.getValue();
          lowestWeightIndex=entry.getKey();
        }
      }
 else       if (entry.getValue() > lowestWeight) {
        msw.remove(lowestWeightIndex);
        msw.put(lowestWeightIndex,lowestWeight);
        lowestWeight=Float.MAX_VALUE;
        for (        Entry<Integer,Float> e : msw.entrySet()) {
          if (e.getValue() < lowestWeight) {
            lowestWeight=e.getValue();
            lowestWeightIndex=e.getKey();
          }
        }
      }
    }
    this.clear();
    this.putAll(msw);
  }
  float sum=0;
  for (  Entry<Integer,Float> entry : this.entrySet()) {
    sum+=entry.getValue();
  }
  if (sum != 0 && sum != 1) {
    for (    Entry<Integer,Float> entry : this.entrySet()) {
      entry.setValue(entry.getValue() / sum);
    }
  }
}
