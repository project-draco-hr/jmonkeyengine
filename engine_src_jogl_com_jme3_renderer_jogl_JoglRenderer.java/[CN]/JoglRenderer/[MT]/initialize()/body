{
  GL gl=GLContext.getCurrentGL();
  logger.log(Level.INFO,"Vendor: {0}",gl.glGetString(GL.GL_VENDOR));
  logger.log(Level.INFO,"Renderer: {0}",gl.glGetString(GL.GL_RENDERER));
  logger.log(Level.INFO,"Version: {0}",gl.glGetString(GL.GL_VERSION));
  applyRenderState(RenderState.DEFAULT);
  powerOf2=true;
  hardwareMips=true;
  vbo=true;
  if (gl.isExtensionAvailable("GL_VERSION_2_0")) {
    caps.add(Caps.OpenGL20);
  }
  if (gl.isExtensionAvailable("GL_VERSION_2_1")) {
    caps.add(Caps.OpenGL21);
  }
  if (gl.isExtensionAvailable("GL_VERSION_3_0")) {
    caps.add(Caps.OpenGL30);
  }
  String versionStr=gl.glGetString(GL2ES2.GL_SHADING_LANGUAGE_VERSION);
  if (versionStr == null || versionStr.equals("")) {
    glslVer=-1;
  }
 else {
    int spaceIdx=versionStr.indexOf(" ");
    if (spaceIdx >= 1) {
      versionStr=versionStr.substring(0,spaceIdx);
    }
    float version=Float.parseFloat(versionStr);
    glslVer=(int)(version * 100);
switch (glslVer) {
default :
      if (glslVer < 400) {
        break;
      }
case 400:
case 330:
case 150:
    caps.add(Caps.GLSL150);
case 140:
  caps.add(Caps.GLSL140);
case 130:
caps.add(Caps.GLSL130);
case 120:
caps.add(Caps.GLSL120);
case 110:
caps.add(Caps.GLSL110);
case 100:
caps.add(Caps.GLSL100);
break;
}
}
gl.glGetIntegerv(GL2GL3.GL_DRAW_BUFFER,intBuf1);
initialDrawBuf=intBuf1.get(0);
gl.glGetIntegerv(GL2GL3.GL_READ_BUFFER,intBuf1);
initialReadBuf=intBuf1.get(0);
gl.glGetIntegerv(GL2ES2.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,intBuf16);
vertexTextureUnits=intBuf16.get(0);
logger.log(Level.FINER,"VTF Units: {0}",vertexTextureUnits);
if (vertexTextureUnits > 0) {
caps.add(Caps.VertexTextureFetch);
}
gl.glGetIntegerv(GL2ES2.GL_MAX_TEXTURE_IMAGE_UNITS,intBuf16);
fragTextureUnits=intBuf16.get(0);
logger.log(Level.FINER,"Texture Units: {0}",fragTextureUnits);
gl.glGetIntegerv(GL2GL3.GL_MAX_VERTEX_UNIFORM_COMPONENTS,intBuf16);
vertexUniforms=intBuf16.get(0);
logger.log(Level.FINER,"Vertex Uniforms: {0}",vertexUniforms);
gl.glGetIntegerv(GL2GL3.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS,intBuf16);
fragUniforms=intBuf16.get(0);
logger.log(Level.FINER,"Fragment Uniforms: {0}",fragUniforms);
gl.glGetIntegerv(GL2ES2.GL_MAX_VERTEX_ATTRIBS,intBuf16);
vertexAttribs=intBuf16.get(0);
logger.log(Level.FINER,"Vertex Attributes: {0}",vertexAttribs);
gl.glGetIntegerv(GL2GL3.GL_MAX_VARYING_FLOATS,intBuf16);
int varyingFloats=intBuf16.get(0);
logger.log(Level.FINER,"Varying Floats: {0}",varyingFloats);
gl.glGetIntegerv(GL.GL_SUBPIXEL_BITS,intBuf16);
int subpixelBits=intBuf16.get(0);
logger.log(Level.FINER,"Subpixel Bits: {0}",subpixelBits);
gl.glGetIntegerv(GL2GL3.GL_MAX_ELEMENTS_VERTICES,intBuf16);
maxVertCount=intBuf16.get(0);
logger.log(Level.FINER,"Preferred Batch Vertex Count: {0}",maxVertCount);
gl.glGetIntegerv(GL2GL3.GL_MAX_ELEMENTS_INDICES,intBuf16);
maxTriCount=intBuf16.get(0);
logger.log(Level.FINER,"Preferred Batch Index Count: {0}",maxTriCount);
gl.glGetIntegerv(GL.GL_MAX_TEXTURE_SIZE,intBuf16);
maxTexSize=intBuf16.get(0);
logger.log(Level.FINER,"Maximum Texture Resolution: {0}",maxTexSize);
gl.glGetIntegerv(GL.GL_MAX_CUBE_MAP_TEXTURE_SIZE,intBuf16);
maxCubeTexSize=intBuf16.get(0);
logger.log(Level.FINER,"Maximum CubeMap Resolution: {0}",maxCubeTexSize);
caps.add(Caps.FloatColorBuffer);
caps.add(Caps.FloatDepthBuffer);
caps.add(Caps.ARBprogram);
caps.add(Caps.TextureBuffer);
caps.add(Caps.FloatTexture);
caps.add(Caps.VertexBufferArray);
boolean latc=gl.isExtensionAvailable("GL_EXT_texture_compression_latc");
boolean atdc=gl.isExtensionAvailable("GL_ATI_texture_compression_3dc");
if (latc || atdc) {
caps.add(Caps.TextureCompressionLATC);
if (atdc && !latc) {
tdc=true;
}
}
caps.add(Caps.PackedFloatColorBuffer);
caps.add(Caps.PackedFloatTexture);
caps.add(Caps.TextureArray);
caps.add(Caps.SharedExponentTexture);
if (gl.isExtensionAvailable("GL_EXT_framebuffer_object")) {
caps.add(Caps.FrameBuffer);
if (gl.isExtensionAvailable("GL_ARB_texture_multisample")) {
caps.add(Caps.TextureMultisample);
gl.glGetIntegerv(GL2.GL_MAX_COLOR_TEXTURE_SAMPLES,intBuf16);
maxColorTexSamples=intBuf16.get(0);
logger.log(Level.FINER,"Texture Multisample Color Samples: {0}",maxColorTexSamples);
gl.glGetIntegerv(GL2.GL_MAX_DEPTH_TEXTURE_SAMPLES,intBuf16);
maxDepthTexSamples=intBuf16.get(0);
logger.log(Level.FINER,"Texture Multisample Depth Samples: {0}",maxDepthTexSamples);
}
}
gl.glGetIntegerv(GL.GL_MAX_RENDERBUFFER_SIZE,intBuf16);
maxRBSize=intBuf16.get(0);
logger.log(Level.FINER,"FBO RB Max Size: {0}",maxRBSize);
gl.glGetIntegerv(GL2GL3.GL_MAX_COLOR_ATTACHMENTS,intBuf16);
maxFBOAttachs=intBuf16.get(0);
logger.log(Level.FINER,"FBO Max renderbuffers: {0}",maxFBOAttachs);
if (gl.isExtensionAvailable("GL_EXT_framebuffer_multisample")) {
caps.add(Caps.FrameBufferMultisample);
gl.glGetIntegerv(GL2GL3.GL_MAX_SAMPLES,intBuf16);
maxFBOSamples=intBuf16.get(0);
logger.log(Level.FINER,"FBO Max Samples: {0}",maxFBOSamples);
}
if (gl.isExtensionAvailable("GL_ARB_draw_buffers")) {
caps.add(Caps.FrameBufferMRT);
gl.glGetIntegerv(GL2GL3.GL_MAX_DRAW_BUFFERS,intBuf16);
maxMRTFBOAttachs=intBuf16.get(0);
logger.log(Level.FINER,"FBO Max MRT renderbuffers: {0}",maxMRTFBOAttachs);
}
gl.glGetIntegerv(GL.GL_SAMPLE_BUFFERS,intBuf16);
boolean available=intBuf16.get(0) != 0;
gl.glGetIntegerv(GL.GL_SAMPLES,intBuf16);
int samples=intBuf16.get(0);
logger.log(Level.FINER,"Samples: {0}",samples);
boolean enabled=gl.glIsEnabled(GL.GL_MULTISAMPLE);
if (samples > 0 && available && !enabled) {
gl.glEnable(GL.GL_MULTISAMPLE);
}
}
