{
  int target=convertTextureType(tex.getType());
  int minFilter=convertMinFilter(tex.getMinFilter());
  int magFilter=convertMagFilter(tex.getMagFilter());
  gl.glTexParameteri(target,gl.GL_TEXTURE_MIN_FILTER,minFilter);
  gl.glTexParameteri(target,gl.GL_TEXTURE_MAG_FILTER,magFilter);
switch (tex.getType()) {
case ThreeDimensional:
case CubeMap:
    gl.glTexParameteri(target,gl.GL_TEXTURE_WRAP_R,convertWrapMode(tex.getWrap(WrapAxis.R)));
case TwoDimensional:
  gl.glTexParameteri(target,gl.GL_TEXTURE_WRAP_T,convertWrapMode(tex.getWrap(WrapAxis.T)));
gl.glTexParameteri(target,gl.GL_TEXTURE_WRAP_S,convertWrapMode(tex.getWrap(WrapAxis.S)));
break;
default :
throw new UnsupportedOperationException("Unknown texture type: " + tex.getType());
}
if (tex.getShadowCompareMode() != Texture.ShadowCompareMode.Off) {
gl.glTexParameteri(target,GL.GL_TEXTURE_COMPARE_MODE,GL.GL_COMPARE_R_TO_TEXTURE);
gl.glTexParameteri(target,GL.GL_DEPTH_TEXTURE_MODE,GL.GL_INTENSITY);
if (tex.getShadowCompareMode() == Texture.ShadowCompareMode.GreaterOrEqual) {
gl.glTexParameteri(target,GL.GL_TEXTURE_COMPARE_FUNC,GL.GL_GEQUAL);
}
 else {
gl.glTexParameteri(target,GL.GL_TEXTURE_COMPARE_FUNC,GL.GL_LEQUAL);
}
}
}
