{
  Integer methodIdInt=remoteObj.methodMap.get(method);
  if (methodIdInt == null)   throw new RuntimeException("Method not implemented by remote object owner: " + method);
  boolean needReturn=method.getReturnType() != void.class;
  short objectId=remoteObj.objectId;
  short methodId=methodIdInt.shortValue();
  RemoteMethodCallMessage call=new RemoteMethodCallMessage();
  call.methodId=methodId;
  call.objectId=objectId;
  call.args=args;
  Invocation invoke=null;
  if (needReturn) {
    call.invocationId=invocationIdCounter++;
    invoke=new Invocation();
    pendingInvocations.put(call.invocationId,invoke);
  }
  if (server != null) {
    remoteObj.client.send(call);
    logger.log(Level.INFO,"Server: Sending {0}",call);
  }
 else {
    client.send(call);
    logger.log(Level.INFO,"Client: Sending {0}",call);
  }
  if (invoke != null) {
synchronized (invoke) {
      while (!invoke.available) {
        try {
          invoke.wait();
        }
 catch (        InterruptedException ex) {
          ex.printStackTrace();
        }
      }
    }
    pendingInvocations.remove(call.invocationId);
    return invoke.retVal;
  }
 else {
    return null;
  }
}
