{
  float u=0, v=0, bias=0;
  int face;
  float absX=abs(texelVect.x);
  float absY=abs(texelVect.y);
  float absZ=abs(texelVect.z);
  float max=Math.max(Math.max(absX,absY),absZ);
  if (max == absX) {
    face=texelVect.x > 0 ? 0 : 1;
  }
 else   if (max == absY) {
    face=texelVect.y > 0 ? 2 : 3;
  }
 else {
    face=texelVect.z > 0 ? 4 : 5;
  }
switch (face) {
case 0:
    bias=1f / texelVect.x;
  u=-texelVect.z;
v=-texelVect.y;
break;
case 1:
bias=-1f / texelVect.x;
u=texelVect.z;
v=-texelVect.y;
break;
case 2:
bias=1f / texelVect.y;
u=texelVect.x;
v=texelVect.z;
break;
case 3:
bias=-1f / texelVect.y;
u=texelVect.x;
v=-texelVect.z;
break;
case 4:
bias=1f / texelVect.z;
u=texelVect.x;
v=-texelVect.y;
break;
case 5:
bias=-1f / texelVect.z;
u=-texelVect.x;
v=-texelVect.y;
break;
}
u*=bias;
v*=bias;
if (fixSeamsMethod == FixSeamsMethod.Stretch) {
u=Math.round((u + 1.0f) * ((float)mapSize - 1.0f) * 0.5f);
v=Math.round((v + 1.0f) * ((float)mapSize - 1.0f) * 0.5f);
}
 else {
u=Math.round((u + 1.0f) * ((float)mapSize) * 0.5f - 0.5f);
v=Math.round((v + 1.0f) * ((float)mapSize) * 0.5f - 0.5f);
}
store.set(u,v);
return face;
}
