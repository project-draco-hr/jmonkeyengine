{
  this.jmeRootNode=jmeRootNode;
  this.currentFileObject=currentFileObject;
  rootNode=jmeRootNode.getLookup().lookup(Node.class);
  toolsNode=new Node("ToolsNode");
  toolController=new SceneToolController(toolsNode,currentFileObject.getLookup().lookup(ProjectAssetManager.class));
  toolController.setShowSelection(true);
  result=Utilities.actionsGlobalContext().lookupResult(JmeSpatial.class);
  result.addLookupListener(this);
  toolsNode.addLight(new DirectionalLight());
  Node track=(Node)new DesktopAssetManager(true).loadModel("Models/Racetrack/Raceway.j3o");
  track.getChild("Grass").getControl(RigidBodyControl.class).setPhysicsLocation(new Vector3f(30,-1,0));
  track.getChild("Grass").getControl(RigidBodyControl.class).setPhysicsRotation(new Quaternion().fromAngleAxis(FastMath.HALF_PI * 0.68f,Vector3f.UNIT_Y).toRotationMatrix());
  track.getChild("Road").getControl(RigidBodyControl.class).setPhysicsLocation(new Vector3f(30,0,0));
  track.getChild("Road").getControl(RigidBodyControl.class).setPhysicsRotation(new Quaternion().fromAngleAxis(FastMath.HALF_PI * 0.68f,Vector3f.UNIT_Y).toRotationMatrix());
  toolsNode.attachChild(track);
  bulletState=new BulletAppState();
  result2=Utilities.actionsGlobalContext().lookupResult(VehicleWheel.class);
  LookupListener listener=new LookupListener(){
    public void resultChanged(    LookupEvent ev){
      for (Iterator<? extends VehicleWheel> it=result2.allInstances().iterator(); it.hasNext(); ) {
        VehicleWheel wheel=it.next();
        toolController.updateSelection(wheel.getWheelSpatial());
      }
    }
  }
;
  result2.addLookupListener(listener);
}
