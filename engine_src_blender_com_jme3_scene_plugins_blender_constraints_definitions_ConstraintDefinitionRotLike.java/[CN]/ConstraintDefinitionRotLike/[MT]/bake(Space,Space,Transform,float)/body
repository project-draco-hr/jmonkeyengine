{
  Transform ownerTransform=this.getOwnerTransform(ownerSpace);
  Quaternion ownerRotation=ownerTransform.getRotation();
  ownerAngles=ownerRotation.toAngles(ownerAngles);
  targetAngles=targetTransform.getRotation().toAngles(targetAngles);
  Quaternion startRotation=ownerRotation.clone();
  Quaternion offset=Quaternion.IDENTITY;
  if ((flag & ROTLIKE_OFFSET) != 0) {
    offset=startRotation;
  }
  if ((flag & ROTLIKE_X) != 0) {
    ownerAngles[0]=targetAngles[0];
    if ((flag & ROTLIKE_X_INVERT) != 0) {
      ownerAngles[0]=-ownerAngles[0];
    }
  }
  if ((flag & ROTLIKE_Y) != 0) {
    ownerAngles[1]=targetAngles[1];
    if ((flag & ROTLIKE_Y_INVERT) != 0) {
      ownerAngles[1]=-ownerAngles[1];
    }
  }
  if ((flag & ROTLIKE_Z) != 0) {
    ownerAngles[2]=targetAngles[2];
    if ((flag & ROTLIKE_Z_INVERT) != 0) {
      ownerAngles[2]=-ownerAngles[2];
    }
  }
  ownerRotation.fromAngles(ownerAngles).multLocal(offset);
  if (influence < 1.0f) {
  }
  this.applyOwnerTransform(ownerTransform,ownerSpace);
}
