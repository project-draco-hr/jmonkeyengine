{
  Image image=ImageUtils.createEmptyImage(Format.RGB8,size,size,6);
  PixelInputOutput pixelIO=PixelIOFactory.getPixelIO(image.getFormat());
  TexturePixel pixel=new TexturePixel();
  float delta=1 / (float)(size - 1);
  float sideV, sideS=1, forwardU=1, forwardV, upS;
  TempVars tempVars=TempVars.get();
  CastFunction castFunction=CAST_FUNCTIONS[blenderContext.getBlenderKey().getSkyGeneratedTextureShape().ordinal()];
  float castRadius=blenderContext.getBlenderKey().getSkyGeneratedTextureRadius();
  for (int x=0; x < size; ++x) {
    sideV=1;
    forwardV=1;
    upS=0;
    for (int y=0; y < size; ++y) {
      castFunction.cast(tempVars.vect1.set(1,sideV,sideS),castRadius);
      textureGenerator.getPixel(pixel,tempVars.vect1.x,tempVars.vect1.y,tempVars.vect1.z);
      pixelIO.write(image,NEGATIVE_X,ImageUtils.color(pixel,horizontalColor,zenithColor),x,y);
      castFunction.cast(tempVars.vect1.set(0,sideV,1 - sideS),castRadius);
      textureGenerator.getPixel(pixel,tempVars.vect1.x,tempVars.vect1.y,tempVars.vect1.z);
      pixelIO.write(image,POSITIVE_X,ImageUtils.color(pixel,horizontalColor,zenithColor),x,y);
      castFunction.cast(tempVars.vect1.set(forwardU,forwardV,0),castRadius);
      textureGenerator.getPixel(pixel,tempVars.vect1.x,tempVars.vect1.y,tempVars.vect1.z);
      pixelIO.write(image,POSITIVE_Z,ImageUtils.color(pixel,horizontalColor,zenithColor),x,y);
      castFunction.cast(tempVars.vect1.set(1 - forwardU,forwardV,1),castRadius);
      textureGenerator.getPixel(pixel,tempVars.vect1.x,tempVars.vect1.y,tempVars.vect1.z);
      pixelIO.write(image,NEGATIVE_Z,ImageUtils.color(pixel,horizontalColor,zenithColor),x,y);
      castFunction.cast(tempVars.vect1.set(forwardU,0,upS),castRadius);
      textureGenerator.getPixel(pixel,tempVars.vect1.x,tempVars.vect1.y,tempVars.vect1.z);
      pixelIO.write(image,NEGATIVE_Y,ImageUtils.color(pixel,horizontalColor,zenithColor),x,y);
      castFunction.cast(tempVars.vect1.set(forwardU,1,1 - upS),castRadius);
      textureGenerator.getPixel(pixel,tempVars.vect1.x,tempVars.vect1.y,tempVars.vect1.z);
      pixelIO.write(image,POSITIVE_Y,ImageUtils.color(pixel,horizontalColor,zenithColor),x,y);
      sideV=FastMath.clamp(sideV - delta,0,1);
      forwardV=FastMath.clamp(forwardV - delta,0,1);
      upS=FastMath.clamp(upS + delta,0,1);
    }
    sideS=FastMath.clamp(sideS - delta,0,1);
    forwardU=FastMath.clamp(forwardU - delta,0,1);
  }
  tempVars.release();
  return new TextureCubeMap(image);
}
