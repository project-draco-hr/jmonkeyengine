{
  BoneAnimation result;
  try {
    result=(BoneAnimation)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    result=new BoneAnimation(name,length);
  }
  if (result.tracks == null) {
    result.tracks=new BoneTrack[tracks.length];
  }
  for (int i=0; i < tracks.length; ++i) {
    int tablesLength=tracks[i].getTimes().length;
    float[] times=tracks[i].getTimes().clone();
    Vector3f[] sourceTranslations=tracks[i].getTranslations();
    Quaternion[] sourceRotations=tracks[i].getRotations();
    Vector3f[] sourceScales=tracks[i].getScales();
    Vector3f[] translations=new Vector3f[tablesLength];
    Quaternion[] rotations=new Quaternion[tablesLength];
    Vector3f[] scales=new Vector3f[tablesLength];
    for (int j=0; j < tablesLength; ++j) {
      translations[j]=sourceTranslations[j].clone();
      rotations[j]=sourceRotations[j].clone();
      scales[j]=sourceScales != null ? sourceScales[j].clone() : new Vector3f(1.0f,1.0f,1.0f);
    }
    result.tracks[i]=new BoneTrack(tracks[i].getTargetBoneIndex(),times,translations,rotations,scales);
  }
  return result;
}
