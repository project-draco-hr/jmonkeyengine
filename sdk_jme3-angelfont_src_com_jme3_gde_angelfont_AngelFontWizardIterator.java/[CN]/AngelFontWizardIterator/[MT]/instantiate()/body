{
  String fontName=(String)wizard.getProperty("font_name");
  String fileName=(String)wizard.getProperty("file_name");
  int fontSize=(Integer)wizard.getProperty("font_size");
  int imageSize=(Integer)wizard.getProperty("image_size");
  int style=(Integer)wizard.getProperty("font_style");
  int paddingX=(Integer)wizard.getProperty("padding_x");
  int paddingY=(Integer)wizard.getProperty("padding_y");
  int letterSpacing=(Integer)wizard.getProperty("letter_spacing");
  Project project=(Project)wizard.getProperty("project");
  ProjectAssetManager pm=project.getLookup().lookup(ProjectAssetManager.class);
  if (pm == null) {
    Logger.getLogger(AngelFontWizardIterator.class.getName()).log(Level.WARNING,"No ProjectAssetManager found!");
    return Collections.EMPTY_SET;
  }
  AngelFont font=FontCreator.buildFont(fontName,fileName,imageSize,fontSize,style,paddingX,paddingY,letterSpacing,false);
  BufferedImage fontImage=font.getImage();
  ByteBuffer scratch=ByteBuffer.allocateDirect(4 * fontImage.getWidth() * fontImage.getHeight());
  byte[] data=(byte[])fontImage.getRaster().getDataElements(0,0,fontImage.getWidth(),fontImage.getHeight(),null);
  scratch.clear();
  scratch.put(data);
  scratch.rewind();
  fileName=fileName.replaceAll(" ","");
  FileObject imageFile;
  FileObject descriptionFile;
  try {
    imageFile=FileUtil.createData(pm.getAssetFolder(),"Interface/Fonts/" + fileName + ".png");
    OutputStream out=imageFile.getOutputStream();
    ImageIO.write(fontImage,"PNG",out);
    out.close();
    descriptionFile=FileUtil.createData(pm.getAssetFolder(),"Interface/Fonts/" + fileName + ".fnt");
    OutputStreamWriter out2=new OutputStreamWriter(descriptionFile.getOutputStream());
    out2.write(font.getDescription());
    out2.close();
  }
 catch (  Exception e) {
    Exceptions.printStackTrace(e);
    return Collections.EMPTY_SET;
  }
  Set<FileObject> set=new HashSet<FileObject>();
  set.add(imageFile);
  set.add(descriptionFile);
  return set;
}
