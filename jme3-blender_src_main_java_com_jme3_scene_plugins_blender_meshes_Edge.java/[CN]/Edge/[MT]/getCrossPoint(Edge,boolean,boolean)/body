{
  Vector3d P1=new Vector3d(this.getFirstVertex());
  Vector3d P2=new Vector3d(edge.getFirstVertex());
  Vector3d u=new Vector3d(this.getSecondVertex()).subtract(P1).normalizeLocal();
  Vector3d v=new Vector3d(edge.getSecondVertex()).subtract(P2).normalizeLocal();
  double t1=0, t2=0;
  if (u.x == 0 && v.x == 0) {
    t2=(u.z * (P2.y - P1.y) - u.y * (P2.z - P1.z)) / (u.y * v.z - u.z * v.y);
    t1=(P2.z - P1.z + v.z * t2) / u.z;
  }
 else   if (u.y == 0 && v.y == 0) {
    t2=(u.x * (P2.z - P1.z) - u.z * (P2.x - P1.x)) / (u.z * v.x - u.x * v.z);
    t1=(P2.x - P1.x + v.x * t2) / u.x;
  }
 else   if (u.z == 0 && v.z == 0) {
    t2=(u.x * (P2.y - P1.y) - u.y * (P2.x - P1.x)) / (u.y * v.x - u.x * v.y);
    t1=(P2.x - P1.x + v.x * t2) / u.x;
  }
 else {
    t2=(P1.y * u.x - P1.x * u.y + P2.x * u.y - P2.y * u.x) / (v.y * u.x - u.y * v.x);
    t1=(P2.x - P1.x + v.x * t2) / u.x;
    if (Math.abs(P1.z - P2.z + u.z * t1 - v.z * t2) > FastMath.FLT_EPSILON) {
      return null;
    }
  }
  Vector3d p1=P1.add(u.mult(t1));
  Vector3d p2=P2.add(v.mult(t2));
  if (p1.distance(p2) <= FastMath.FLT_EPSILON) {
    if (extendThisEdge && extendSecondEdge) {
      return p1.toVector3f();
    }
    Vector3d p=p1.subtract(P1);
    double cos=p.dot(u) / p.length();
    if (extendThisEdge || p.length() <= FastMath.FLT_EPSILON || cos >= 1 - FastMath.FLT_EPSILON && p.length() <= this.getLength()) {
      p=p2.subtract(P2);
      cos=p.dot(v) / p.length();
      if (extendSecondEdge || p.length() <= FastMath.FLT_EPSILON || cos >= 1 - FastMath.FLT_EPSILON && p.length() <= edge.getLength()) {
        return p1.toVector3f();
      }
    }
  }
  return null;
}
