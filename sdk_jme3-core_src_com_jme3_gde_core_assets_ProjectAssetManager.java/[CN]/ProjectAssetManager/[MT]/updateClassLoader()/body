{
  for (  FileObject fileObject : classPathItems) {
    try {
      unregisterLocator(fileObject.getURL().toExternalForm(),com.jme3.asset.plugins.UrlLocator.class);
    }
 catch (    FileStateInvalidException ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  classPathItems.clear();
  Sources sources=project.getLookup().lookup(Sources.class);
  if (sources != null) {
    if (loader != null) {
      removeClassLoader(loader);
    }
    SourceGroup[] groups=sources.getSourceGroups(JavaProjectConstants.SOURCES_TYPE_JAVA);
    List<URL> urls=new LinkedList<URL>();
    for (    SourceGroup sourceGroup : groups) {
      ClassPath path=ClassPath.getClassPath(sourceGroup.getRootFolder(),ClassPath.EXECUTE);
      if (path != null) {
        try {
          FileObject[] roots=path.getRoots();
          for (          FileObject fileObject : roots) {
            if (fileObject.getURL().toExternalForm().startsWith("jar")) {
              Logger.getLogger(this.getClass().getName()).log(Level.INFO,"Add classpath locator:{0}",fileObject.getURL());
              urls.add(fileObject.getURL());
              classPathItems.add(fileObject);
              registerLocator(fileObject.getURL().toExternalForm(),"com.jme3.asset.plugins.UrlLocator");
            }
          }
        }
 catch (        FileStateInvalidException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    }
    loader=new URLClassLoader(urls.toArray(new URL[urls.size()]),getClass().getClassLoader());
    addClassLoader(loader);
  }
}
