{
  Format format=texture.getImage().getFormat();
  ByteBuffer data=texture.getImage().getData(0);
  data.rewind();
  int width=texture.getImage().getWidth();
  int height=texture.getImage().getHeight();
  ByteBuffer newData=BufferUtils.createByteBuffer(width * height * 3);
  float[] resultPixel=new float[3];
  float[] texPixel=new float[3];
  int dataIndex=0;
  while (data.hasRemaining()) {
    byte pixelValue=data.get();
    texPixel[0]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
    if (neg) {
      texPixel[0]=1.0f - texPixel[0];
    }
    if (format == Format.ABGR8) {
      pixelValue=data.get();
      texPixel[2]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[2]=1.0f - texPixel[2];
      }
      pixelValue=data.get();
      texPixel[1]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[1]=1.0f - texPixel[1];
      }
      pixelValue=data.get();
      texPixel[0]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[0]=1.0f - texPixel[0];
      }
      this.blendPixel(resultPixel,materialColor,texPixel,1.0f,affectFactor,blendType,dataRepository);
      newData.put(dataIndex++,(byte)(resultPixel[0] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[1] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[2] * 255.0f));
    }
 else     if (format == Format.RGB8) {
      pixelValue=data.get();
      texPixel[1]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[1]=1.0f - texPixel[1];
      }
      pixelValue=data.get();
      texPixel[2]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[2]=1.0f - texPixel[2];
      }
      float tin=texPixel[0];
      this.blendPixel(resultPixel,texPixel,color,tin,affectFactor,blendType,dataRepository);
      newData.put(dataIndex++,(byte)(resultPixel[0] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[1] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[2] * 255.0f));
    }
 else     if (format == Format.RGBA8) {
      pixelValue=data.get();
      texPixel[1]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[1]=1.0f - texPixel[1];
      }
      pixelValue=data.get();
      texPixel[2]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[2]=1.0f - texPixel[2];
      }
      data.get();
      this.blendPixel(resultPixel,materialColor,texPixel,1.0f,affectFactor,blendType,dataRepository);
      newData.put(dataIndex++,(byte)(resultPixel[0] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[1] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[2] * 255.0f));
    }
 else     if (format == Format.BGR8) {
      texPixel[2]=texPixel[0];
      pixelValue=data.get();
      texPixel[1]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[1]=1.0f - texPixel[1];
      }
      pixelValue=data.get();
      texPixel[0]=pixelValue >= 0 ? 1.0f - pixelValue / 255.0f : (~pixelValue + 1) / 255.0f;
      if (neg) {
        texPixel[0]=1.0f - texPixel[0];
      }
      this.blendPixel(resultPixel,materialColor,texPixel,1.0f,affectFactor,blendType,dataRepository);
      newData.put(dataIndex++,(byte)(resultPixel[0] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[1] * 255.0f));
      newData.put(dataIndex++,(byte)(resultPixel[2] * 255.0f));
    }
 else     if (format == Format.Luminance8) {
      this.blendPixel(resultPixel,materialColor,color,texPixel[0],affectFactor,blendType,dataRepository);
      newData.put((byte)(resultPixel[0] * 255.0f));
      newData.put((byte)(resultPixel[1] * 255.0f));
      newData.put((byte)(resultPixel[2] * 255.0f));
    }
 else {
      throw new IllegalStateException("Invalid texture format for blending operation: " + format);
    }
  }
  return new Texture2D(new Image(Format.RGB8,width,height,newData));
}
