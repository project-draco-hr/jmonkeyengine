{
  Texture result=(Texture)dataRepository.getLoadedFeature(tex.getOldMemoryAddress(),LoadedFeatureDataType.LOADED_FEATURE);
  if (result != null) {
    return result;
  }
  int type=((Number)tex.getFieldValue("type")).intValue();
  int width=dataRepository.getBlenderKey().getGeneratedTextureWidth();
  int height=dataRepository.getBlenderKey().getGeneratedTextureHeight();
switch (type) {
case TEX_NONE:
    break;
case TEX_IMAGE:
  Pointer pImage=(Pointer)tex.getFieldValue("ima");
Structure image=pImage.fetchData(dataRepository.getInputStream()).get(0);
result=this.getTextureFromImage(image,dataRepository);
break;
case TEX_CLOUDS:
result=this.clouds(tex,width,height,dataRepository);
break;
case TEX_WOOD:
result=this.wood(tex,width,height,dataRepository);
break;
case TEX_MARBLE:
result=this.marble(tex,width,height,dataRepository);
break;
case TEX_MAGIC:
result=this.magic(tex,width,height,dataRepository);
break;
case TEX_BLEND:
result=this.blend(tex,width,height,dataRepository);
break;
case TEX_STUCCI:
result=this.stucci(tex,width,height,dataRepository);
break;
case TEX_NOISE:
result=this.texnoise(tex,width,height,dataRepository);
break;
case TEX_MUSGRAVE:
result=this.musgrave(tex,width,height,dataRepository);
break;
case TEX_VORONOI:
result=this.voronoi(tex,width,height,dataRepository);
break;
case TEX_DISTNOISE:
result=this.distnoise(tex,width,height,dataRepository);
break;
case TEX_PLUGIN:
case TEX_ENVMAP:
LOGGER.log(Level.WARNING,"Unsupported texture type: " + type + " for texture: "+ tex.getName());
break;
default :
throw new BlenderFileException("Unknown texture type: " + type + " for texture: "+ tex.getName());
}
if (result != null) {
result.setName(tex.getName());
result.setWrap(WrapMode.Repeat);
}
return result;
}
