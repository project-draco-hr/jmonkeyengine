{
  NoiseHelper noiseHelper=dataRepository.getHelper(NoiseHelper.class);
  int stype=((Number)tex.getFieldValue("stype")).intValue();
  float noisesize=((Number)tex.getFieldValue("noisesize")).floatValue();
  TexResult texres=new TexResult();
  float[] texvec=new float[]{0,0,0};
  float wDelta=1.0f / width, hDelta=1.0f / height;
  int halfW=width, halfH=height;
  width<<=1;
  height<<=1;
  ColorBand colorBand=this.readColorband(tex,dataRepository);
  Format format=colorBand != null ? Format.RGB8 : Format.Luminance8;
  int bytesPerPixel=colorBand != null ? 3 : 1;
  ByteBuffer data=BufferUtils.createByteBuffer(width * height * bytesPerPixel);
  for (int i=-halfW; i < halfW; ++i) {
    texvec[0]=wDelta * i / noisesize;
    for (int j=-halfH; j < halfH; ++j) {
      texvec[1]=hDelta * j / noisesize;
switch (stype) {
case com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_MFRACTAL:
case com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_FBM:
        noiseHelper.mgMFractalOrfBmTex(tex,texvec,colorBand,texres,dataRepository);
      break;
case com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_RIDGEDMF:
case com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_HYBRIDMF:
    noiseHelper.mgRidgedOrHybridMFTex(tex,texvec,colorBand,texres,dataRepository);
  break;
case com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_HTERRAIN:
noiseHelper.mgHTerrainTex(tex,texvec,colorBand,texres,dataRepository);
break;
default :
throw new IllegalStateException("Unknown type of musgrave texture: " + stype);
}
if (colorBand != null) {
noiseHelper.doColorband(colorBand,texres,dataRepository);
data.put((byte)(texres.tr * 255.0f));
data.put((byte)(texres.tg * 255.0f));
data.put((byte)(texres.tb * 255.0f));
}
 else {
data.put((byte)(texres.tin * 255.0f));
}
}
}
return new Texture2D(new Image(format,width,height,data));
}
