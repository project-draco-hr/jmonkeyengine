{
  NoiseHelper noiseHelper=dataRepository.getHelper(NoiseHelper.class);
  int flag=((Number)tex.getFieldValue("flag")).intValue();
  int stype=((Number)tex.getFieldValue("stype")).intValue();
  float contrast=((Number)tex.getFieldValue("contrast")).floatValue();
  float brightness=((Number)tex.getFieldValue("bright")).floatValue();
  float wDelta=1.0f / width, hDelta=1.0f / height, x, y, t;
  float[] texvec=new float[]{0,0,0};
  TexResult texres=new TexResult();
  int halfW=width, halfH=height;
  width<<=1;
  height<<=1;
  ColorBand colorBand=this.readColorband(tex,dataRepository);
  Format format=colorBand != null ? Format.RGB8 : Format.Luminance8;
  int bytesPerPixel=colorBand != null ? 3 : 1;
  ByteBuffer data=BufferUtils.createByteBuffer(width * height * bytesPerPixel);
  for (int i=-halfW; i < halfW; ++i) {
    texvec[0]=wDelta * i;
    for (int j=-halfH; j < halfH; ++j) {
      texvec[1]=hDelta * j;
      if ((flag & com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_FLIPBLEND) != 0) {
        x=texvec[1];
        y=texvec[0];
      }
 else {
        x=texvec[0];
        y=texvec[1];
      }
      if (stype == com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_LIN) {
        texres.tin=(1.0f + x) / 2.0f;
      }
 else       if (stype == com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_QUAD) {
        texres.tin=(1.0f + x) / 2.0f;
        if (texres.tin < 0.0f) {
          texres.tin=0.0f;
        }
 else {
          texres.tin*=texres.tin;
        }
      }
 else       if (stype == com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_EASE) {
        texres.tin=(1.0f + x) / 2.0f;
        if (texres.tin <= 0.0f) {
          texres.tin=0.0f;
        }
 else         if (texres.tin >= 1.0f) {
          texres.tin=1.0f;
        }
 else {
          t=texres.tin * texres.tin;
          texres.tin=3.0f * t - 2.0f * t * texres.tin;
        }
      }
 else       if (stype == com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_DIAG) {
        texres.tin=(2.0f + x + y) / 4.0f;
      }
 else       if (stype == com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_RAD) {
        texres.tin=(float)Math.atan2(y,x) / FastMath.TWO_PI + 0.5f;
      }
 else {
        texres.tin=1.0f - (float)Math.sqrt(x * x + y * y + texvec[2] * texvec[2]);
        if (texres.tin < 0.0f) {
          texres.tin=0.0f;
        }
        if (stype == com.jme3.scene.plugins.blender.helpers.v249.NoiseHelper.TEX_HALO) {
          texres.tin*=texres.tin;
        }
      }
      if (colorBand != null) {
        noiseHelper.doColorband(colorBand,texres,dataRepository);
        noiseHelper.brightnesAndContrastRGB(tex,texres);
        data.put((byte)(texres.tr * 255.0f));
        data.put((byte)(texres.tg * 255.0f));
        data.put((byte)(texres.tb * 255.0f));
      }
 else {
        noiseHelper.brightnesAndContrast(texres,contrast,brightness);
        data.put((byte)(texres.tin * 255.0f));
      }
    }
  }
  return new Texture2D(new Image(format,width,height,data));
}
