{
  float div=3.0f;
  int val, ran, loop;
  int noisedepth=((Number)tex.getFieldValue("noisedepth")).intValue();
  float contrast=((Number)tex.getFieldValue("contrast")).floatValue();
  float brightness=((Number)tex.getFieldValue("bright")).floatValue();
  TexResult texres=new TexResult();
  int halfW=width, halfH=height, halfD=depth;
  width<<=1;
  height<<=1;
  depth<<=1;
  ColorBand colorBand=this.readColorband(tex,dataRepository);
  Format format=colorBand != null ? Format.RGB8 : Format.Luminance8;
  int bytesPerPixel=colorBand != null ? 3 : 1;
  ByteBuffer data=BufferUtils.createByteBuffer(width * height * depth* bytesPerPixel);
  for (int i=-halfW; i < halfW; ++i) {
    for (int j=-halfH; j < halfH; ++j) {
      for (int k=-halfD; k < halfD; ++k) {
        ran=FastMath.rand.nextInt();
        val=ran & 3;
        loop=noisedepth;
        while (loop-- != 0) {
          ran=ran >> 2;
          val*=ran & 3;
          div*=3.0f;
        }
        texres.tin=val;
        if (colorBand != null) {
          noiseGenerator.doColorband(colorBand,texres,dataRepository);
          noiseGenerator.brightnesAndContrastRGB(tex,texres);
          data.put((byte)(texres.tr * 255.0f));
          data.put((byte)(texres.tg * 255.0f));
          data.put((byte)(texres.tb * 255.0f));
        }
 else {
          noiseGenerator.brightnesAndContrast(texres,contrast,brightness);
          data.put((byte)(texres.tin * 255.0f));
        }
      }
    }
  }
  ArrayList<ByteBuffer> dataArray=new ArrayList<ByteBuffer>(1);
  dataArray.add(data);
  return new Texture3D(new Image(format,width,height,depth,dataArray));
}
