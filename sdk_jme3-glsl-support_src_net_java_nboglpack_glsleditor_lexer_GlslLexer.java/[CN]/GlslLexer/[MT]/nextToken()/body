{
  int character=input.read();
switch (character) {
case '(':
case ')':
    return factory.createToken(GlslTokenId.PAREN);
case '{':
case '}':
  return factory.createToken(GlslTokenId.BRACE);
case '[':
case ']':
return factory.createToken(GlslTokenId.BRACKET);
case '.':
return factory.createToken(GlslTokenId.DOT);
case ',':
return factory.createToken(GlslTokenId.COMMA);
case ':':
return factory.createToken(GlslTokenId.COLON);
case ';':
return factory.createToken(GlslTokenId.SEMICOLON);
case '?':
return factory.createToken(GlslTokenId.QUESTION);
case '~':
return factory.createToken(GlslTokenId.TILDE);
case '*':
if (input.read() == '=') {
return factory.createToken(GlslTokenId.MUL_ASSIGN);
}
 else {
input.backup(1);
return factory.createToken(GlslTokenId.STAR);
}
case '%':
if (input.read() == '=') {
return factory.createToken(GlslTokenId.MOD_ASSIGN);
}
 else {
input.backup(1);
return factory.createToken(GlslTokenId.PERCENT);
}
case '!':
if (input.read() == '=') {
return factory.createToken(GlslTokenId.NE);
}
 else {
input.backup(1);
return factory.createToken(GlslTokenId.BANG);
}
case '=':
if (input.read() == '=') {
return factory.createToken(GlslTokenId.EQEQ);
}
 else {
input.backup(1);
return factory.createToken(GlslTokenId.EQ);
}
case '^':
switch (input.read()) {
case ('^'):
return factory.createToken(GlslTokenId.CARETCARET);
case ('='):
return factory.createToken(GlslTokenId.XOR_ASSIGN);
default :
input.backup(1);
return factory.createToken(GlslTokenId.CARET);
}
case '+':
switch (input.read()) {
case ('+'):
return factory.createToken(GlslTokenId.PLUSPLUS);
case ('='):
return factory.createToken(GlslTokenId.ADD_ASSIGN);
default :
input.backup(1);
return factory.createToken(GlslTokenId.PLUS);
}
case '-':
switch (input.read()) {
case ('-'):
return factory.createToken(GlslTokenId.MINUSMINUS);
case ('='):
return factory.createToken(GlslTokenId.SUB_ASSIGN);
default :
input.backup(1);
return factory.createToken(GlslTokenId.MINUS);
}
case '&':
switch (input.read()) {
case ('&'):
return factory.createToken(GlslTokenId.AMPAMP);
case ('='):
return factory.createToken(GlslTokenId.AND_ASSIGN);
default :
input.backup(1);
return factory.createToken(GlslTokenId.AMP);
}
case '|':
switch (input.read()) {
case ('|'):
return factory.createToken(GlslTokenId.BARBAR);
case ('='):
return factory.createToken(GlslTokenId.OR_ASSIGN);
default :
input.backup(1);
return factory.createToken(GlslTokenId.BAR);
}
case '<':
switch (input.read()) {
case ('<'):
if (input.read() == '=') {
return factory.createToken(GlslTokenId.LEFT_BITSHIFT_ASSIGN);
}
 else {
input.backup(1);
return factory.createToken(GlslTokenId.LEFT_BITSHIFT);
}
case ('='):
return factory.createToken(GlslTokenId.LE);
default :
input.backup(1);
return factory.createToken(GlslTokenId.LEFT_ANGLE);
}
case '>':
switch (input.read()) {
case ('>'):
if (input.read() == '=') {
return factory.createToken(GlslTokenId.RIGHT_BITSHIFT_ASSIGN);
}
 else {
input.backup(1);
return factory.createToken(GlslTokenId.RIGHT_BITSHIFT);
}
case ('='):
return factory.createToken(GlslTokenId.GE);
default :
input.backup(1);
return factory.createToken(GlslTokenId.RIGHT_ANGLE);
}
case '/':
int c=input.read();
if (c == '/') {
readRemainingLine();
return factory.createToken(GlslTokenId.COMMENT);
}
 else if (c == '*') {
return tokenizeMLComment();
}
 else if (c == '=') {
return factory.createToken(GlslTokenId.DIV_ASSIGN);
}
 else {
input.backup(1);
return factory.createToken(GlslTokenId.SLASH);
}
case '#':
readRemainingLine();
return factory.createToken(GlslTokenId.PREPROCESSOR);
case ' ':
case '\t':
do {
character=input.read();
}
 while (character == ' ' || character == '\t');
input.backup(1);
return factory.createToken(GlslTokenId.WHITESPACE);
case '\r':
input.consumeNewline();
case LexerInput.EOF:
if (input.readLength() == 0) {
return null;
}
case '\n':
return factory.createToken(GlslTokenId.END_OF_LINE);
default :
if (Character.isDigit(character)) {
return tokenizeNumber();
}
 else if (Character.isUnicodeIdentifierStart(character)) {
return tokenizeName();
}
 else {
return factory.createToken(GlslTokenId.error);
}
}
}
