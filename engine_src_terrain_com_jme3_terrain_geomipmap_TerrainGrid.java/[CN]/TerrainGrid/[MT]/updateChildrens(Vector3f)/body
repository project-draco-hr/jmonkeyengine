{
  RigidBodyControl control=getControl(RigidBodyControl.class);
  if (control != null) {
    this.space=control.getPhysicsSpace();
    space.remove(this);
    this.removeControl(control);
    this.quadControls=new RigidBodyControl[4];
    for (int i=0; i < 4; i++) {
      int collisionGroupsCollideWith=control.getCollideWithGroups();
      int collisionGroups=control.getCollisionGroup();
      quadControls[i]=new RigidBodyControl(new HeightfieldCollisionShape(new float[quadSize * quadSize],getLocalScale()),0);
      quadControls[i].setCollideWithGroups(collisionGroupsCollideWith);
      quadControls[i].setCollisionGroup(collisionGroups);
    }
  }
  int dx=0;
  int dy=0;
  if (currentCell != null) {
    dx=(int)(cam.x - currentCell.x);
    dy=(int)(cam.z - currentCell.z);
  }
  int kxm=0;
  int kxM=4;
  int kym=0;
  int kyM=4;
  if (dx == -1) {
    kxM=3;
  }
 else   if (dx == 1) {
    kxm=1;
  }
  if (dy == -1) {
    kyM=3;
  }
 else   if (dy == 1) {
    kym=1;
  }
  for (int i=kym; i < kyM; i++) {
    for (int j=kxm; j < kxM; j++) {
      cache.get(cam.add(quadIndex[i * 4 + j]));
    }
  }
  if (executor == null)   executor=createExecutorService();
  executor.submit(new UpdateQuadCache(cam));
  this.currentCell=cam;
}
