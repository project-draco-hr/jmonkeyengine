{
  logger.log(Level.INFO,"Vendor: {0}",GLES20.glGetString(GLES20.GL_VENDOR));
  logger.log(Level.INFO,"Renderer: {0}",GLES20.glGetString(GLES20.GL_RENDERER));
  logger.log(Level.INFO,"Version: {0}",GLES20.glGetString(GLES20.GL_VERSION));
  logger.log(Level.INFO,"Shading Language Version: {0}",GLES20.glGetString(GLES20.GL_SHADING_LANGUAGE_VERSION));
  powerVr=GLES20.glGetString(GLES20.GL_RENDERER).contains("PowerVR");
  int openGlVer=extractVersion("OpenGL ES ",GLES20.glGetString(GLES20.GL_VERSION));
  if (openGlVer == -1) {
    glslVer=-1;
    throw new UnsupportedOperationException("OpenGL ES 2.0+ is required for OGLESShaderRenderer!");
  }
  glslVer=extractVersion("OpenGL ES GLSL ES ",GLES20.glGetString(GLES20.GL_SHADING_LANGUAGE_VERSION));
switch (glslVer) {
default :
    caps.add(Caps.GLSL100);
  break;
}
GLES20.glGetIntegerv(GLES20.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,intBuf16);
vertexTextureUnits=intBuf16.get(0);
logger.log(Level.INFO,"VTF Units: {0}",vertexTextureUnits);
if (vertexTextureUnits > 0) {
caps.add(Caps.VertexTextureFetch);
}
GLES20.glGetIntegerv(GLES20.GL_MAX_TEXTURE_IMAGE_UNITS,intBuf16);
fragTextureUnits=intBuf16.get(0);
logger.log(Level.INFO,"Texture Units: {0}",fragTextureUnits);
GLES20.glGetIntegerv(GLES20.GL_MAX_VERTEX_UNIFORM_VECTORS,intBuf16);
vertexUniforms=intBuf16.get(0) * 4;
logger.log(Level.FINER,"Vertex Uniforms: {0}",vertexUniforms);
GLES20.glGetIntegerv(GLES20.GL_MAX_FRAGMENT_UNIFORM_VECTORS,intBuf16);
fragUniforms=intBuf16.get(0) * 4;
logger.log(Level.FINER,"Fragment Uniforms: {0}",fragUniforms);
GLES20.glGetIntegerv(GLES20.GL_MAX_VARYING_VECTORS,intBuf16);
int varyingFloats=intBuf16.get(0) * 4;
logger.log(Level.FINER,"Varying Floats: {0}",varyingFloats);
GLES20.glGetIntegerv(GLES20.GL_MAX_VERTEX_ATTRIBS,intBuf16);
vertexAttribs=intBuf16.get(0);
logger.log(Level.INFO,"Vertex Attributes: {0}",vertexAttribs);
GLES20.glGetIntegerv(GLES20.GL_SUBPIXEL_BITS,intBuf16);
int subpixelBits=intBuf16.get(0);
logger.log(Level.INFO,"Subpixel Bits: {0}",subpixelBits);
GLES20.glGetIntegerv(GLES20.GL_MAX_TEXTURE_SIZE,intBuf16);
maxTexSize=intBuf16.get(0);
logger.log(Level.INFO,"Maximum Texture Resolution: {0}",maxTexSize);
GLES20.glGetIntegerv(GLES20.GL_MAX_CUBE_MAP_TEXTURE_SIZE,intBuf16);
maxCubeTexSize=intBuf16.get(0);
logger.log(Level.INFO,"Maximum CubeMap Resolution: {0}",maxCubeTexSize);
String extensions=GLES20.glGetString(GLES20.GL_EXTENSIONS);
logger.log(Level.INFO,"GL_EXTENSIONS: {0}",extensions);
GLES20.glGetIntegerv(GLES20.GL_NUM_COMPRESSED_TEXTURE_FORMATS,intBuf16);
int numCompressedFormats=intBuf16.get(0);
IntBuffer compressedFormats=BufferUtils.createIntBuffer(numCompressedFormats);
GLES20.glGetIntegerv(GLES20.GL_COMPRESSED_TEXTURE_FORMATS,compressedFormats);
for (int i=0; i < numCompressedFormats; i++) {
logger.log(Level.INFO,"Compressed Texture Formats: {0}",compressedFormats.get(i));
}
TextureUtil.loadTextureFeatures(extensions);
applyRenderState(RenderState.DEFAULT);
GLES20.glDisable(GLES20.GL_DITHER);
useVBO=false;
if (Build.VERSION.SDK_INT >= 9) {
logger.log(Level.INFO,"Force-enabling VBO (Android 2.3 or higher)");
useVBO=true;
}
 else {
useVBO=false;
}
logger.log(Level.INFO,"Caps: {0}",caps);
}
