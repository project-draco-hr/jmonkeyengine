{
  logger.log(Level.INFO,"Vendor: {0}",GLES20.glGetString(GLES20.GL_VENDOR));
  logger.log(Level.INFO,"Renderer: {0}",GLES20.glGetString(GLES20.GL_RENDERER));
  logger.log(Level.INFO,"Version: {0}",GLES20.glGetString(GLES20.GL_VERSION));
  String versionStr=GLES20.glGetString(GLES20.GL_SHADING_LANGUAGE_VERSION);
  logger.log(Level.INFO,"GLES20.Shading Language Version: {0}",versionStr);
  if (versionStr == null || versionStr.equals("")) {
    glslVer=-1;
    throw new UnsupportedOperationException("GLSL and OpenGL2 is " + "required for the OpenGL ES " + "renderer!");
  }
  String openGlEsStr="OpenGL ES GLSL ES ";
  int spaceIdx=versionStr.indexOf(" ",openGlEsStr.length());
  if (spaceIdx >= 1) {
    versionStr=versionStr.substring(openGlEsStr.length(),spaceIdx).trim();
  }
 else {
    versionStr=versionStr.substring(openGlEsStr.length()).trim();
  }
  float version=Float.parseFloat(versionStr);
  glslVer=(int)(version * 100);
switch (glslVer) {
default :
    caps.add(Caps.GLSL100);
  break;
}
if (!caps.contains(Caps.GLSL100)) {
logger.info("Force-adding GLSL100 support, since OpenGL2 is supported.");
caps.add(Caps.GLSL100);
}
GLES20.glGetIntegerv(GLES20.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,intBuf16);
vertexTextureUnits=intBuf16.get(0);
logger.log(Level.INFO,"VTF Units: {0}",vertexTextureUnits);
if (vertexTextureUnits > 0) {
caps.add(Caps.VertexTextureFetch);
}
GLES20.glGetIntegerv(GLES20.GL_MAX_TEXTURE_IMAGE_UNITS,intBuf16);
fragTextureUnits=intBuf16.get(0);
logger.log(Level.INFO,"Texture Units: {0}",fragTextureUnits);
GLES20.glGetIntegerv(GLES20.GL_MAX_VERTEX_ATTRIBS,intBuf16);
vertexAttribs=intBuf16.get(0);
logger.log(Level.INFO,"Vertex Attributes: {0}",vertexAttribs);
GLES20.glGetIntegerv(GLES20.GL_SUBPIXEL_BITS,intBuf16);
int subpixelBits=intBuf16.get(0);
logger.log(Level.INFO,"Subpixel Bits: {0}",subpixelBits);
GLES20.glGetIntegerv(GLES20.GL_MAX_TEXTURE_SIZE,intBuf16);
maxTexSize=intBuf16.get(0);
logger.log(Level.INFO,"Maximum Texture Resolution: {0}",maxTexSize);
GLES20.glGetIntegerv(GLES20.GL_MAX_CUBE_MAP_TEXTURE_SIZE,intBuf16);
maxCubeTexSize=intBuf16.get(0);
logger.log(Level.INFO,"Maximum CubeMap Resolution: {0}",maxCubeTexSize);
String extensions=GLES20.glGetString(GLES20.GL_EXTENSIONS);
logger.log(Level.INFO,"GL_EXTENSIONS: {0}",extensions);
GLES20.glGetIntegerv(GLES20.GL_COMPRESSED_TEXTURE_FORMATS,intBuf16);
for (int i=0; i < intBuf16.limit(); i++) {
logger.log(Level.INFO,"Compressed Texture Formats: {0}",intBuf16.get(i));
}
if (extensions.contains("GL_OES_texture_npot")) {
powerOf2=true;
}
applyRenderState(RenderState.DEFAULT);
if (verboseLogging) {
logger.info("GLES20.glDisable(GL10.GL_DITHER)");
}
GLES20.glDisable(GL10.GL_DITHER);
checkGLError();
if (verboseLogging) {
logger.info("GLES20.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_FASTEST)");
}
GLES20.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_FASTEST);
useVBO=false;
if (Build.VERSION.SDK_INT >= 9) {
useVBO=true;
}
logger.log(Level.INFO,"Caps: {0}",caps);
}
