{
  int texId=img.getId();
  if (texId == -1) {
    if (verboseLogging) {
      logger.info("GLES20.glGenTexture(1, buffer)");
    }
    GLES20.glGenTextures(1,intBuf1);
    texId=intBuf1.get(0);
    img.setId(texId);
    objManager.registerForCleanup(img);
    statistics.onNewTexture();
  }
  int target=convertTextureType(type);
  if (context.boundTextures[0] != img) {
    if (context.boundTextureUnit != 0) {
      if (verboseLogging) {
        logger.info("GLES20.glActiveTexture(GLES20.GL_TEXTURE0)");
      }
      GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
      context.boundTextureUnit=0;
    }
    if (verboseLogging) {
      logger.info("GLES20.glBindTexture(" + target + ", "+ texId+ ")");
    }
    GLES20.glBindTexture(target,texId);
    context.boundTextures[0]=img;
  }
  if (target == GLES20.GL_TEXTURE_CUBE_MAP) {
    @SuppressWarnings("unchecked") List<Bitmap> bmps=(List<Bitmap>)img.getEfficentData();
    if (bmps != null) {
      if (bmps.size() != 6) {
        throw new UnsupportedOperationException("Invalid texture: " + img + "Cubemap textures must contain 6 data units.");
      }
      for (int i=0; i < 6; i++) {
        TextureUtil.uploadTextureBitmap(GLES20.GL_TEXTURE_CUBE_MAP_POSITIVE_X + i,bmps.get(i),false,powerOf2);
      }
    }
 else {
      List<ByteBuffer> data=img.getData();
      if (data.size() != 6) {
        logger.log(Level.WARNING,"Invalid texture: {0}\n" + "Cubemap textures must contain 6 data units.",img);
        return;
      }
      for (int i=0; i < 6; i++) {
        TextureUtil.uploadTexture(img,GLES20.GL_TEXTURE_CUBE_MAP_POSITIVE_X + i,i,0,tdc,false,powerOf2);
      }
    }
  }
 else {
    TextureUtil.uploadTexture(img,target,0,0,tdc,false,powerOf2);
    if (verboseLogging) {
      logger.info("GLES20.glTexParameteri(" + target + "GLES11.GL_GENERATE_MIMAP, GLES20.GL_TRUE)");
    }
    if (!img.hasMipmaps() && mips) {
      if (verboseLogging) {
        logger.info("GLES20.glGenerateMipmap(GLES20.GL_TEXTURE_2D)");
      }
      GLES20.glGenerateMipmap(GLES20.GL_TEXTURE_2D);
    }
  }
  img.clearUpdateNeeded();
}
