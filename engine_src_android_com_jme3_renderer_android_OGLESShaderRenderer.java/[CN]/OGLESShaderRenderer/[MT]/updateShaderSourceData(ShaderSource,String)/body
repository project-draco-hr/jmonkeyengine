{
  int id=source.getId();
  if (id == -1) {
    id=GLES20.glCreateShader(convertShaderType(source.getType()));
    if (id <= 0) {
      throw new RendererException("Invalid ID received when trying to create shader.");
    }
    source.setId(id);
  }
  byte[] versionData=new byte[]{};
  byte[] definesCodeData=source.getDefines().getBytes();
  byte[] sourceCodeData=source.getSource().getBytes();
  ByteBuffer codeBuf=BufferUtils.createByteBuffer(versionData.length + definesCodeData.length + sourceCodeData.length);
  codeBuf.put(versionData);
  codeBuf.put(definesCodeData);
  codeBuf.put(sourceCodeData);
  codeBuf.flip();
  if (powerVr && source.getType() == ShaderType.Vertex) {
    GLES20.glShaderSource(id,source.getDefines() + source.getSource());
  }
 else {
    GLES20.glShaderSource(id,"precision mediump float;\n" + source.getDefines() + source.getSource());
  }
  GLES20.glCompileShader(id);
  GLES20.glGetShaderiv(id,GLES20.GL_COMPILE_STATUS,intBuf1);
  boolean compiledOK=intBuf1.get(0) == GLES20.GL_TRUE;
  String infoLog=null;
  if (VALIDATE_SHADER || !compiledOK) {
    GLES20.glGetShaderiv(id,GLES20.GL_INFO_LOG_LENGTH,intBuf1);
    checkGLError();
    infoLog=GLES20.glGetShaderInfoLog(id);
  }
  if (compiledOK) {
    if (infoLog != null) {
      logger.log(Level.INFO,"compile success: " + source.getName() + ", "+ infoLog);
    }
 else {
      logger.log(Level.FINE,"compile success: " + source.getName());
    }
  }
 else {
    logger.log(Level.WARNING,"Bad compile of:\n{0}",new Object[]{ShaderDebug.formatShaderSource(source.getDefines(),source.getSource(),stringBuf.toString())});
    if (infoLog != null) {
      throw new RendererException("compile error in:" + source + " error:"+ infoLog);
    }
 else {
      throw new RendererException("compile error in:" + source + " error: <not provided>");
    }
  }
  source.clearUpdateNeeded();
  source.setUsable(compiledOK);
  if (!compiledOK) {
    GLES20.glDeleteShader(id);
  }
 else {
    objManager.registerForCleanup(source);
  }
}
