{
  int id=source.getId();
  if (id == -1) {
    if (verboseLogging) {
      logger.info("GLES20.glCreateShader(" + source.getType() + ")");
    }
    id=GLES20.glCreateShader(convertShaderType(source.getType()));
    checkGLError();
    if (id <= 0) {
      throw new RendererException("Invalid ID received when trying to create shader.");
    }
    source.setId(id);
  }
  byte[] versionData=new byte[]{};
  byte[] definesCodeData=source.getDefines().getBytes();
  byte[] sourceCodeData=source.getSource().getBytes();
  ByteBuffer codeBuf=BufferUtils.createByteBuffer(versionData.length + definesCodeData.length + sourceCodeData.length);
  codeBuf.put(versionData);
  codeBuf.put(definesCodeData);
  codeBuf.put(sourceCodeData);
  codeBuf.flip();
  if (verboseLogging) {
    logger.info("GLES20.glShaderSource(" + id + ")");
  }
  GLES20.glShaderSource(id,"precision mediump float;\n" + source.getDefines() + source.getSource());
  checkGLError();
  if (verboseLogging) {
    logger.info("GLES20.glCompileShader(" + id + ")");
  }
  GLES20.glCompileShader(id);
  checkGLError();
  if (verboseLogging) {
    logger.info("GLES20.glGetShaderiv(" + id + ", GLES20.GL_COMPILE_STATUS)");
  }
  GLES20.glGetShaderiv(id,GLES20.GL_COMPILE_STATUS,intBuf1);
  checkGLError();
  boolean compiledOK=intBuf1.get(0) == GLES20.GL_TRUE;
  String infoLog=null;
  if (VALIDATE_SHADER || !compiledOK) {
    if (verboseLogging) {
      logger.info("GLES20.glGetShaderiv()");
    }
    GLES20.glGetShaderiv(id,GLES20.GL_INFO_LOG_LENGTH,intBuf1);
    checkGLError();
    if (verboseLogging) {
      logger.info("GLES20.glGetShaderInfoLog(" + id + ")");
    }
    infoLog=GLES20.glGetShaderInfoLog(id);
    logger.severe("Errooooooooooot(" + id + ")");
  }
  if (compiledOK) {
    if (infoLog != null) {
      logger.log(Level.INFO,"compile success: " + source.getName() + ", "+ infoLog);
    }
 else {
      logger.log(Level.FINE,"compile success: " + source.getName());
    }
  }
 else {
    logger.log(Level.WARNING,"Bad compile of:\n{0}{1}",new Object[]{source.getDefines(),source.getSource()});
    if (infoLog != null) {
      throw new RendererException("compile error in:" + source + " error:"+ infoLog);
    }
 else {
      throw new RendererException("compile error in:" + source + " error: <not provided>");
    }
  }
  source.clearUpdateNeeded();
  source.setUsable(compiledOK);
  if (!compiledOK) {
    if (verboseLogging) {
      logger.info("GLES20.glDeleteShader(" + id + ")");
    }
    GLES20.glDeleteShader(id);
    checkGLError();
  }
 else {
    objManager.registerForCleanup(source);
  }
}
