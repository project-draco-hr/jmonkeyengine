{
  Texture2D tex=filterTexture;
  FrameBuffer buff=sceneFb;
  boolean msDepth=depthTexture != null && depthTexture.getImage().getMultiSamples() > 1;
  for (int i=0; i < filters.size(); i++) {
    Filter filter=filters.get(i);
    if (filter.isEnabled()) {
      if (filter.getPostRenderPasses() != null) {
        for (Iterator<Filter.Pass> it1=filter.getPostRenderPasses().iterator(); it1.hasNext(); ) {
          Filter.Pass pass=it1.next();
          pass.beforeRender();
          if (pass.requiresSceneAsTexture()) {
            pass.getPassMaterial().setTexture("Texture",tex);
            if (tex.getImage().getMultiSamples() > 1) {
              pass.getPassMaterial().setInt("NumSamples",tex.getImage().getMultiSamples());
            }
 else {
              pass.getPassMaterial().clearParam("NumSamples");
            }
          }
          if (pass.requiresDepthAsTexture()) {
            pass.getPassMaterial().setTexture("DepthTexture",depthTexture);
            if (msDepth) {
              pass.getPassMaterial().setInt("NumSamplesDepth",depthTexture.getImage().getMultiSamples());
            }
 else {
              pass.getPassMaterial().clearParam("NumSamplesDepth");
            }
          }
          renderProcessing(r,pass.getRenderFrameBuffer(),pass.getPassMaterial());
        }
      }
      filter.postFrame(renderManager,viewPort,buff,sceneFb);
      Material mat=filter.getMaterial();
      if (msDepth && filter.isRequiresDepthTexture()) {
        mat.setInt("NumSamplesDepth",depthTexture.getImage().getMultiSamples());
      }
      if (filter.isRequiresSceneTexture()) {
        mat.setTexture("Texture",tex);
        if (tex.getImage().getMultiSamples() > 1) {
          mat.setInt("NumSamples",tex.getImage().getMultiSamples());
        }
 else {
          mat.clearParam("NumSamples");
        }
      }
      buff=outputBuffer;
      if (i != lastFilterIndex) {
        buff=filter.getRenderFrameBuffer();
        tex=filter.getRenderedTexture();
      }
      renderProcessing(r,buff,mat);
      filter.outputdebug();
    }
  }
}
