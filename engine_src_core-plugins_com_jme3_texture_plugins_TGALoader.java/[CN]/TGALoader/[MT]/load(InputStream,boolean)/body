{
  boolean flipH=false;
  DataInputStream dis=new DataInputStream(new BufferedInputStream(in));
  int idLength=dis.readUnsignedByte();
  int colorMapType=dis.readUnsignedByte();
  int imageType=dis.readUnsignedByte();
  dis.readShort();
  short cMapLength=flipEndian(dis.readShort());
  int cMapDepth=dis.readUnsignedByte();
  dis.readShort();
  dis.readShort();
  int width=flipEndian(dis.readShort());
  int height=flipEndian(dis.readShort());
  int pixelDepth=dis.readUnsignedByte();
  int imageDescriptor=dis.readUnsignedByte();
  if ((imageDescriptor & 32) != 0)   flip=!flip;
  if ((imageDescriptor & 16) != 0)   flipH=!flipH;
  if (idLength > 0)   in.skip(idLength);
  ColorMapEntry[] cMapEntries=null;
  if (colorMapType != 0) {
    int bytesInColorMap=(cMapDepth * cMapLength) >> 3;
    int bitsPerColor=Math.min(cMapDepth / 3,8);
    byte[] cMapData=new byte[bytesInColorMap];
    in.read(cMapData);
    if (imageType == TYPE_COLORMAPPED || imageType == TYPE_COLORMAPPED_RLE) {
      cMapEntries=new ColorMapEntry[cMapLength];
      int alphaSize=cMapDepth - (3 * bitsPerColor);
      float scalar=255f / (FastMath.pow(2,bitsPerColor) - 1);
      float alphaScalar=255f / (FastMath.pow(2,alphaSize) - 1);
      for (int i=0; i < cMapLength; i++) {
        ColorMapEntry entry=new ColorMapEntry();
        int offset=cMapDepth * i;
        entry.red=(byte)(int)(getBitsAsByte(cMapData,offset,bitsPerColor) * scalar);
        entry.green=(byte)(int)(getBitsAsByte(cMapData,offset + bitsPerColor,bitsPerColor) * scalar);
        entry.blue=(byte)(int)(getBitsAsByte(cMapData,offset + (2 * bitsPerColor),bitsPerColor) * scalar);
        if (alphaSize <= 0)         entry.alpha=(byte)255;
 else         entry.alpha=(byte)(int)(getBitsAsByte(cMapData,offset + (3 * bitsPerColor),alphaSize) * alphaScalar);
        cMapEntries[i]=entry;
      }
    }
  }
  Format format;
  byte[] rawData=null;
  int dl;
  if (pixelDepth == 32) {
    rawData=new byte[width * height * 4];
    dl=4;
  }
 else {
    rawData=new byte[width * height * 3];
    dl=3;
  }
  int rawDataIndex=0;
  if (imageType == TYPE_TRUECOLOR) {
    byte red=0;
    byte green=0;
    byte blue=0;
    byte alpha=0;
    if (pixelDepth == 16) {
      byte[] data=new byte[2];
      float scalar=255f / 31f;
      for (int i=0; i <= (height - 1); i++) {
        if (!flip)         rawDataIndex=(height - 1 - i) * width * dl;
        for (int j=0; j < width; j++) {
          data[1]=dis.readByte();
          data[0]=dis.readByte();
          rawData[rawDataIndex++]=(byte)(int)(getBitsAsByte(data,1,5) * scalar);
          rawData[rawDataIndex++]=(byte)(int)(getBitsAsByte(data,6,5) * scalar);
          rawData[rawDataIndex++]=(byte)(int)(getBitsAsByte(data,11,5) * scalar);
          if (dl == 4) {
            alpha=getBitsAsByte(data,0,1);
            if (alpha == 1)             alpha=(byte)255;
            rawData[rawDataIndex++]=alpha;
          }
        }
      }
      format=dl == 4 ? Format.RGBA8 : Format.RGB8;
    }
 else     if (pixelDepth == 24) {
      for (int y=0; y < height; y++) {
        if (!flip)         rawDataIndex=(height - 1 - y) * width * dl;
 else         rawDataIndex=y * width * dl;
        dis.readFully(rawData,rawDataIndex,width * dl);
      }
      format=Format.BGR8;
    }
 else     if (pixelDepth == 32) {
      for (int i=0; i <= (height - 1); i++) {
        if (!flip)         rawDataIndex=(height - 1 - i) * width * dl;
        for (int j=0; j < width; j++) {
          blue=dis.readByte();
          green=dis.readByte();
          red=dis.readByte();
          alpha=dis.readByte();
          rawData[rawDataIndex++]=red;
          rawData[rawDataIndex++]=green;
          rawData[rawDataIndex++]=blue;
          rawData[rawDataIndex++]=alpha;
        }
      }
      format=Format.RGBA8;
    }
 else {
      throw new IOException("Unsupported TGA true color depth: " + pixelDepth);
    }
  }
 else   if (imageType == TYPE_TRUECOLOR_RLE) {
    byte red=0;
    byte green=0;
    byte blue=0;
    byte alpha=0;
    if (pixelDepth == 32) {
      for (int i=0; i <= (height - 1); ++i) {
        if (!flip) {
          rawDataIndex=(height - 1 - i) * width * dl;
        }
        for (int j=0; j < width; ++j) {
          int count=dis.readByte();
          if ((count & 0x80) != 0) {
            count&=0x07f;
            j+=count;
            blue=dis.readByte();
            green=dis.readByte();
            red=dis.readByte();
            alpha=dis.readByte();
            while (count-- >= 0) {
              rawData[rawDataIndex++]=red;
              rawData[rawDataIndex++]=green;
              rawData[rawDataIndex++]=blue;
              rawData[rawDataIndex++]=alpha;
            }
          }
 else {
            j+=count;
            while (count-- >= 0) {
              blue=dis.readByte();
              green=dis.readByte();
              red=dis.readByte();
              alpha=dis.readByte();
              rawData[rawDataIndex++]=red;
              rawData[rawDataIndex++]=green;
              rawData[rawDataIndex++]=blue;
              rawData[rawDataIndex++]=alpha;
            }
          }
        }
      }
      format=Format.RGBA8;
    }
 else     if (pixelDepth == 24) {
      for (int i=0; i <= (height - 1); i++) {
        if (!flip) {
          rawDataIndex=(height - 1 - i) * width * dl;
        }
        for (int j=0; j < width; ++j) {
          int count=dis.readByte();
          if ((count & 0x80) != 0) {
            count&=0x07f;
            j+=count;
            blue=dis.readByte();
            green=dis.readByte();
            red=dis.readByte();
            while (count-- >= 0) {
              rawData[rawDataIndex++]=red;
              rawData[rawDataIndex++]=green;
              rawData[rawDataIndex++]=blue;
            }
          }
 else {
            j+=count;
            while (count-- >= 0) {
              blue=dis.readByte();
              green=dis.readByte();
              red=dis.readByte();
              rawData[rawDataIndex++]=red;
              rawData[rawDataIndex++]=green;
              rawData[rawDataIndex++]=blue;
            }
          }
        }
      }
      format=Format.RGB8;
    }
 else     if (pixelDepth == 16) {
      byte[] data=new byte[2];
      float scalar=255f / 31f;
      for (int i=0; i <= (height - 1); i++) {
        if (!flip) {
          rawDataIndex=(height - 1 - i) * width * dl;
        }
        for (int j=0; j < width; j++) {
          int count=dis.readByte();
          if ((count & 0x80) != 0) {
            count&=0x07f;
            j+=count;
            data[1]=dis.readByte();
            data[0]=dis.readByte();
            blue=(byte)(int)(getBitsAsByte(data,1,5) * scalar);
            green=(byte)(int)(getBitsAsByte(data,6,5) * scalar);
            red=(byte)(int)(getBitsAsByte(data,11,5) * scalar);
            while (count-- >= 0) {
              rawData[rawDataIndex++]=red;
              rawData[rawDataIndex++]=green;
              rawData[rawDataIndex++]=blue;
            }
          }
 else {
            j+=count;
            while (count-- >= 0) {
              data[1]=dis.readByte();
              data[0]=dis.readByte();
              blue=(byte)(int)(getBitsAsByte(data,1,5) * scalar);
              green=(byte)(int)(getBitsAsByte(data,6,5) * scalar);
              red=(byte)(int)(getBitsAsByte(data,11,5) * scalar);
              rawData[rawDataIndex++]=red;
              rawData[rawDataIndex++]=green;
              rawData[rawDataIndex++]=blue;
            }
          }
        }
      }
      format=Format.RGB8;
    }
 else {
      throw new IOException("Unsupported TGA true color depth: " + pixelDepth);
    }
  }
 else   if (imageType == TYPE_COLORMAPPED) {
    int bytesPerIndex=pixelDepth / 8;
    if (bytesPerIndex == 1) {
      for (int i=0; i <= (height - 1); i++) {
        if (!flip)         rawDataIndex=(height - 1 - i) * width * dl;
        for (int j=0; j < width; j++) {
          int index=dis.readUnsignedByte();
          if (index >= cMapEntries.length || index < 0)           throw new IOException("TGA: Invalid color map entry referenced: " + index);
          ColorMapEntry entry=cMapEntries[index];
          rawData[rawDataIndex++]=entry.red;
          rawData[rawDataIndex++]=entry.green;
          rawData[rawDataIndex++]=entry.blue;
          if (dl == 4) {
            rawData[rawDataIndex++]=entry.alpha;
          }
        }
      }
    }
 else     if (bytesPerIndex == 2) {
      for (int i=0; i <= (height - 1); i++) {
        if (!flip)         rawDataIndex=(height - 1 - i) * width * dl;
        for (int j=0; j < width; j++) {
          int index=flipEndian(dis.readShort());
          if (index >= cMapEntries.length || index < 0)           throw new IOException("TGA: Invalid color map entry referenced: " + index);
          ColorMapEntry entry=cMapEntries[index];
          rawData[rawDataIndex++]=entry.red;
          rawData[rawDataIndex++]=entry.green;
          rawData[rawDataIndex++]=entry.blue;
          if (dl == 4) {
            rawData[rawDataIndex++]=entry.alpha;
          }
        }
      }
    }
 else {
      throw new IOException("TGA: unknown colormap indexing size used: " + bytesPerIndex);
    }
    format=dl == 4 ? Format.RGBA8 : Format.RGB8;
  }
 else {
    throw new IOException("Grayscale TGA not supported");
  }
  in.close();
  ByteBuffer scratch=BufferUtils.createByteBuffer(rawData.length);
  scratch.clear();
  scratch.put(rawData);
  scratch.rewind();
  Image textureImage=new Image();
  textureImage.setFormat(format);
  textureImage.setWidth(width);
  textureImage.setHeight(height);
  textureImage.setData(scratch);
  return textureImage;
}
