{
  try {
    this.setup(assetInfo);
    BlenderKey blenderKey=blenderContext.getBlenderKey();
    List<Node> rootObjects=new ArrayList<Node>();
    for (    FileBlockHeader block : blocks) {
      if (block.getCode() == FileBlockHeader.BLOCK_OB00) {
        ObjectHelper objectHelper=blenderContext.getHelper(ObjectHelper.class);
        Object object=objectHelper.toObject(block.getStructure(blenderContext),blenderContext);
        if (object instanceof LightNode && (blenderKey.getFeaturesToLoad() & FeaturesToLoad.LIGHTS) != 0) {
          rootObjects.add((LightNode)object);
        }
 else         if (object instanceof Node && (blenderKey.getFeaturesToLoad() & FeaturesToLoad.OBJECTS) != 0) {
          LOGGER.log(Level.FINE,"{0}: {1}--> {2}",new Object[]{((Node)object).getName(),((Node)object).getLocalTranslation().toString(),((Node)object).getParent() == null ? "null" : ((Node)object).getParent().getName()});
          if (((Node)object).getParent() == null) {
            rootObjects.add((Node)object);
          }
        }
      }
    }
    ConstraintHelper constraintHelper=blenderContext.getHelper(ConstraintHelper.class);
    constraintHelper.bakeConstraints(blenderContext);
    LOGGER.fine("Creating the root node of the model and applying loaded nodes of the scene to it.");
    Node modelRoot=new Node(blenderKey.getName());
    for (    Node node : rootObjects) {
      if (node instanceof LightNode) {
        modelRoot.addLight(((LightNode)node).getLight());
      }
      modelRoot.attachChild(node);
    }
    return modelRoot;
  }
 catch (  BlenderFileException e) {
    throw new IOException(e.getLocalizedMessage(),e);
  }
catch (  Exception e) {
    throw new IOException("Unexpected importer exception occured: " + e.getLocalizedMessage(),e);
  }
 finally {
    this.clear();
  }
}
