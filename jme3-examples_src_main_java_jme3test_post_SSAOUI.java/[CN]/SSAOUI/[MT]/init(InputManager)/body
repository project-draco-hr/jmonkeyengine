{
  System.out.println("----------------- Water UI Debugger --------------------");
  System.out.println("-- Sample Radius : press Y to increase, H to decrease");
  System.out.println("-- AO Intensity : press U to increase, J to decrease");
  System.out.println("-- AO scale : press I to increase, K to decrease");
  System.out.println("-- AO bias : press O to increase, P to decrease");
  System.out.println("-- Toggle AO on/off : press space bar");
  System.out.println("-- Use only AO : press Num pad 0");
  System.out.println("-- Output config declaration : press P");
  System.out.println("-------------------------------------------------------");
  inputManager.addMapping("sampleRadiusUp",new KeyTrigger(KeyInput.KEY_Y));
  inputManager.addMapping("sampleRadiusDown",new KeyTrigger(KeyInput.KEY_H));
  inputManager.addMapping("intensityUp",new KeyTrigger(KeyInput.KEY_U));
  inputManager.addMapping("intensityDown",new KeyTrigger(KeyInput.KEY_J));
  inputManager.addMapping("scaleUp",new KeyTrigger(KeyInput.KEY_I));
  inputManager.addMapping("scaleDown",new KeyTrigger(KeyInput.KEY_K));
  inputManager.addMapping("biasUp",new KeyTrigger(KeyInput.KEY_O));
  inputManager.addMapping("biasDown",new KeyTrigger(KeyInput.KEY_L));
  inputManager.addMapping("outputConfig",new KeyTrigger(KeyInput.KEY_P));
  inputManager.addMapping("toggleUseAO",new KeyTrigger(KeyInput.KEY_SPACE));
  inputManager.addMapping("toggleUseOnlyAo",new KeyTrigger(KeyInput.KEY_NUMPAD0));
  ActionListener acl=new ActionListener(){
    public void onAction(    String name,    boolean keyPressed,    float tpf){
      if (name.equals("toggleUseAO") && keyPressed) {
        filter.setEnabled(!filter.isEnabled());
        System.out.println("use AO : " + filter.isEnabled());
      }
      if (name.equals("toggleUseOnlyAo") && keyPressed) {
        filter.setUseOnlyAo(!filter.isUseOnlyAo());
        System.out.println("use Only AO : " + filter.isUseOnlyAo());
      }
      if (name.equals("outputConfig") && keyPressed) {
        System.out.println("new SSAOFilter(" + filter.getSampleRadius() + "f,"+ filter.getIntensity()+ "f,"+ filter.getScale()+ "f,"+ filter.getBias()+ "f);");
      }
    }
  }
;
  AnalogListener anl=new AnalogListener(){
    public void onAnalog(    String name,    float value,    float tpf){
      if (name.equals("sampleRadiusUp")) {
        filter.setSampleRadius(filter.getSampleRadius() + 0.01f);
        System.out.println("Sample Radius : " + filter.getSampleRadius());
      }
      if (name.equals("sampleRadiusDown")) {
        filter.setSampleRadius(filter.getSampleRadius() - 0.01f);
        System.out.println("Sample Radius : " + filter.getSampleRadius());
      }
      if (name.equals("intensityUp")) {
        filter.setIntensity(filter.getIntensity() + 0.01f);
        System.out.println("Intensity : " + filter.getIntensity());
      }
      if (name.equals("intensityDown")) {
        filter.setIntensity(filter.getIntensity() - 0.01f);
        System.out.println("Intensity : " + filter.getIntensity());
      }
      if (name.equals("scaleUp")) {
        filter.setScale(filter.getScale() + 0.01f);
        System.out.println("scale : " + filter.getScale());
      }
      if (name.equals("scaleDown")) {
        filter.setScale(filter.getScale() - 0.01f);
        System.out.println("scale : " + filter.getScale());
      }
      if (name.equals("biasUp")) {
        filter.setBias(filter.getBias() + 0.001f);
        System.out.println("bias : " + filter.getBias());
      }
      if (name.equals("biasDown")) {
        filter.setBias(filter.getBias() - 0.001f);
        System.out.println("bias : " + filter.getBias());
      }
    }
  }
;
  inputManager.addListener(acl,"toggleUseAO","toggleUseOnlyAo","outputConfig");
  inputManager.addListener(anl,"sampleRadiusUp","sampleRadiusDown","intensityUp","intensityDown","scaleUp","scaleDown","biasUp","biasDown");
}
